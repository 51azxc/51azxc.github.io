<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Angular表单部分知识点</title>
    <url>/angular-form/</url>
    <content><![CDATA[<p>收集一些使用Angular处理表单的知识点。</p>
<a id="more"></a>
<h3 id="基本表单验证"><a href="#基本表单验证" class="headerlink" title="基本表单验证"></a>基本表单验证</h3><p><code>Angular</code>的表单验证的部分属性:</p>
<table>
<thead>
<tr>
<th>属性</th>
<th style="text-align:center">css类</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$valid</code></td>
<td style="text-align:center">ng-valid</td>
<td>表单已经通过了验证，<code>boolean</code>类型</td>
</tr>
<tr>
<td><code>$invalid</code></td>
<td style="text-align:center">ng-invalid</td>
<td>表单没有通过验证， <code>boolean</code>类型</td>
</tr>
<tr>
<td><code>$pristine</code></td>
<td style="text-align:center">ng-pristine</td>
<td>表单还没有被输入任何字符，<code>boolean</code>类型</td>
</tr>
<tr>
<td><code>$dirty</code></td>
<td style="text-align:center">ng-dirty</td>
<td>表单已经有输入字符，清除为空也算， <code>boolean</code>类型</td>
</tr>
<tr>
<td><code>$touched</code></td>
<td style="text-align:center">ng-touched</td>
<td>表单的任何输入框处罚了<code>onblur</code>事件，即获取焦点后又失去了焦点。<code>boolean</code>类型</td>
</tr>
</tbody>
</table>
<p>接下来开始构建一个表单:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"registerForm"</span> <span class="attr">ng-submit</span>=<span class="string">"register()"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里指定了表单提交的方法为<code>register()</code>,这个方法将在对应的控制器里定义；而<code>novalidate</code>则是去除了<strong>HTML5</strong>默认的表单验证。</p>
<p>然后开始往表单里面添加相关表单元素:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"registerForm"</span> <span class="attr">ng-submit</span>=<span class="string">"register()"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"username"</span> <span class="attr">ng-model</span>=<span class="string">"user.username"</span> <span class="attr">ng-minlength</span>=<span class="string">"3"</span> <span class="attr">ng-maxlength</span>=<span class="string">"12"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"user.password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"user.confirmPassword"</span> <span class="attr">name</span>=<span class="string">"confirmPassword"</span> <span class="attr">placeholder</span>=<span class="string">"confirm password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-lg btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">ng-disabled</span>=<span class="string">"registerForm.$invalid || disabled"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里添加了三个输入框，分别是：用户名，密码以及确认密码；还有最后的提交按钮。这里面涉及到的关键字有:</p>
<ul>
<li><code>required</code>: 必须输入</li>
<li><code>ng-minlength</code>: 最小输入长度</li>
<li><code>ng-maxlength</code>: 最大输入长度</li>
<li><code>ng-disabled</code>: 没通过验证禁止点击提交按钮,这里使用表单的<code>$invalid</code>来判断</li>
<li><code>ng-model</code>: 绑定数据</li>
</ul>
<p>接下来通过<code>ng-show</code>来显示没有通过验证的错误信息<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"user.password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span> <span class="attr">ng-show</span>=<span class="string">"registerForm.password.$dirty &amp;&amp; registerForm.password.$invalid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"registerForm.password.$error.required"</span>&gt;</span>Password is required<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在密码输入框下方添加了警告，通过表单的<code>$dirty</code>判断是否有输入过以及<code>$invalid</code>是否合法来决定显示警告信息<br>如果使用了<code>Bootstrap</code>来美化界面，还能使用<code>ng-class</code>配合其中的<code>has-error</code>样式生成警告信息:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;'has-error': registerForm.password.$invalid &amp;&amp; !registerForm.password.$pristine&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"user.password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span> <span class="attr">ng-show</span>=<span class="string">"registerForm.password.$dirty &amp;&amp; registerForm.password.$invalid"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"registerForm.password.$error.required"</span>&gt;</span>Password is required<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果使用了<code>angular-messages</code>，可以用<code>ng-messages</code>来显示警告信息:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"user.password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-messages</span>=<span class="string">"registerForm.password.$dirty &amp;&amp; registerForm.password.$error"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-message</span>=<span class="string">"required"</span>&gt;</span>Password is required.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>最后在控制器中是这样的:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myApp.controller(<span class="string">'registerCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">  $scope.register = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断是不是通过了验证</span></span><br><span class="line">    <span class="keyword">if</span> ($scope.registerForm.$valid) &#123;</span><br><span class="line">      $scope.error = <span class="literal">false</span>;</span><br><span class="line">      $scope.disabled = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">	&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="判断用户名是否重复"><a href="#判断用户名是否重复" class="headerlink" title="判断用户名是否重复"></a>判断用户名是否重复</h3><p>接下来需要做的是复杂一点的表单验证。首先需要保证输入的用户名唯一性，因此需要先查询后台数据，如果已经被注册。首先要注册一个指令:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myApp.directive(<span class="string">'nameUnique'</span>, [<span class="string">'$http'</span>, <span class="string">'$timeout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http, $timeout</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> checking = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>: <span class="string">'ngModel'</span>,</span><br><span class="line">    link: <span class="function"><span class="keyword">function</span>(<span class="params">scope, elem, attrs, ctrl</span>)</span>&#123;</span><br><span class="line">      scope.$watch(attrs.ngModel, <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!checking)&#123;</span><br><span class="line">          checking = $timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $http.post(<span class="string">'/check'</span>, &#123;<span class="string">'name'</span>: newVal&#125;).then( <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">              ctrl.$setValidity(<span class="string">'unique'</span>, response.data.isUnique);</span><br><span class="line">              checking = <span class="literal">null</span>;</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">            checking = <span class="literal">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;, <span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></p>
<p>这里注册了一个名为<code>nameUnique</code>的指令，引入了<code>$http</code>,<code>$timeout</code>服务。返回的参数中,<code>require</code>表明这个指令需要在元素中搜索<code>controller</code>,并且放入到<code>link</code>函数的参数中。<br><code>link</code>函数则是当<code>angular</code>读取了指令之后，完成了<code>compile</code>将指令转成对应的<code>HTML</code>元素之后所进行的一系列操作，例如数据的双向绑定等等。在<code>link</code>函数中，传入的参数分别是<code>scope</code>：作用域；<code>elem</code>:对应的元素；<code>attrs</code>:元素中的所有属性（以<code>map</code>的形式返回）以及上文中提到的<code>controller</code>。<br><code>link</code>函数中调用了<code>$timeout</code>方法，延迟0.5s运行，防止对后端频繁请求过大，作用于<code>scope</code>通过<code>$watch</code>方法来监听元素属性<code>ngModal</code>对应的值，如果有变化就进行下面的函数操作，请求后端，如果是唯一的，则通过<code>$setValidity</code>方法设置其在表单中的有效性。</p>
<p>在<code>HTML</code>中这样调用:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"username"</span> <span class="attr">ng-model</span>=<span class="string">"user.username"</span> <span class="attr">name-unique</span>=<span class="string">"username"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span> <span class="attr">ng-show</span>=<span class="string">"registerForm.username.$dirty &amp;&amp; registerForm.username.$invalid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"registerForm.username.$error.required"</span>&gt;</span>Username is required<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">"registerForm.username.$error.unique"</span>&gt;</span>Username is taken, try another one<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在这里使用的新指令为<code>name-unique</code>，也可以使用<code>HTML5</code>新规范<code>x-</code>，<code>x-data</code>前缀，解析时会把前缀去掉。由于<code>HTML</code>对标签的大小写不敏感，因此需要通过连接符<code>-</code>或者<code>:</code>来使用驼峰命名法的指令。</p>
<hr>
<h3 id="密码一致性"><a href="#密码一致性" class="headerlink" title="密码一致性"></a>密码一致性</h3><p>接下来需要判断的则是密码确认一致性。这里也需要新建立一个指令:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myApp.directive(<span class="string">'passwordMatch'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    restrict: <span class="string">'A'</span>,</span><br><span class="line">    scope: &#123; </span><br><span class="line">      passwordMatch: <span class="string">'='</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">require</span>: <span class="string">'ngModel'</span>,</span><br><span class="line">    link: <span class="function"><span class="keyword">function</span>(<span class="params">scope, elem, attrs, ctrl</span>)</span>&#123;</span><br><span class="line">      scope.$watch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> combined;</span><br><span class="line">        <span class="keyword">if</span>(scope.passwordMatch || ctrl.$viewValue)&#123;</span><br><span class="line">          combined = scope.passwordMatch + <span class="string">'_'</span> + ctrl.$viewValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> combined;</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value)&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This function is added to the list of the $parsers.</span></span><br><span class="line"><span class="comment">         * It will be executed the DOM (the view value) change.</span></span><br><span class="line"><span class="comment">         * Array.unshift() put it in the beginning of the list, so</span></span><br><span class="line"><span class="comment">         * it will be executed before all the other</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ctrl.$parsers.unshift(<span class="function"><span class="keyword">function</span>(<span class="params">viewValue</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> origin = scope.passwordMatch;</span><br><span class="line">        <span class="keyword">if</span> (origin != viewValue)&#123;</span><br><span class="line">          ctrl.$setValidity(<span class="string">'match'</span>, <span class="literal">false</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          ctrl.$setValidity(<span class="string">'match'</span>, <span class="literal">true</span>);</span><br><span class="line">          <span class="keyword">return</span> viewValue;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></p>
<p>部分属性解释：</p>
<ul>
<li><code>restrict</code>: 指定这个指定该如何使用。通常有<strong>A</strong>表示为<em>属性</em>,<strong>E</strong>表示为<em>元素</em>,<strong>C</strong>表示为<code>class</code>。</li>
<li><code>scope</code>: 指定作用域。默认情况下不指定是使用父级作用域，上述指定则是对于<code>passwordMatch</code>这个属性指定的值双向绑定。在监控整个属性的同时，还能够改变父级作用域的此属性的值。</li>
</ul>
<p>接下来还是<code>link</code>函数，在<code>$watch</code>中，第一个参数则为需要监控的数值，这里我们读取了作用域<code>passwordMatch</code>指定的值以及控制器中页面可见元素数值<code>$viewValue</code>组合起来。<br><code>$parsers</code>是一个需要执行的函数的列表。当控制器读取了<code>DOM</code>的值时，里面的函数会按照顺序执行。这里将最先执行匹配方法。失败的话则返回<code>undefined</code>,表示解析发生错误，将不会运行<code>ngModel</code>的<code>$validators</code>。关于这部分可以参考<a href="https://docs.angularjs.org/api/ng/type/ngModel.NgModelController" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a></p>
<p>接下来在<code>HTML</code>中的使用新指令:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">ng-model</span>=<span class="string">"user.password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">password-match</span>=<span class="string">"user.confirmPassword"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-messages</span>=<span class="string">"registerForm.password.$dirty &amp;&amp; registerForm.password.$error"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-message</span>=<span class="string">"required"</span>&gt;</span>This is required.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-message</span>=<span class="string">"match"</span>&gt;</span>Password is not match<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">ng-model</span>=<span class="string">"user.confirmPassword"</span> <span class="attr">name</span>=<span class="string">"confirmPassword"</span> <span class="attr">password-match</span>=<span class="string">"user.password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-messages</span>=<span class="string">"registerForm.confirmPassword.$dirty &amp;&amp; registerForm.confirmPassword.$error"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-message</span>=<span class="string">"required"</span>&gt;</span>This is required.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-message</span>=<span class="string">"match"</span>&gt;</span>Password is not match<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>关于<strong>指令</strong>部分，可以参考<a href="https://docs.angularjs.org/guide/directive" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a></p>
<hr>
<blockquote>
<p>参考<br><a href="https://scotch.io/tutorials/angularjs-form-validation" rel="external nofollow noopener noreferrer" target="_blank">AngularJS Form Validation</a><br><a href="http://www.ng-newsletter.com/posts/form-validation-with-angularjs.html" rel="external nofollow noopener noreferrer" target="_blank">Form validation with AngularJS</a><br><a href="http://stackoverflow.com/questions/14012239/password-check-directive-in-angularjs" rel="external nofollow noopener noreferrer" target="_blank">password-check directive in angularjs</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>form</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular登陆认证小例子</title>
    <url>/angular-login/</url>
    <content><![CDATA[<p>使用<code>Angular</code>来实现登陆跳转等功能的话，其实只要在<code>ui-router</code>的<code>state</code>中或者<code>ngRoute</code>中的<code>when</code>方法中添加对应的登陆判断变量，然后在根据相应的路由跳转事件中进行判断即可。</p>
<a id="more"></a>
<p>首先在路由设置中添加对应的变量<code>requireLogin</code>来断定是否登陆:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$stateProvider</span><br><span class="line">  .state(<span class="string">'home'</span>,&#123;</span><br><span class="line">	url: <span class="string">'/'</span>,</span><br><span class="line">	templateUrl: <span class="string">'/static/partials/welcome.html'</span>,</span><br><span class="line">	controller: <span class="string">'welcomeCtrl'</span>,</span><br><span class="line">	data: &#123; <span class="attr">requireLogin</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .state(<span class="string">'blog'</span>,&#123;</span><br><span class="line">	abstract: <span class="literal">true</span>,</span><br><span class="line">	url: <span class="string">'/blogs'</span>,</span><br><span class="line">	template: <span class="string">'&lt;ui-view /&gt;'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .state(<span class="string">'blog.create'</span>,&#123;</span><br><span class="line">	url: <span class="string">'/create'</span>,</span><br><span class="line">	templateUrl: <span class="string">'/static/partials/blog.create.html'</span>,</span><br><span class="line">	controller: <span class="string">'blogCreateCtrl'</span>,</span><br><span class="line">	data: &#123; <span class="attr">requireLogin</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//...</span></span><br></pre></td></tr></table></figure></p>
<p>接下来在根作用域捕获<code>$stateChangeStart</code>事件触发方法中判断:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$rootScope.$on(<span class="string">'$stateChangeStart'</span>, </span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">event, toState, toParams, fromState, fromParams</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//如果requireLogin为true且不存在授权信息</span></span><br><span class="line">  <span class="keyword">if</span> (toState.data.requireLogin &amp;&amp; AuthService.isAuth() === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">//跳转到主页面</span></span><br><span class="line">    $location.path(<span class="string">'/'</span>);</span><br><span class="line">    <span class="comment">//向子作用域发送消息</span></span><br><span class="line">    $rootScope.$broadcast(<span class="string">'token timeout'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这里定义了<code>AuthService</code>的服务:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myApp.factory(<span class="string">'AuthHttpService'</span>, [<span class="string">'$q'</span>, <span class="string">'$timeout'</span>, <span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$q, $timeout, $http</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> sendData = <span class="function"><span class="keyword">function</span>(<span class="params">url, method, username,password, data</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> deferred = $q.defer();</span><br><span class="line">		<span class="keyword">var</span> req = &#123;</span><br><span class="line">			method: method,</span><br><span class="line">			url: url,</span><br><span class="line">			data: data,</span><br><span class="line">			headers: &#123;</span><br><span class="line">				Accept: <span class="string">'application/json'</span>,</span><br><span class="line">				<span class="comment">//对数据进行Base64编码</span></span><br><span class="line">				Authorization: <span class="string">'Basic '</span> + btoa(username + <span class="string">':'</span> + password)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		$timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			$http(req).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">				deferred.resolve(response);</span><br><span class="line">			&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">				deferred.reject(response);</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;,<span class="number">1000</span>);</span><br><span class="line">		<span class="keyword">return</span> deferred.promise;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="string">'sendData'</span>: sendData</span><br><span class="line">	&#125;</span><br><span class="line">&#125;]);</span><br><span class="line">myApp.factory(<span class="string">'AuthService'</span>,</span><br><span class="line">  [<span class="string">'$q'</span>, <span class="string">'localStorageService'</span>, <span class="string">'AuthHttpService'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">$q, localStorageService, AuthHttpService</span>)</span>&#123;</span><br><span class="line">  	<span class="keyword">var</span> login = <span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">  		<span class="keyword">var</span> deferred = $q.defer();</span><br><span class="line">  		<span class="comment">//访问后端获取数据</span></span><br><span class="line">		AuthHttpService.sendData(<span class="string">'/token'</span>, <span class="string">'POST'</span>, user.username, user.password, user)</span><br><span class="line">			.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(response.status === <span class="number">200</span>)&#123;</span><br><span class="line">					setToken(response.data);</span><br><span class="line">					deferred.resolve();</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					deferred.reject();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">				deferred.reject();</span><br><span class="line">			&#125;);</span><br><span class="line">  		<span class="keyword">return</span> deferred.promise;</span><br><span class="line">  	&#125;;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">var</span> logout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		removeToken();</span><br><span class="line">  	&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> setToken = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        将token以及userId存入到本地存储中</span><br><span class="line">		localStorageService.set(<span class="string">'token'</span>, data.token);</span><br><span class="line">		localStorageService.set(<span class="string">'userId'</span>, data.userId);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getToken = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> localStorageService.get(<span class="string">'token'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getUserId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> localStorageService.get(<span class="string">'userId'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> removeToken = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		localStorageService.remove(<span class="string">'token'</span>);</span><br><span class="line">		localStorageService.remove(<span class="string">'userId'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//判断是否已登陆</span></span><br><span class="line">    <span class="keyword">var</span> isAuth = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (getToken()) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">return</span> (&#123;</span><br><span class="line">		isAuth: isAuth,</span><br><span class="line">		login: login,</span><br><span class="line">		logout: logout,</span><br><span class="line">		getToken: getToken,</span><br><span class="line">		getUserId: getUserId</span><br><span class="line">  	&#125;);</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></p>
<p>在根作用域中，我们还需要捕获已经失效的授权，这里使用了<code>Restangular</code>插件:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Restangular.addFullRequestInterceptor(<span class="function"><span class="keyword">function</span>(<span class="params">headers, params, element, httpConfig</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!headers)&#123;</span><br><span class="line">		    <span class="comment">//获取验证的形式不仅为'用户名:密码'，</span></span><br><span class="line">		    <span class="comment">//也可以为token，因此如果含有token，</span></span><br><span class="line">		    <span class="comment">//则也需要满足'username:password'的格式</span></span><br><span class="line">			headers = &#123; <span class="string">'Authorization'</span>: <span class="string">'Basic '</span> + btoa(AuthService.getToken() + <span class="string">':unused'</span>) &#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		headers[<span class="string">'Authorization'</span>] = <span class="string">'Basic '</span> + btoa(AuthService.getToken() + <span class="string">':unused'</span>);</span><br><span class="line">		<span class="keyword">return</span> &#123; <span class="attr">headers</span>: headers &#125;;</span><br><span class="line">	&#125;);</span><br><span class="line">	Restangular.setErrorInterceptor(<span class="function"><span class="keyword">function</span>(<span class="params">response, deferred, responseHandler</span>)</span>&#123;</span><br><span class="line">	    <span class="comment">//判断是否授权失效</span></span><br><span class="line">		<span class="keyword">if</span> (response.status == <span class="number">401</span>) &#123;</span><br><span class="line">			AuthService.logout();</span><br><span class="line">			$location.path(<span class="string">'/'</span>);</span><br><span class="line">			alert(<span class="string">'token invalid,please sign in'</span>);</span><br><span class="line">			$rootScope.$broadcast(<span class="string">'token timeout'</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在后端使用了<code>flask</code>来做授权部分:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.httpauth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"></span><br><span class="line"><span class="comment"># flask-httpauth</span></span><br><span class="line">auth = HTTPBasicAuth()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆获取token</span></span><br><span class="line"><span class="meta">@app.route('/token', methods=['POST'])</span></span><br><span class="line"><span class="meta">@auth.login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_auth_token</span><span class="params">()</span>:</span></span><br><span class="line">    token = g.user.generate_auth_token()</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123; <span class="string">'token'</span>: token.decode(<span class="string">'ascii'</span>), <span class="string">'userId'</span>: g.user.id &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证，会自动进行base64转码，因此需要将传入的参数以"base64(email_or_token:password)"</span></span><br><span class="line"><span class="comment"># 进行编码</span></span><br><span class="line"><span class="meta">@auth.verify_password</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_password</span><span class="params">(username_or_token, password)</span>:</span></span><br><span class="line">    user = User.verify_auth_token(username_or_token)</span><br><span class="line">    <span class="comment"># 不是token登陆则以正常用户名密码登录</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        md5.update(password.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        hash_password = md5.hexdigest()</span><br><span class="line">        user = User.query.filter_by(username=username_or_token)\</span><br><span class="line">               .filter_by(password=hash_password).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    g.user = user</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/blog/create', methods=['POST'])</span></span><br><span class="line"><span class="meta">@auth.login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creaetBlog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<p>这里面使用了<code>Flask-HTTPAuth</code>来进行<strong>HTTP BASIC Authentication</strong>的方法来进行验证。<br>在标注了<a href="mailto:`@auth.logi" rel="external nofollow noopener noreferrer" target="_blank">`@auth.logi</a>n_required<code>的注解的方法则表明需要让</code>Flask-HTTPAuth<code>需要验证用户信息。通过实现</code>verify_password<code>回调函数去验证用户名和密码，然后</code>Flask-HTTPAuth<code>再调用这个回调函数，这样就验证用户是否授权了。
当通过授权的用户信息则是保存在应用上下文</code>g<code>对象中，这样其他函数就可以调用到登陆的用户信息，相当于存在</code>session`中。</p>
<hr>
<blockquote>
<p>参考<br><a href="https://realpython.com/blog/python/handling-user-authentication-with-angular-and-flask/" rel="external nofollow noopener noreferrer" target="_blank">Handling User Authentication With Angular and Flask</a><br><a href="http://jasonwatmore.com/post/2015/03/10/AngularJS-User-Registration-and-Login-Example.aspx" rel="external nofollow noopener noreferrer" target="_blank">AngularJS User Registration and Login Example &amp; Tutorial</a><br><a href="http://brewhouse.io/blog/2014/12/09/authentication-made-simple-in-single-page-angularjs-applications.html" rel="external nofollow noopener noreferrer" target="_blank">Authentication made simple in Single Page AngularJS Applications</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular零散知识点收集</title>
    <url>/angular-problem/</url>
    <content><![CDATA[<p>收集一些平时使用Angularjs1.x及Angular Material碰到的问题的解决方法.</p>
<a id="more"></a>
<h3 id="Angular-get方法传参"><a href="#Angular-get方法传参" class="headerlink" title="Angular get方法传参"></a>Angular get方法传参</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/17225088/http-get-parameters-does-not-work" rel="external nofollow noopener noreferrer" target="_blank">$http get parameters does not work</a></p>
</blockquote>
<p>道在<code>AngularJS</code>中使用<code>POST</code>方法提交传递参数是:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$http.post(<span class="string">'/api/users/add'</span>, &#123; <span class="attr">user</span>:user &#125;)</span><br></pre></td></tr></table></figure></p>
<p>如果是<code>GET</code>方法的话则是:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$http.get(<span class="string">'/api/users/add'</span>, &#123;</span><br><span class="line">	params: &#123; <span class="attr">user</span>:user &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="获取url参数而不刷新页面"><a href="#获取url参数而不刷新页面" class="headerlink" title="获取url参数而不刷新页面"></a>获取url参数而不刷新页面</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/17513093/how-can-i-set-a-query-parameter-in-angularjs-without-doing-a-route" rel="external nofollow noopener noreferrer" target="_blank">How can I set a query parameter in AngularJS without doing a route?</a></p>
</blockquote>
<p>当设置了<code>URL</code>发生改变时，默认会刷新页面，如果只是想添加查询数据到<code>url</code>而无需刷新页面，可以通过<code>$routeProvider</code>的属性<code>reloadOnSearch</code>来设置<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$routeProvider.when(<span class="string">'/daylist'</span>, &#123;</span><br><span class="line">	templateUrl: <span class="string">'partials/daylist'</span>,</span><br><span class="line">	controller: <span class="string">'DayListCtrl'</span>,</span><br><span class="line">	reloadOnSearch: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>在<code>Controller</code>中就可以使用<code>$location.search()</code>方法来获取<code>url</code>中的参数，或者设置<code>query</code>参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/daylist</span><br><span class="line">$location.search(&apos;id&apos;,123) =&gt;</span><br><span class="line">http://localhost:3000/daylist?id=123</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="使用-locationChangeStart替换-routeChangeStart"><a href="#使用-locationChangeStart替换-routeChangeStart" class="headerlink" title="使用$locationChangeStart替换$routeChangeStart"></a>使用<code>$locationChangeStart</code>替换<code>$routeChangeStart</code></h3><blockquote>
<p><a href="http://stackoverflow.com/questions/16344223/angularjs-cancel-route-change-event" rel="external nofollow noopener noreferrer" target="_blank">AngularJs - cancel route change event</a></p>
</blockquote>
<p>在之前我们使用<code>$routeChangeStart</code>来触发路由变化之后的操作，如今需要使用<code>$locationChangeStart</code>来代替,详见<a href="https://github.com/angular/angular.js/issues/2109" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/angular/angular.js/issues/2109</a><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$scope.$on(<span class="string">'$locationChangeStart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, next, current</span>)</span>&#123;</span><br><span class="line">  $scope.isSignIn = AuthService.isAuthenticated();</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="处理解析换行符变-lt-br-gt"><a href="#处理解析换行符变-lt-br-gt" class="headerlink" title="处理解析换行符变&lt;br /&gt;"></a>处理解析换行符变<code>&lt;br /&gt;</code></h3><blockquote>
<p><a href="https://segmentfault.com/q/1010000002891789" rel="external nofollow noopener noreferrer" target="_blank">angularjs处理/n转<br>时候 <br>不会解析的问题</a><br><a href="https://segmentfault.com/a/1190000000639561" rel="external nofollow noopener noreferrer" target="_blank">angular中的ng-bind-html指令和$sce服务</a></p>
</blockquote>
<p>使用<code>angularjs</code>时，如果注入的数据中包含了部分特殊字符时，如<code>\n</code>要转成<code>html</code>标签<code>&lt;br&gt;</code>的话，可以使用<code>ng-bind-html</code>标签配合<code>$sce</code>服务来解决。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind-html</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后在<code>js</code>代码中使用<code>$sce</code>的<code>trustAsHtml</code>方法:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.controller(<span class="string">'TestController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$sce'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope,$sce</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将test中的字符串里的换行符转为标签</span></span><br><span class="line">    $scope.test=$sce.trustAsHtml(str.replace(<span class="regexp">/\n/g</span>,<span class="string">"&lt;br/&gt;"</span>));</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="ui-router子页面如何获取父级页面的url参数"><a href="#ui-router子页面如何获取父级页面的url参数" class="headerlink" title="ui-router子页面如何获取父级页面的url参数"></a><code>ui-router</code>子页面如何获取父级页面的url参数</h3><blockquote>
<p><a href="http://bubkoo.com/2014/01/02/angular/ui-router/guide/index/" rel="external nofollow noopener noreferrer" target="_blank">学习 ui-router 系列文章索引</a><br><a href="http://stackoverflow.com/questions/21097820/angular-ui-router-how-to-access-parameters-in-nested-named-view-passed-from" rel="external nofollow noopener noreferrer" target="_blank">Angular ui-router - how to access parameters in nested, named view, passed from the parent template?</a></p>
</blockquote>
<p><code>ui-router</code>中如果有子页面嵌套在父级页面，如果需要获取到父级页面传入的路由参数，例如<code>/users/1/blogs/1</code>,首先需要在全局配置:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$stateProvider</span><br><span class="line">    .state(<span class="string">'user'</span>,&#123;</span><br><span class="line">		url: <span class="string">'/users/:userId'</span>,</span><br><span class="line">		templateUrl: <span class="string">'/static/partials/user.html'</span>,</span><br><span class="line">		controller: <span class="string">'userCtrl'</span></span><br><span class="line">	&#125;)</span><br><span class="line">	.state(<span class="string">'user.blog'</span>,&#123;</span><br><span class="line">		url: <span class="string">'/users/:userId/blogs/:blogId'</span>,</span><br><span class="line">		templateUrl: <span class="string">'/static/partials/blog.html'</span>,</span><br><span class="line">		controller: <span class="string">'userBlogCtrl'</span></span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure></p>
<p>然后在<code>html</code>中可以这样调用:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"user.blog(&#123; userId: blog.author.id, page:1 &#125;)"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>接下来在控制类中通过注入的<code>$stateParams</code>获取对应的属性:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.controller(<span class="string">'userBlogCtrl'</span>,</span><br><span class="line">	  [<span class="string">'$scope'</span>, <span class="string">'$stateParams'</span>, <span class="string">'$state'</span>, </span><br><span class="line">		<span class="function"><span class="keyword">function</span>(<span class="params">$scope, $stateParams, $state</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log($stateParams.userId);</span><br><span class="line">		<span class="built_in">console</span>.log($stateParams.blogId);</span><br><span class="line">	&#125;]);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Angular-Material更改日期选择组件默认格式"><a href="#Angular-Material更改日期选择组件默认格式" class="headerlink" title="Angular Material更改日期选择组件默认格式"></a>Angular Material更改日期选择组件默认格式</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/32566416/change-format-of-md-datepicker-in-angular-material" rel="external nofollow noopener noreferrer" target="_blank">Change format of md-datepicker in Angular Material</a></p>
</blockquote>
<p><code>Angular Material</code>中的日期选择组件<code>$mdDateLocaleProvider</code>选中的日期格式为<code>dd/MM/yyyy</code>,如果想要替换成其他格式(比如<code>yyyy-MM-dd</code>)，可以使用<code>formatDate</code>方法:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myApp.config([<span class="string">'$mdDateLocaleProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$mdDateLocaleProvider</span>) </span>&#123;</span><br><span class="line">  $mdDateLocaleProvider.formatDate = <span class="function"><span class="keyword">function</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (date <span class="keyword">instanceof</span> <span class="built_in">Date</span> &amp;&amp; !<span class="built_in">isNaN</span>(date.valueOf())) &#123;</span><br><span class="line">			<span class="keyword">var</span> y = date.getFullYear().toString();</span><br><span class="line">			<span class="keyword">var</span> m = (date.getMonth()+<span class="number">1</span>).toString();</span><br><span class="line">			<span class="keyword">var</span> d = date.getDate().toString();</span><br><span class="line">			<span class="keyword">return</span> y + <span class="string">'-'</span> + (m[<span class="number">1</span>]?m:<span class="string">"0"</span>+m) + <span class="string">'-'</span> + (d[<span class="number">1</span>]?d:<span class="string">"0"</span>+d);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Angular-Material对话框传值"><a href="#Angular-Material对话框传值" class="headerlink" title="Angular Material对话框传值"></a>Angular Material对话框传值</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/31240772/passing-data-to-mddialog" rel="external nofollow noopener noreferrer" target="_blank">Passing data to mdDialog</a></p>
</blockquote>
<p><code>$mdDialog</code>中有个属性是<code>locals</code>,通过它可以给对应的控制器传入参数:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$mdDialog.show(&#123;</span><br><span class="line">  templateUrl: <span class="string">'showImg.html'</span>,</span><br><span class="line">  locals: &#123; <span class="attr">imgUrl</span>: url &#125;,</span><br><span class="line">  controller: <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $mdDialog, imgUrl</span>)</span>&#123;</span><br><span class="line">    $scope.imgUrl = imgUrl;</span><br><span class="line">  	$scope.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  	  $mdDialog.cancel();</span><br><span class="line">  	&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  clickOutsideToClose:<span class="literal">true</span>,</span><br><span class="line">  targetEvent: ev</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>传入的参数必须以对象形式传入，必须从控制器中注入</p>
<hr>
<h3 id="Angularjs与Requirejs集成"><a href="#Angularjs与Requirejs集成" class="headerlink" title="Angularjs与Requirejs集成"></a>Angularjs与Requirejs集成</h3><blockquote>
<p><a href="http://beginor.github.io/2014/11/17/load-angularjs-with-requirejs.html" rel="external nofollow noopener noreferrer" target="_blank">使用 RequireJS 加载 AngularJS</a><br><a href="https://medium.com/angularjs-meetup-south-london/angular-using-requirejs-amd-528358208f84#.ej72m58z6" rel="external nofollow noopener noreferrer" target="_blank">Angular — Using RequireJs (AMD)</a><br><a href="http://www.ddhigh.com/2015/07/development-angularjs-app-with-requirejs/" rel="external nofollow noopener noreferrer" target="_blank">angularjs集成requirejs</a></p>
</blockquote>
<p>首先在页面中引入<code>requirejs</code>：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/bower_components/requirejs/require.js"</span> <span class="attr">data-main</span>=<span class="string">"/static/js/main"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样<code>requirejs</code>会自动加载<code>main.js</code>,接下来就是配置入口文件<code>main.js</code>：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    <span class="comment">//配置库路径</span></span><br><span class="line">	paths: &#123;</span><br><span class="line">		<span class="string">'angular'</span>: <span class="string">'/static/bower_components/angular/angular'</span>,</span><br><span class="line">		<span class="string">'angular-ui-bootstrap'</span>: <span class="string">'/static/bower_components/angular-bootstrap/ui-bootstrap-tpls'</span>,</span><br><span class="line">		<span class="string">'angular-ui-router'</span>: <span class="string">'/static/bower_components/angular-ui-router/release/angular-ui-router'</span></span><br><span class="line">		<span class="comment">//...</span></span><br><span class="line">	&#125;,</span><br><span class="line">    <span class="comment">//导出全局变量</span></span><br><span class="line">	shim: &#123;</span><br><span class="line">		<span class="string">'angular'</span>: &#123;</span><br><span class="line">			exports: <span class="string">'angular'</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">'angular-ui-bootstrap'</span>: &#123;</span><br><span class="line">			deps: [<span class="string">'angular'</span>],</span><br><span class="line">			exports: <span class="string">'angular-ui-bootstrap'</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">'angular-ui-router'</span>: &#123;</span><br><span class="line">			deps: [<span class="string">'angular'</span>],</span><br><span class="line">			exports: <span class="string">'angular-ui-router'</span></span><br><span class="line">		&#125;</span><br><span class="line">	    <span class="comment">//...</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化创建ngApp</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'angular'</span>, <span class="string">'app'</span>, <span class="string">'router'</span>, <span class="string">'controller'</span>, <span class="string">'service'</span>, <span class="string">'directive'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">angular</span>) </span>&#123;</span><br><span class="line">    angular.bootstrap(<span class="built_in">document</span>, [<span class="string">'app'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>接下来是遵循<strong>AMD</strong>规范的<code>app.js</code>：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="string">'app'</span>, [<span class="string">'angular'</span>, <span class="string">'angular-ui-bootstrap'</span>, <span class="string">'angular-ui-router'</span>], </span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">angular</span>)</span>&#123;</span><br><span class="line"><span class="meta">	'use strict'</span>;</span><br><span class="line">	<span class="keyword">return</span> angular.module(<span class="string">'app'</span>, [<span class="string">'ui.bootstrap'</span>, <span class="string">'ui.router'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这样，其他的模块就可以使用<code>app</code>了。<br>接下来是路由管理工具<code>router.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define([<span class="string">'app'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> app.run([<span class="string">'$rootScope'</span>, <span class="string">'$location'</span>, <span class="string">'$state'</span>, <span class="string">'$stateParams'</span>,</span><br><span class="line">		<span class="function"><span class="keyword">function</span>(<span class="params">$rootScope, $location, $state, $stateParams, AuthService, Restangular</span>)</span>&#123;</span><br><span class="line">			$rootScope.$on(<span class="string">'$stateChangeStart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, toState, toParams, fromState, fromParams</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (toState.data.requireLogin) &#123;</span><br><span class="line">					$location.path(<span class="string">'/'</span>);</span><br><span class="line">				&#125;;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;])</span><br><span class="line">		.config(<span class="function"><span class="keyword">function</span>(<span class="params">$stateProvider, $urlRouterProvider</span>)</span>&#123;</span><br><span class="line">			$urlRouterProvider.otherwise(<span class="string">'/'</span>);</span><br><span class="line">			$stateProvider</span><br><span class="line">				.state(<span class="string">'home'</span>,&#123;</span><br><span class="line">					url: <span class="string">'/'</span>,</span><br><span class="line">					templateUrl: <span class="string">'/static/partials/home.html'</span>,</span><br><span class="line">					data: &#123; <span class="attr">requireLogin</span>: <span class="literal">false</span> &#125;</span><br><span class="line">				&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在<code>controller.js</code>中也可以使用<code>app</code>这个根模块了:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define([<span class="string">'app'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    app.controller(<span class="string">'appCtrl'</span>,</span><br><span class="line">        [<span class="string">'$scope'</span>, <span class="string">'$location'</span>, <span class="string">'$http'</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $location, $http</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>其余<code>service.js</code>,<code>directive.js</code>也类似。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Angular-Material</tag>
      </tags>
  </entry>
  <entry>
    <title>displayTag 属性</title>
    <url>/displayTag/</url>
    <content><![CDATA[<blockquote>
<p><a href="http://hi.baidu.com/lxiangshanyu/item/014d6f2609e08a3b94f62b8f" rel="external nofollow noopener noreferrer" target="_blank"><code>&lt;display:setProperty name=&quot;basic.msg.empty_list_row&quot; value=&quot;&quot;/&gt;</code> 属性</a></p>
</blockquote>
<h3 id="更改空记录提示语言，默认提示：“没有满足查询条件的记录”"><a href="#更改空记录提示语言，默认提示：“没有满足查询条件的记录”" class="headerlink" title="更改空记录提示语言，默认提示：“没有满足查询条件的记录”"></a>更改空记录提示语言，默认提示：“没有满足查询条件的记录”</h3><p>在<code>&lt;display:table....</code>里面 <code>&lt;display:column...</code>.前面增加<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">display:setProperty</span> <span class="attr">name</span>=<span class="string">"basic.msg.empty_list_row"</span> <span class="attr">value</span>=<span class="string">"没有找到任何记录"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display:setProperty</span> <span class="attr">name</span>=<span class="string">"basic.msg.empty_list"</span> <span class="attr">value</span>=<span class="string">"没有找到任何记录！"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>空记录提示语言修改为：”没有找到任何记录”</p>
<h3 id="空记录的时候仍然显示表头信息（默认空记录不显示表头信息）"><a href="#空记录的时候仍然显示表头信息（默认空记录不显示表头信息）" class="headerlink" title="空记录的时候仍然显示表头信息（默认空记录不显示表头信息）"></a>空记录的时候仍然显示表头信息（默认空记录不显示表头信息）</h3><p>在<code>&lt;display:table....</code>里面 <code>&lt;display:column....</code>前面增加<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">display:setProperty</span> <span class="attr">name</span>=<span class="string">"basic.msg.empty_list_row"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display:setProperty</span> <span class="attr">name</span>=<span class="string">"basic.empty.showtable"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="不显示标题，默认为显示-true"><a href="#不显示标题，默认为显示-true" class="headerlink" title="不显示标题，默认为显示=true"></a>不显示标题，默认为显示=true</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">display:setProperty</span> <span class="attr">name</span>=<span class="string">"basic.show.header"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="按list或page排序，默认按page"><a href="#按list或page排序，默认按page" class="headerlink" title="按list或page排序，默认按page"></a>按list或page排序，默认按page</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">display:setProperty</span> <span class="attr">name</span>=<span class="string">"sort.amount"</span> <span class="attr">value</span>=<span class="string">"list"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>displayTag</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse配置</title>
    <url>/eclipse-config/</url>
    <content><![CDATA[<h3 id="取消项目JavaScript验证"><a href="#取消项目JavaScript验证" class="headerlink" title="取消项目JavaScript验证"></a>取消项目JavaScript验证</h3><blockquote>
<p><a href="http://www.cnblogs.com/wucg/archive/2012/08/06/2625458.html" rel="external nofollow noopener noreferrer" target="_blank">Eclipse 去掉JavaScript Validator</a></p>
</blockquote>
<p>选中一个项目,右键选择<strong>Properties</strong>,弹出的面板中点击<strong>Builders</strong>,然后将<strong>JavaScript Validator</strong>选项去掉，保存</p>
<hr>
<h3 id="修改快捷键"><a href="#修改快捷键" class="headerlink" title="修改快捷键"></a>修改快捷键</h3><blockquote>
<p><a href="http://jythoner.iteye.com/blog/313355" rel="external nofollow noopener noreferrer" target="_blank">修改Eclipse快捷键的方法</a></p>
</blockquote>
<p><strong>Windows-&gt;Preferences-&gt;General-&gt;Keys</strong>,，如果有快捷键冲突可以先取消绑定<strong>Remove Binding</strong>，然后点击<strong>Binding</strong>输入框，按入快捷键会自动录入；如果需要在特定条件下触发可以选择<strong>When</strong>条件。</p>
<hr>
<h3 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h3><blockquote>
<p><a href="http://zhidao.baidu.com/link?url=kRvwFeOSiV-7tTaLm8gr-gUQOR1V9n8hEAOkxpX86Q8IlJi05zpe22M7zgvOaQQMvEAD8blccm2fe-ZnEKPK1q" rel="external nofollow noopener noreferrer" target="_blank">eclipse中函数不能折叠</a><br><a href="http://zhidao.baidu.com/link?url=MlMxLWQ8Xv__5iYR7jmJ3JYdtP8fbNrtuA9E2efcKGGS-EkMQ8Nk_WdYJBzBYncShq24A7wPrJ8SUooO_mSxqK" rel="external nofollow noopener noreferrer" target="_blank">Eclipse中如何折叠代码</a></p>
</blockquote>
<p>在代码页行号左边的空白点击鼠标右键，弹出的菜单选择<strong>Folding</strong>,然后点击第一项<strong>Enable Folding</strong>即可。或者<strong>Windows-&gt;Preferences-&gt;Java-&gt;Editor-&gt;Folding</strong>,勾上<strong>Enable Folding</strong>。接下来可以使用快捷键来控制代码折叠了:<br><code>Ctrl+/(小键盘)</code>：折叠/展开代码<br><code>Ctrl+Shift+/(小键盘)</code>：折叠当前类代码<br><code>Ctrl+Shift+*(小键盘)</code>：展开当前类代码</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 相关知识点收集</title>
    <url>/git-cmd/</url>
    <content><![CDATA[<p>这里收集了一些关于Git的相关命令及一些Git组件的问题解决办法。</p>
<a id="more"></a>
<h3 id="Gitblit"><a href="#Gitblit" class="headerlink" title="Gitblit"></a>Gitblit</h3><blockquote>
<p><a href="http://www.cnblogs.com/keyindex/archive/2012/07/17/2594435.html" rel="external nofollow noopener noreferrer" target="_blank">使用Gitblit 在windows 上部署你的Git Server</a><br><a href="http://ttcool.blog.51cto.com/1186572/1346998" rel="external nofollow noopener noreferrer" target="_blank">Gitblit 配置</a><br><a href="http://www.gitblit.com/" rel="external nofollow noopener noreferrer" target="_blank">官方网站</a></p>
</blockquote>
<p>主要修改<strong>data/gitblit.properties</strong>配置文件<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">git.repositoriesFolder #存放Git库的文件夹</span><br><span class="line"><span class="attr">server.httpPort</span> = <span class="number">10010</span> <span class="comment">#http访问端口</span></span><br><span class="line"><span class="attr">server.httpsPort</span> = <span class="number">0</span> <span class="comment">#设置为0则为默认禁用连接(https)</span></span><br><span class="line"><span class="attr">server.httpBindInterface</span> = ip或域名</span><br><span class="line"><span class="attr">server.httpsBindInterface</span> = localhost <span class="comment">#如果禁用https，这项无需配置</span></span><br></pre></td></tr></table></figure></p>
<p>最好使用Gitblit Go,用SSH连接方式更快，用HTTP的方式连接很慢，不知为何。</p>
<hr>
<h3 id="Git相关命令"><a href="#Git相关命令" class="headerlink" title="Git相关命令"></a>Git相关命令</h3><blockquote>
<p><a href="http://blog.csdn.net/u010520912/article/details/18993001" rel="external nofollow noopener noreferrer" target="_blank">使用Git将本地代码上传到GitHub</a><br><a href="http://www.douban.com/group/topic/33666661/" rel="external nofollow noopener noreferrer" target="_blank">怎么修改Git remote add时使用的远程仓库</a><br><a href="http://www.oschina.net/question/778987_122007" rel="external nofollow noopener noreferrer" target="_blank">git怎么提交已经修改或者新增的文件？</a><br><a href="http://blog.csdn.net/hudashi/article/details/7664457" rel="external nofollow noopener noreferrer" target="_blank">Git fetch和git pull的区别</a><br><a href="http://www.cnblogs.com/sinojelly/archive/2011/08/07/2130172.html" rel="external nofollow noopener noreferrer" target="_blank">Git下的冲突解决</a></p>
</blockquote>
<h4 id="上传流程"><a href="#上传流程" class="headerlink" title="上传流程"></a>上传流程</h4><p><strong>配置git版本管理工具</strong><br>打开命令行或Git Bash，输入下面的命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name “YourName” </span><br><span class="line">git config --global user.email “YouEmailAddress”</span><br></pre></td></tr></table></figure></p>
<p>若省略了“–global”，则只配置当前仓库用户信息</p>
<p><strong>使用SSH密钥进行认证</strong><br>打开Git Bash（window下右击桌面菜单Git Bash选项/mac下直接使用终端），输入下面的命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -C “YouEmailAddress” -t rsa</span><br></pre></td></tr></table></figure></p>
<p>然后直接按回车使用默认路径保存密钥文件到当前用户文件夹中<br>密钥文件为（.ssh），接着设置密码和再次输入密码(可选)<br>到该目录找到.ssh文件夹（<code>id_rsa</code>为私钥文件，<code>id_rsa.pub</code>为公钥文件）<br>使用笔记本打开<code>id_rsa.pub</code>文件并复制文件内容,到GitHub中点击右上角的account settings然后选择左边栏中的SSH Keys添加SHH Key粘贴刚才复制的内容到Key文本框中，title文本框随意填写</p>
<p><strong>创建本地仓库并上传</strong><br>使用CMD或者Git-Bash跳转到本地仓库的目录下输入<code>git init</code>命令初始化一个仓库。<br>然后输入命令<code>git add .</code>意为将本目录下所有的文件添加到仓库。<br>接着输入<code>git commit -m &quot;first commit&quot;</code>将提交代码，<code>-m</code>后面跟的是提交的注释。<br>输入命令<code>git remote add origin &quot;git@github.com:YourName/YourRepositroy.git&quot;</code>为添加源到gitHub。<br>最后上传代码的命令为<code>git push -u origin master</code>.</p>
<p>下载代码则为<code>git pull</code>。</p>
<p>如果需要修改远程仓库链接则是<code>git remote set-url origin URL</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-branches [--add] &lt;name&gt; &lt;branch&gt;...</span><br><span class="line">git remote <span class="built_in">set</span>-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]</span><br><span class="line">git remote <span class="built_in">set</span>-url --add &lt;name&gt; &lt;newurl&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-url --delete &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure></p>
<p>如果要提交新增或者修改的文件则是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git add --update .</span><br><span class="line">git commit -am <span class="string">"add or update"</span></span><br></pre></td></tr></table></figure></p>
<h4 id="Git冲突解决"><a href="#Git冲突解决" class="headerlink" title="Git冲突解决"></a>Git冲突解决</h4><p><strong>rebase的冲突解决</strong><br>rebase的冲突解决过程，就是解决每个应用补丁冲突的过程。<br>解决完一个补丁应用的冲突后，执行下面命令标记冲突已解决（也就是把修改内容加入缓存）：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -u</span><br></pre></td></tr></table></figure></p>
<p>-u 表示把所有已track的文件的新的修改加入缓存，但不加入新的文件。<br>然后执行下面命令继续rebase：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure></p>
<p>有冲突继续解决，重复这这些步骤，直到rebase完成。<br>如果中间遇到某个补丁不需要应用，可以用下面命令忽略：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase --skip</span><br></pre></td></tr></table></figure></p>
<p>如果想回到rebase执行之前的状态，可以执行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure></p>
<p>rebase之后，不需要执行commit，也不存在新的修改需要提交，都是git自动完成。</p>
<h4 id="git-fetch与git-pull的区别"><a href="#git-fetch与git-pull的区别" class="headerlink" title="git fetch与git pull的区别"></a>git fetch与git pull的区别</h4><ol>
<li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动merge<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin master</span><br><span class="line">git <span class="built_in">log</span> -p master..origin/master</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>以上命令的含义：<br>   首先从远程的origin的master主分支下载最新的版本到origin/master分支上<br>   然后比较本地的master分支和origin/master分支的差别<br>   最后进行合并<br>   上述过程其实可以用以下更清晰的方式来进行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin master:tmp</span><br><span class="line">git diff tmp </span><br><span class="line">git merge tmp</span><br></pre></td></tr></table></figure></p>
<p>从远程获取最新的版本到本地的test分支上<br>   之后再进行比较合并</p>
<ol start="2">
<li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上述命令其实相当于git fetch 和 git merge<br>在实际使用中，git fetch更安全一些<br>因为在merge前，我们可以查看更新情况，然后再决定是否合并</p>
<h4 id="git查看分支"><a href="#git查看分支" class="headerlink" title="git查看分支"></a>git查看分支</h4><blockquote>
<p><a href="http://blog.csdn.net/arkblue/article/details/9568249" rel="external nofollow noopener noreferrer" target="_blank">git 查看远程分支、本地分支、创建分支、把分支推到远程repository、删除本地分支</a></p>
</blockquote>
<ul>
<li>查看远程分支: <code>git branch -a</code></li>
<li>查看本地分支: <code>git branch</code></li>
<li>创建分支： <code>git branch &lt;name&gt;</code></li>
<li>切换分支: <code>git checkout &lt;name&gt;</code></li>
<li>删除本地分支: <code>git branch -d &lt;name&gt;</code></li>
<li>删除远程分支: <code>git push origin --delete &lt;name&gt;</code></li>
</ul>
<hr>
<h3 id="Hexo-同时支持Github和Gitcafe"><a href="#Hexo-同时支持Github和Gitcafe" class="headerlink" title="Hexo 同时支持Github和Gitcafe"></a>Hexo 同时支持Github和Gitcafe</h3><blockquote>
<p><a href="http://colobu.com/2014/10/13/hexo-supports-both-github-and-gitcafe/" rel="external nofollow noopener noreferrer" target="_blank">Hexo 同时支持Github和Gitcafe</a></p>
</blockquote>
<p>Hexo支持同时发布到多个git仓库中。需要修改_config.yml。<br>原来的配置:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: github</span><br><span class="line">repo: github: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></p>
<p>改成<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repo: </span><br><span class="line">      github: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git,master</span><br><span class="line">      gitcafe: https://gitcafe.com/&lt;username&gt;/&lt;username&gt;.git,gitcafe-pages</span><br></pre></td></tr></table></figure></p>
<p>首先需要你在gitcafe创建一个和用户名相同的项目，并为此项目创建一个gitcafe-pages。 静态站点发布到这个分支上。 同时需要绑定你的域名在此项目上。<br>这和github有点不同。 github要求创建一个<username>.github.io的项目，站点发布到master分支即可。</username></p>
<hr>
<h3 id="gitignore配置"><a href="#gitignore配置" class="headerlink" title=".gitignore配置"></a><code>.gitignore</code>配置</h3><blockquote>
<p><a href="http://www.cnblogs.com/haiq/archive/2012/12/26/2833746.html" rel="external nofollow noopener noreferrer" target="_blank">Git的<code>.gitignore</code>配置</a></p>
</blockquote>
<p>建立<code>.gitignore</code>文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch .gitignore</span><br></pre></td></tr></table></figure></p>
<p>1、配置语法：</p>
<ul>
<li>以斜杠“/”开头表示目录；</li>
<li>以星号“*”通配多个字符；</li>
<li>以问号“?”通配单个字符</li>
<li>以方括号“[]”包含单个字符的匹配列表；</li>
<li><p>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</p>
<p>此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p>
</li>
</ul>
<p>2、示例：</p>
<p>（1）规则：<code>fd1/*</code><br>　　 说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 <code>/fd1/</code> 目录，还是某个子目录 <code>/child/fd1/</code> 目录，都会被忽略；</p>
<p>（2）规则：<code>/fd1/*</code><br>　　 说明：忽略根目录下的 <code>/fd1/</code> 目录的全部内容；</p>
<p>（3）规则：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">!.gitignore</span><br><span class="line">!/fw/bin/</span><br><span class="line">!/fw/sf/</span><br></pre></td></tr></table></figure></p>
<p>说明：忽略全部内容，但是不忽略 <code>.gitignore</code> 文件、根目录下的 <code>/fw/bin/</code> 和 <code>/fw/sf/</code> 目录；</p>
<hr>
<h3 id="移除submodule"><a href="#移除submodule" class="headerlink" title="移除submodule"></a>移除submodule</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule" rel="external nofollow noopener noreferrer" target="_blank">How do I remove a submodule?</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule deinit submodule_name</span><br><span class="line">git rm --cached submodule_name</span><br><span class="line">rm -rf .git/modules/submodule_name</span><br></pre></td></tr></table></figure>
<h3 id="submodule更新版本"><a href="#submodule更新版本" class="headerlink" title="submodule更新版本"></a>submodule更新版本</h3><p>如果修改了子模块里的内容，需要先到子模块目录里<code>git commit -am</code>然后成功<code>git push</code>到远端服务器上，接着在主项目目录下输入一下命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule update --remote --merge</span><br></pre></td></tr></table></figure></p>
<p>即可将子模块更新到最新版本，接着<code>push</code>主项目分支到远端服务器上即可。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hibernate注解相关知识点</title>
    <url>/hibernate-jpa/</url>
    <content><![CDATA[<h3 id="注解标注的位置"><a href="#注解标注的位置" class="headerlink" title="注解标注的位置"></a>注解标注的位置</h3><blockquote>
<p>来自 <a href="http://2694306.blog.51cto.com/2684306/1323707" rel="external nofollow noopener noreferrer" target="_blank">hibernate注解中JPA@标注的位置</a></p>
</blockquote>
<p>对于JPA注解，最好放在方法前，而不要放在属性名前(Best Practice)，因为属性一般都是私有的，放属性前面会破坏java的封装性，一般不要直接访问私有成员变量。此外最好还要保持field和get，set方法的一致。<br>如果写在属性前面，所有字段都要写在属性前；如果写在getter方法前面，所有字段都写在getter方法前面；必须保持一致</p>
<p>通过看官方文档了解到注解写在属性和方法上面的区别：</p>
<p>使用hibernate注解时，可以选择对类的属性或方法进行注解，根据注解位置不同，hibernate的访问类型分别为field或property。</p>
<p>EJB3规范要求在需要访问的元素上进行注解声明，例如：如果访问类型为 property就要在getter方法上进行注解声明,，如果访问类型为 field就要在字段上进行注解声明。</p>
<p>应该尽量避免混合使用这两种访问类型。（混用这两者造成程序报错，如value too long，但是很难找到问题所在） Hibernate根据@Id 或 @EmbeddedId的位置来判断访问类型。</p>
<p>若访问类型被标以”property”，则Hibernate会扫描getter方法的注解,若访问类型被标以”field”，则扫描字段的注解.否则,扫描标为<code>@Id</code>或<code>@embeddedId</code>的元素。</p>
<p>你可以覆盖某个属性(property)的访问类型，但是受注解的元素将不受影响： 例如一个具有field访问类型的实体,(我们)可以将某个字段标注为 <code>@AccessType(&quot;property&quot;)</code>, 则该字段的访问类型随之将成为property,但是其他字段上依然需要携带注解.</p>
<hr>
<h3 id="Hibernate-JPA注解说明"><a href="#Hibernate-JPA注解说明" class="headerlink" title="Hibernate JPA注解说明"></a>Hibernate JPA注解说明</h3><blockquote>
<p>来自<br><a href="http://www.cnblogs.com/shudonghe/archive/2013/01/18/2866484.html" rel="external nofollow noopener noreferrer" target="_blank">Hibernate JPA注解说明</a><br><a href="http://www.blogjava.net/allrounder/articles/323591.html" rel="external nofollow noopener noreferrer" target="_blank">Hibernate注解三个常见问题</a></p>
</blockquote>
<p><code>@Entity(name=&quot;&quot;)</code>: 必须,name为可选,对应数据库中一的个表<br><code>@Table(name=&quot;&quot;,catalog=&quot;&quot;,schema=&quot;&quot;)</code>: 可选,通常和@Entity配合使用,只能标注在实体的class定义处,表示实体对应的数据库表的信息</p>
<ul>
<li><code>name</code>:可选,表示表的名称.默认地,表名和实体名称一致,只有在不一致的情况下才需要指定表名</li>
<li><code>catalog</code>:可选,表示Catalog名称,默认为<code>Catalog(&quot;&quot;)</code>.</li>
<li><code>schema</code>:可选,表示Schema名称,默认为<code>Schema(&quot;&quot;)</code>.</li>
</ul>
<p><code>@id</code>: 必须,<code>@id</code>定义了映射到数据库表的主键的属性,一个实体只能有一个属性被映射为主键.置于<code>getXxxx()</code>前.<br><code>@GeneratedValue(strategy=GenerationType,generator=&quot;&quot;)</code>: 可选</p>
<ul>
<li><code>strategy</code>:表示主键生成策略,有<code>AUTO</code>,<code>INDENTITY</code>,<code>SEQUENCE</code> 和 <code>TABLE</code> 4种,分别表示让ORM框架自动选择,根据数据库的Identity字段生成,根据数据库表的Sequence字段生成,以有根据一个额外的表生成主键,默认为<code>AUTO</code></li>
<li><code>generator</code>:表示主键生成器的名称,这个属性通常和ORM框架相关,例如,Hibernate可以指定uuid等主键生成方式.</li>
</ul>
<p><code>@Basic(fetch=FetchType,optional=true)</code>: 可选,表示一个简单的属性到数据库表的字段的映射,对于没有任何标注的getXxxx()方法,默认即为<code>@Basic</code></p>
<ul>
<li><code>fetch</code>: 表示该属性的读取策略,有<code>EAGER</code>和<code>LAZY</code>两种,分别表示主支紧急和延迟加载,默认为<code>EAGER</code>.</li>
<li><code>optional</code>:表示该属性是否允许为null,默认为<code>true</code></li>
</ul>
<p><code>@Column</code>: 可选,描述了数据库表中该字段的详细定义</p>
<ul>
<li><code>name</code>: 表示数据库表中该字段的名称,默认情形属性名称一致</li>
<li><code>nullable</code>: 表示该字段是否允许为null,默认为true</li>
<li><code>unique</code>: 表示该字段是否是唯一标识,默认为false</li>
<li><code>length</code>: 表示该字段的大小,仅对String类型的字段有效</li>
<li><code>insertable</code>: 表示在ORM框架执行插入操作时,该字段是否应出现INSETRT语句中,默认为<code>true</code></li>
<li><code>updateable</code>: 表示在ORM框架执行更新操作时,该字段是否应该出现在UPDATE语句中,默认为<code>true</code>.对于一经创建就不可以更改的字段,该属性非常有用,如对于birthday字段.</li>
<li><code>columnDefinition</code>: 表示该字段在数据库中的实际类型.通常ORM框架可以根据属性类型自动判断数据库中字段的类型,但是对于Date类型仍无法确定数据库中字段类型究竟是DATE,TIME还是TIMESTAMP.此外,String的默认映射类型为VARCHAR,如果要将String类型映射到特定数据库的BLOB或TEXT字段类型.</li>
</ul>
<p><code>@Transient</code>: 可选,表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性.如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic<br><code>@ManyToOne(fetch=FetchType,cascade=CascadeType)</code>: 可选,表示一个多对一的映射,该注解标注的属性通常是数据库表的外键</p>
<ul>
<li><code>optional</code>: 是否允许该字段为null,该属性应该根据数据库表的外键约束来确定,默认为<code>true</code></li>
<li><code>fetch</code>: 表示抓取策略,默认为<code>FetchType.EAGER</code></li>
<li><code>cascade</code>: 表示默认的级联操作策略,可以指定为<code>ALL</code>,<code>PERSIST</code>,<code>MERGE</code>,<code>REFRESH</code>和<code>REMOVE</code>中的若干组合,默认为无级联操作</li>
<li><code>targetEntity</code>: 表示该属性关联的实体类型.该属性通常不必指定,ORM框架根据属性类型自动判断targetEntity.<br>示例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//订单Order和用户User是一个ManyToOne的关系</span></span><br><span class="line"><span class="comment">//在Order类中定义</span></span><br><span class="line"><span class="meta">@ManyToOne</span>()</span><br><span class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"USER"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>@JoinColumn</code>: 可选,描述的不是一个简单字段,而是一个关联字段,例如.描述一个@ManyToOne的字段</p>
<ul>
<li><code>name</code>: 该字段的名称.由于<code>@JoinColumn</code>描述的是一个关联字段,如ManyToOne,则默认的名称由其关联的实体决定.</li>
</ul>
<p><code>@OneToMany(fetch=FetchType,cascade=CascadeType)</code>: 可选,描述一个一对多的关联,该属性应该为集体类型,在数据库中并没有实际字段.</p>
<ul>
<li><code>fetch</code>: 表示抓取策略,默认为<code>FetchType.LAZY</code>,因为关联的多个对象通常不必从数据库预先读取到内存</li>
<li><code>cascade</code>: 表示级联操作策略,对于OneToMany类型的关联非常重要,通常该实体更新或删除时,其关联的实体也应当被更新或删除<br>示例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OneTyMany</span>(cascade=ALL)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> orders;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>@OneToOne(fetch=FetchType,cascade=CascadeType)</code>: 可选,描述一个一对一的关联</p>
<ul>
<li><code>fetch</code>: 表示抓取策略,默认为<code>FetchType.LAZY</code></li>
<li><code>cascade</code>: 表示级联操作策略</li>
</ul>
<p><code>@ManyToMany</code>: 可选,描述一个多对多的关联.多对多关联上是两个一对多关联,但是在ManyToMany描述中,中间表是由ORM框架自动处理</p>
<ul>
<li><code>targetEntity</code>: 表示多对多关联的另一个实体类的全名,例如:package.Book.class</li>
<li><code>mappedBy</code>: 表示多对多关联的另一个实体类的对应集合属性名称<br>示例:<br>User实体表示用户,Book实体表示书籍,为了描述用户收藏的书籍,可以在User和Book之间建立ManyToMany关联<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List books;</span><br><span class="line">   <span class="meta">@ManyToMany</span>(targetEntity=<span class="keyword">package</span>.Book<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">   <span class="title">public</span> <span class="title">List</span> <span class="title">getBooks</span>() </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> books;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooks</span><span class="params">(List books)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.books=books;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List users;</span><br><span class="line">   <span class="meta">@ManyToMany</span>(targetEntity=<span class="keyword">package</span>.Users<span class="class">.<span class="keyword">class</span>, <span class="title">mappedBy</span></span>=<span class="string">"books"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> users;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(List users)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.users=users;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>两个实体间相互关联的属性必须标记为<code>@ManyToMany</code>,并相互指定targetEntity属性,<br>需要注意的是,有且只有一个实体的<code>@ManyToMany</code>注解需要指定<code>mappedBy</code>属性,指向targetEntity的集合属性名称<br>利用ORM工具自动生成的表除了User和Book表外,还自动生成了一个User_Book表,用于实现多对多关联</p>
<p><code>@MappedSuperclass</code>: 可选,可以将超类的JPA注解传递给子类,使子类能够继承超类的JPA注解<br>示例:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Employee</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engineer</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>@Embedded</code>: 可选,<code>@Embedded</code>将几个字段组合成一个类,并作为整个Entity的一个属性.<br>例如User包括id,name,city,street,zip属性.<br>我们希望city,street,zip属性映射为Address对象.这样,User对象将具有id,name和address这三个属性.<br>Address对象必须定义为<code>@Embededable</code><br>示例:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;city,street,zip&#125;</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="MySQL中Text-MeduimText-LongText在Hibernate中的设置"><a href="#MySQL中Text-MeduimText-LongText在Hibernate中的设置" class="headerlink" title="MySQL中Text, MeduimText, LongText在Hibernate中的设置"></a>MySQL中Text, MeduimText, LongText在Hibernate中的设置</h3><blockquote>
<p>来自 <a href="http://blog.csdn.net/eagelangel/article/details/8534632" rel="external nofollow noopener noreferrer" target="_blank">MySQL中Text, MeduimText, LongText在Hibernate中的设置</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Lob</span>(type = LobType.CLOB, fetch = FetchType.LAZY)</span><br><span class="line"><span class="comment">//Hibernate会对应到MySQL的MeduimText上去。MedumnText最大16777215字节</span></span><br><span class="line"><span class="comment">//如果length = 16777215则对应到LongText。LongText最大2147483647字节</span></span><br><span class="line"><span class="meta">@Column</span>(length = <span class="number">16777215</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getXXX</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Lob</code> 通常与<code>@Basic</code>同时使用，提高访问速度。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Lob</span> </span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY) </span><br><span class="line"><span class="meta">@Column</span>(name=<span class="string">"DtaContent"</span>, columnDefinition=<span class="string">"CLOB"</span>, nullable=<span class="keyword">true</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDtaContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dtaContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果提示为found text,excepted clob<br>改为<code>columnDefinition=&quot;TEXT&quot;</code>就可以了。</p>
<hr>
<h3 id="hibernate-lazy-fetch"><a href="#hibernate-lazy-fetch" class="headerlink" title="hibernate lazy fetch"></a>hibernate lazy fetch</h3><blockquote>
<p>来自<br><a href="http://wanghaoran04141205.iteye.com/blog/519881" rel="external nofollow noopener noreferrer" target="_blank">hibernate lazy fetch</a><br><a href="http://www.cnblogs.com/tingyuxuan007/archive/2012/08/28/2661022.html" rel="external nofollow noopener noreferrer" target="_blank">Hibernate检索策略之5.1类级别检索策略——Hibernate4究竟怎么玩</a></p>
</blockquote>
<p>lazy是延迟加载，默认是延迟加载。<br>主要是为了系统的性能，当一张表引用到另外一张表时，如果不是立即需要另外一张表的内容，就可以采取延迟加载，直到要用到时才加载另外一张表。<br><code>fetch</code> 和 <code>lazy</code> 主要是用来级联查询的，<br>而 <code>cascade</code> 和 <code>inverse</code> 主要是用来级联插入和修改的<br>fetch参数指定了关联对象抓取的方式是select查询还是join查询，<br>select方式时先查询返回要查询的主体对象（列表），再根据关联外键 id，<br>每一个对象发一个select查询，获取关联的对象，形成n+1次查 询；<br>而join方式，主体对象和关联对象用一句外键关联的sql同时查询出来，不会形成多次查询。<br>如果你的关联对象是延迟加载的，它当然不会去查询关联对象。 另外，在hql查询中配置文件中设置的join方式是不起作用的（而在所有其他查询方式如get、criteria或再关联获取等等都是有效的），会使用 select方式，除非你在hql中指定join fetch某个关联对象。fetch策略用于定义 get/load一个对象时，如何获取非lazy的对象/集合。 这些参数在Query中无效。</p>
<hr>
<h4 id="Hibernate的cascade属性"><a href="#Hibernate的cascade属性" class="headerlink" title="Hibernate的cascade属性"></a>Hibernate的cascade属性</h4><blockquote>
<p>来自<br><a href="http://blog.csdn.net/z69183787/article/details/22327725" rel="external nofollow noopener noreferrer" target="_blank">Hibernate的cascade属性 特别是 cascadeType.all的 作用</a><br><a href="http://blog.csdn.net/null____/article/details/8159497" rel="external nofollow noopener noreferrer" target="_blank">Hibernate基础之十：一对多关联的CRUD__@ManyToOne(cascade=(CascadeType.ALL))</a></p>
</blockquote>
<p>JPA中的<code>CascadeType.ALL</code>并不等于<code>{CascadeType.PESIST,CascadeType.REMOVE,CascadeType.MERGE,CascadeType.REFRESH}</code><br>在Hibernate中调用<code>session.save()</code> or <code>session.update()</code>并不能触发 <code>{CascadeType.PESIST,CascadeType.REMOVE,CascadeType.MERGE,CascadeType.REFRESH}</code> 的级联操作，而能触发<code>CascadeType.ALL</code>的级联。如不希望用<code>CascadeType.ALL</code>，需要使用Hibernate自身对 cascade的注解<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Cascade(value=org.hibernate.annotations.CascadeType.SAVE_UPDATE)</span><br></pre></td></tr></table></figure></p>
<hr>
<p>假定一个组里有n多用户，但是一个用户只对应一个用户组。</p>
<p>1.所以Group对于Users是“一对多”的关联关系<code>@OneToMany</code>,Users对于Group是“多对一”<code>@ManyToOne</code><br>2.CRUD时候，希望是能从具体用户Users查到其对应的Group，反过来也能通过Group查到具体Users，所以是双向关联（所以要用mappedBy去除冗余信息）<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_Group"</span>)<span class="comment">//指定一个表名  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Group</span>   </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Set&lt;Users&gt; users = <span class="keyword">new</span> HashSet&lt;Users&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Id</span>  </span><br><span class="line">    <span class="meta">@GeneratedValue</span><span class="comment">//主键用自增序列  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> id;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy=<span class="string">"group"</span>,cascade=(CascadeType.ALL))<span class="comment">//以“多”一方为主导管理，级联用ALL  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Users&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> users;  </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_Users"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span>   </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> Group group;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Id</span>  </span><br><span class="line">    <span class="meta">@GeneratedValue</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> id;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@ManyToOne</span>(fetch=FetchType.LAZY,cascade=(CascadeType.ALL))<span class="comment">//解决1+N,级联用ALL </span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"groupId"</span>)<span class="comment">//指定外键名称，不指定的默认值是group_Id  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Group <span class="title">getGroup</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> group;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//setter</span></span><br><span class="line">|</span><br></pre></td></tr></table></figure></p>
<p><strong>C增</strong><br>cascade：级联，只影响cud，不影响r（all全都级联，persist存储时级联，remove删除时级联）<br>如果没有设置cascade，默认需要save（Group)和save(users)，两个都要存，设置级联之后，只存一个就行了<br>级联依赖于这句：<code>@ManyToOne(cascade=(CascadeType.ALL))</code>//需要依赖于其他的东西时候<br>设置好正反向之后，多个有级联关系的对象就一起被保存了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Users u1 = <span class="keyword">new</span> Users();  </span><br><span class="line">Users u2 = <span class="keyword">new</span> Users();  </span><br><span class="line">u1.setName(<span class="string">"u1"</span>);  </span><br><span class="line">u2.setName(<span class="string">"u2"</span>);  </span><br><span class="line"><span class="comment">//u1和u2的id自增  </span></span><br><span class="line"> </span><br><span class="line">Group g = <span class="keyword">new</span> Group();  </span><br><span class="line">g.setName(<span class="string">"g1"</span>);  </span><br><span class="line"><span class="comment">//g的id自增  </span></span><br><span class="line"> </span><br><span class="line">g.getUsers().add(u1);<span class="comment">//正向  </span></span><br><span class="line">g.getUsers().add(u2);  </span><br><span class="line"> </span><br><span class="line">u1.setGroup(g);<span class="comment">//反向  </span></span><br><span class="line">u2.setGroup(g);<span class="comment">//不然u1和u2中的group信息为空  </span></span><br><span class="line"> </span><br><span class="line">session.save(g);<span class="comment">//因为设置级联，所以存储g时候也把u1和u2存上了。  </span></span><br><span class="line"><span class="comment">//不设置级联的话，还要存储u1和u2</span></span><br></pre></td></tr></table></figure></p>
<p><strong>R查</strong><br>默认会这样处理（平时管用的思路也是这样）：<br>1.取“多”的时候，把“一”取出来<br>2.取“一”时，不取“多”的，用到时候再去取（看user信息时候一般看组名，看group时候user信息太多不必看）<br>fetch管读取，cascade管增删改<br><code>@OneToMany(mappedBy=&quot;group&quot;,cascade=(CascadeType.ALL),fetch=FetchType.EAGER)</code><br><code>@OneToMany</code>默认的是<code>LAZY</code>，<code>@ManyToOne</code>默认是<code>EAGER</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Users u = (Users)session.get(Users<span class="class">.<span class="keyword">class</span>,11)</span>;<span class="comment">//取id为11号的u  </span></span><br><span class="line"><span class="comment">//hibernate产生的语句里也把group拿出来了：group1_.id as id0_0_,和group1_.name as name0_0_ </span></span><br><span class="line"></span><br><span class="line">Hibernate:   </span><br><span class="line">    select  </span><br><span class="line">        users0_.id as id1_1_,  </span><br><span class="line">        users0_.groupId as groupId1_1_,  </span><br><span class="line">        users0_.name as name1_1_,  </span><br><span class="line">        group1_.id as id0_0_,  </span><br><span class="line">        group1_.name as name0_0_   </span><br><span class="line">    from  </span><br><span class="line">        t_Users users0_   </span><br><span class="line">    left outer join  </span><br><span class="line">        t_Group group1_   </span><br><span class="line">            on users0_.groupId=group1_.id   </span><br><span class="line">    where  </span><br><span class="line">        users0_.id=?  </span><br><span class="line"></span><br><span class="line"><span class="comment">//只取出Group的话，不会去查询里边的user  </span></span><br><span class="line">Group group = (Group)session.get(Group<span class="class">.<span class="keyword">class</span>,11)</span>; </span><br><span class="line"></span><br><span class="line">Hibernate:   </span><br><span class="line">    select  </span><br><span class="line">        group0_.id as id0_0_,  </span><br><span class="line">        group0_.name as name0_0_   </span><br><span class="line">    from  </span><br><span class="line">        t_Group group0_   </span><br><span class="line">    where  </span><br><span class="line">        group0_.id=?</span><br></pre></td></tr></table></figure></p>
<p><strong>U更新</strong><br>注意：fetch影响两者读取顺序（两边都设成EAGER要多取出一次）<br><code>@OneToMany</code>,<code>@ManyToOne</code>都写<code>cascade=(CascadeType.ALL)</code><br>update时候自动关联更新<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因为cascade=(CascadeType.ALL)，所以自动关联更新  </span></span><br><span class="line">Users u = (Users)session.load(Users<span class="class">.<span class="keyword">class</span>,11)</span>;<span class="comment">//取id为11号的u  </span></span><br><span class="line">u.setName(<span class="string">"u250"</span>);  </span><br><span class="line">u.getGroup().setName(<span class="string">"gp01"</span>);</span><br></pre></td></tr></table></figure></p>
<p><strong>D删</strong><br>删多：实测只删掉目的项目，不关联其他<br>先load（就是select）一下，确认有之后，再删<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Users u1 = <span class="keyword">new</span> Users();  </span><br><span class="line">u1.setId(<span class="number">18</span>);  </span><br><span class="line">u1.setGroup(<span class="keyword">null</span>);<span class="comment">//严谨起见，应该先让俩表脱离关联  </span></span><br><span class="line">session.delete(u1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//hql删除</span></span><br><span class="line">s.createQuery(<span class="string">"delete from User u where u.id = 1"</span>).executeUpdate();<span class="comment">//User是类名</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Hibernate</category>
      </categories>
      <tags>
        <tag>Hibernate</tag>
        <tag>Annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>hibernate零散知识点整理</title>
    <url>/hibernate-other/</url>
    <content><![CDATA[<h3 id="c3p0配置"><a href="#c3p0配置" class="headerlink" title="c3p0配置"></a>c3p0配置</h3><blockquote>
<p><a href="http://www.cnblogs.com/best/archive/2013/05/09/3069839.html" rel="external nofollow noopener noreferrer" target="_blank">Hibernate整合C3P0实现连接池</a><br><a href="http://wanghuidong.iteye.com/blog/835861" rel="external nofollow noopener noreferrer" target="_blank">hibernate与c3p0</a><br><a href="http://blog.csdn.net/fdgaq/article/details/7570618" rel="external nofollow noopener noreferrer" target="_blank">hibernate中c3p0的配置</a></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--两次连接中间隔时间，单位毫秒。Default: 1000 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryDelay"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接关闭时默认将所有未提交的操作回滚。Default: false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。</span></span><br><span class="line"><span class="comment">如果定义了这个参数那么属性preferredTestQuery将被忽略。</span></span><br><span class="line"><span class="comment">你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"automaticTestTable"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。</span></span><br><span class="line"><span class="comment">但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。</span></span><br><span class="line"><span class="comment">如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"breakAfterAcquireFailure"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出</span></span><br><span class="line"><span class="comment">SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。</span></span><br><span class="line"><span class="comment">Default: com.mchange.v2.c3p0.impl.DefaultConnectionTester--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionTesterClassName"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可</span></span><br><span class="line"><span class="comment">Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"factoryClassLocation"</span>&gt;</span>null<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Strongly disrecommended. Setting this to true may lead to subtle and bizarre bugs.</span></span><br><span class="line"><span class="comment">（文档原文）作者强烈建议不使用的一个属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceIgnoreUnresolvedTransactions"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--每60秒检查所有连接池中的空闲连接。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span>&gt;</span>60<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>60<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接池中保留的最大连接数。Default: 15 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>15<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。</span></span><br><span class="line"><span class="comment">但由于预缓存的statements属于单个connection而不是整个连接池。</span></span><br><span class="line"><span class="comment">所以设置这个参数需要考虑到多方面的因素。</span></span><br><span class="line"><span class="comment">如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能</span></span><br><span class="line"><span class="comment">通过多线程实现多个操作同时被执行。Default: 3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numHelperThreads"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于连接池连接非c3p0</span></span><br><span class="line"><span class="comment">的数据源时。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"overrideDefaultUser"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--与overrideDefaultUser参数对应使用的一个参数。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"overrideDefaultPassword"</span>&gt;</span>password<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--密码。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意：</span></span><br><span class="line"><span class="comment">测试的表必须在初始数据源的时候就存在。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"preferredTestQuery"</span>&gt;</span>select id from test where id=1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户修改系统配置参数执行前最多等待300秒。Default: 300 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propertyCycle"</span>&gt;</span>300<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的</span></span><br><span class="line"><span class="comment">时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable</span></span><br><span class="line"><span class="comment">等方法来提升连接测试的性能。Default: false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckin"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户名。Default: null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接池中保留的最小连接数。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接池中保留的最大连接数。Default: 15 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"1800"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"1000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--每60秒检查所有连接池中的空闲连接。Default: 0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"60"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="hibernate-乐观锁"><a href="#hibernate-乐观锁" class="headerlink" title="hibernate 乐观锁"></a>hibernate 乐观锁</h3><blockquote>
<p><a href="http://blog.sina.com.cn/s/blog_67c40caf0100jazk.html" rel="external nofollow noopener noreferrer" target="_blank">Hibernate 乐观锁（Optimistic Locking）</a></p>
</blockquote>
<p>hibernate基于数据版本（Version）记录机制实现。为数据增加一个版本标识，一般是通过为数据库表增加一个“version”字段来实现。 读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据 版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Conductor</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Id</span>  </span><br><span class="line">    <span class="meta">@GeneratedValue</span>  </span><br><span class="line">    <span class="keyword">private</span> Integer id;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span>  </span><br><span class="line">    <span class="keyword">private</span> Long version;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter/getter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Session session1=openSession();  </span><br><span class="line">Session session2=openSession();  </span><br><span class="line">Conductor stu1=(Conductor)session1.createQuery(<span class="string">"from Conductor as a where a.name='Bob'"</span>).uniqueResult();  </span><br><span class="line">Conductor stu2=(Conductor)session2.createQuery(<span class="string">"from Conductor as a where a.name='Bob'"</span>).uniqueResult();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//这时候，两个版本号是相同的  </span></span><br><span class="line">System.out.println(<span class="string">"v1="</span>+stu1.getVersion()+<span class="string">"--v2="</span>+stu2.getVersion());  </span><br><span class="line">  </span><br><span class="line">Transaction tx1=session1.beginTransaction();  </span><br><span class="line">stu1.setName(<span class="string">"session1"</span>);  </span><br><span class="line">tx1.commit();  </span><br><span class="line"><span class="comment">//这时候，两个版本号是不同的，其中一个的版本号递增了  </span></span><br><span class="line">System.out.println(<span class="string">"v1="</span>+stu1.getVersion()+<span class="string">"--v2="</span>+stu2.getVersion());  </span><br><span class="line">  </span><br><span class="line">Transaction tx2=session2.beginTransaction();  </span><br><span class="line">stu2.setName(<span class="string">"session2"</span>);  </span><br><span class="line">  </span><br><span class="line">tx2.rollback();  </span><br><span class="line">session2.close();  </span><br><span class="line">session1.close();</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="注解实现联合主键"><a href="#注解实现联合主键" class="headerlink" title="注解实现联合主键"></a>注解实现联合主键</h3><blockquote>
<p><a href="http://blog.csdn.net/robinpipi/article/details/7655388" rel="external nofollow noopener noreferrer" target="_blank">Hibernate注解映射联合主键的三种主要方式</a><br><a href="http://www.blogjava.net/relax/archive/2009/09/18/295587.html" rel="external nofollow noopener noreferrer" target="_blank">hibernate注解方式实现复合主键</a></p>
</blockquote>
<p> 联合主键用Hibernate注解映射方式主要有三种：<br>第一、将联合主键的字段单独放在一个类中，该类需要实现java.io.Serializable接口并重写equals和hascode，再将该类注解为<code>@Embeddable</code>,最后在主类中(该类不包含联合主键类中的字段)保存该联合主键类的一个引用，并生成set和get方法，并将该引用注解为<code>@Id</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JLEE01"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jlee01</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address ;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;  </span><br><span class="line">    <span class="keyword">private</span> String email ;  </span><br><span class="line">    <span class="keyword">private</span> String phone ;  </span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> JleeKey01 jleeKey ;</span><br></pre></td></tr></table></figure></p>
<p>主键类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JleeKey01</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter/getter</span></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> JleeKey01)&#123;  </span><br><span class="line">            JleeKey01 key = (JleeKey01)o ;  </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.id == key.getId() &amp;&amp; <span class="keyword">this</span>.name.equals(key.getName()))&#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span> ;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.hashCode();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第二、将联合主键的字段单独放在一个类中，该类需要实现java.io.Serializable接口并重写equals和hascode，最后在主类中(该类不包含联合主键类中的字段)保存该联合主键类的一个引用，并生成set和get方法，并将该引用注解为<code>@EmbeddedId</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JLEE02"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jlee02</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String address ;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;  </span><br><span class="line">    <span class="keyword">private</span> String email ;  </span><br><span class="line">    <span class="keyword">private</span> String phone ;  </span><br><span class="line">    <span class="meta">@EmbeddedId</span></span><br><span class="line">    <span class="keyword">private</span> JleeKey02 jleeKey ;</span><br><span class="line"><span class="comment">// 主键类：JleeKey02.java为普通java类即可。</span></span><br></pre></td></tr></table></figure></p>
<p>第三、将联合主键的字段单独放在一个类中，该类需要实现java.io.Serializable接口并要重写equals和hashcode.最后在主类中(该类包含联合主键类中的字段)将联合主键字段都注解为<code>@Id</code>,并在该类上方将上这样的注解：<code>@IdClass</code>(联合主键类.class)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JLEE03"</span>)  </span><br><span class="line"><span class="meta">@IdClass</span>(JleeKey03<span class="class">.<span class="keyword">class</span>)  </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Jlee03</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id ;</span><br><span class="line">    <span class="meta">@Id</span>  </span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter/getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="hibernate-current-session-context-class"><a href="#hibernate-current-session-context-class" class="headerlink" title="hibernate.current_session_context_class"></a>hibernate.current_session_context_class</h3><blockquote>
<p><a href="http://justsee.iteye.com/blog/1061576" rel="external nofollow noopener noreferrer" target="_blank">hibernate.current_session_context_class</a></p>
</blockquote>
<p>从3.0.1版本开 始，Hibernate增加了<code>SessionFactory.getCurrentSession()</code>方法。一开始，它假定了采用JTA事务，JTA事务 定义了当前session的范围和上下文(scope and context)。Hibernate开发团队坚信，因为有好几个独立的JTA TransactionManager实现稳定可用，不论是否被部署到一个J2EE容器中，大多数(假若不是所有的）应用程序都应该采用JTA事务管理。 基于这一点，采用JTA的上下文相关session可以满足你一切需要。 </p>
<p>更好的是，从3.1开始，<code>SessionFactory.getCurrentSession()</code>的后台实现是可拔插的。因此，我们引入了新的扩展接口(org.hibernate.context.CurrentSessionContext)和新的配置参数(<code>hibernate.current_session_context_class</code>)，以便对什么是“当前session”的范围和上下文(scope and context)的定义进行拔插。</p>
<p>请参阅org.hibernate.context.CurrentSessionContext接口的Javadoc,那里有关于它的契约的详细讨论。它定义了单一的方法，<code>currentSession()</code>，特定的实现用它来负责跟踪当前的上下文session。Hibernate内置了此接口的三种实现。</p>
<p><code>org.hibernate.context.JTASessionContext</code> - 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。详情请参阅Javadoc。</p>
<p><code>org.hibernate.context.ThreadLocalSessionContext</code> - 当前session通过当前执行的线程来跟踪和界定。详情也请参阅Javadoc。</p>
<p><code>org.hibernate.context.ManagedSessionContext</code> - 当前session通过当前执行的线程来跟踪和界定。但是，你需要负责使用这个类的静态方法将Session实例绑定、或者取消绑定，它并不会打开(open)、flush或者关闭(close)任何Session。</p>
<p>前两种实现都提供了“每数据库事务对应一个session”的编程模型，也称作每次请求一个session。Hibernate session的起始和终结由数据库事务的生存来控制。假若你在纯粹的 Java SE之上采用自行编写代码来管理事务,而不使用JTA，建议你使用Hibernate Transaction API来把底层事务实现从你的代码中隐藏掉。如果你使用JTA，请使用JTA借口来管理Transaction。如果你在支持CMT的EJB容器中执行代码，事务边界是声明式定义的，你不需要在代码中进行任何事务或session管理操作。</p>
<p><code>hibernate.current_session_context_class</code>配置参数定义了应该采用哪个org.hibernate.context.CurrentSessionContext实现。注意，为了向下兼容，如果未配置此参数，但是存在org.hibernate.transaction.TransactionManagerLookup的配置，Hibernate会采用org.hibernate.context.JTASessionContext。一般而言，此参数的值指明了要使用的实现类的全名，但那三种内置的实现可以使用简写，即<strong>jta</strong>、<strong>thread</strong>和<strong>managed</strong>。</p>
<p>1、<code>getCurrentSession()</code>与<code>openSession()</code>的区别？</p>
<p>在 SessionFactory 启动的时候， Hibernate 会根据配置创建相应的 CurrentSessionContext ，在 <code>getCurrentSession()</code> 被调用的时候，实际被执行的方法是<code>CurrentSessionContext.currentSession()</code> 。在 <code>currentSession()</code> 执行时，如果当前 Session 为空，currentSession 会调用SessionFactory的openSession 。所以<code>getCurrentSession()</code> 对于 Java EE 来说是更好的获取 Session 的方法。</p>
<ul>
<li>采用<code>getCurrentSession()</code>创建的session会绑定到当前线程中，而采用<code>openSession()</code>创建的session则不会</li>
<li>采用<code>getCurrentSession()</code>创建的session在commit或rollback时会自动关闭，而采用<code>openSession()</code>创建的session必须手动关闭</li>
</ul>
<p>2、使用<code>getCurrentSession()</code>需要在hibernate.cfg.xml文件中加入如下配置：</p>
<ul>
<li><p>如果使用的是本地事务（jdbc事务）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果使用的是全局事务（jta事务）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果使用的是session的管理机制（不太常用）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>managed<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="LOB-creation-as-createClob-method-threw-error"><a href="#LOB-creation-as-createClob-method-threw-error" class="headerlink" title="LOB creation as createClob() method threw error"></a>LOB creation as createClob() method threw error</h3><blockquote>
<p><a href="http://hi.baidu.com/forloop/item/ed2e29b077f1a6f063388e52" rel="external nofollow noopener noreferrer" target="_blank">Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException</a></p>
</blockquote>
<p>如果运行时出现下面提示的话：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO [pool-2-thread-1] - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">INFO [pool-2-thread-1] - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException</span><br><span class="line">INFO [pool-2-thread-1] - HHH000268: Transaction strategy: org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory</span><br></pre></td></tr></table></figure></p>
<p>可以忽略也可以将驱动降级，例如<code>Oracle</code>,将class15替换成class14，<code>Mysql</code>，将mysql-connector-java-5.1.21.jar 替换成 mysql-connector-java-5.1.6.jar,以此类推</p>
<hr>
<h3 id="createSQLQuery-is-not-valid-without-active-transaction"><a href="#createSQLQuery-is-not-valid-without-active-transaction" class="headerlink" title="createSQLQuery is not valid without active transaction"></a>createSQLQuery is not valid without active transaction</h3><blockquote>
<p><a href="http://blog.csdn.net/yinjian520/article/details/8666695" rel="external nofollow noopener noreferrer" target="_blank">如果你报createSQLQuery is not valid without active transaction,请看这里 </a></p>
</blockquote>
<p>使用 Hibernate 的大多数应用程序需要某种形式的“上下文相关的”会话，特定的会话在整个特定的上下文范围内始终有效。然而，对不同类型的应用程序而言，要为什么是组成这种“上下文”下一个定义通常是困难的；不同的上下文对“当前”这个概念定义了不同的范围。<br>在 3.0 版本之前，使用 Hibernate 的程序要么采用自行编写的基于 <code>ThreadLocal</code> 的上下文会话，要么采用HibernateUtil 这样的辅助类，要么采用第三方框架（比如 Spring 或 Pico），它们提供了基于代理（proxy）或者基于拦截器（interception）的上下文相关的会话。从 3.0.1 版本开始，Hibernate 增加了SessionFactory.getCurrentSession() 方法。一开始，它假定了采用 JTA 事务，JTA 事务定义了当前 session 的范围和上下文（scope 和 context）。因为有好几个独立的 JTA TransactionManager 实现稳定可用，不论是否被部署到一个 J2EE 容器中，大多数（假若不是所有的）应用程序都应该采用 JTA 事务管理。基于这一点，采用 JTA 的上下文相关的会话可以满足你一切需要。</p>
<p>hibernate 增加配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>将<code>getCurrentSession()</code>返回的session绑定到当前运行线程中。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Hibernate</category>
      </categories>
      <tags>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate中的实体状态</title>
    <url>/hibernate-status/</url>
    <content><![CDATA[<h3 id="Hibernate中的实体状态"><a href="#Hibernate中的实体状态" class="headerlink" title="Hibernate中的实体状态"></a>Hibernate中的实体状态</h3><blockquote>
<p><a href="http://hi.baidu.com/kingtoon_go/item/fc0703d1e440134dfa576804" rel="external nofollow noopener noreferrer" target="_blank">写得很不错的-Hibernate中的实体状态(一)[转]</a></p>
</blockquote>
<p>Hibernate中实体有三个状态：瞬时、持久化和脱管。下面先来看看Hibernate对这三个状态是怎么定义的。<br>（1）瞬时：一个实体通过new操作符创建后，没有和Hibernate的Session建立关系，也没有手动赋值过该实体的持久化标识（持久化标识可以认为映射表的主键）。此时该实体中的任何属性的更新都不会反映到数据库表中。<br>（2）持久化：当一个实体和Hibernate的Session创建了关系，并获取了持久化标识，而且在Hibernate的Session生命周期内存在。此时针对该实体任何属性的更改都会直接影响到数据库表中一条记录对应字段的更新，也即与对应数据库表保持同步。<br>（3）脱管：当一个实体和Hibernate的Session创建了关系，并获取了持久化标识，而此时Hibernate的Session的生命周期结束，实体的持久化标识没有被改动过。针对该实体的任何属性的修改都不会及时反映到数据库表中。</p>
<p>这三种状态有两个很重要的点需要掌握：Hibernate的Session和持久化标识。通过这两个条件就可以判断出究竟是3种状态中的哪一个。3种不同状态通过Hibernate的Session和持久化标识可以互相之间进行转换</p>
<p>举个简单的例子，假如Room实体的属性id表示持久化标识，那么：<br>（1）创建的Room实例为瞬时状态，将表中对应的主键手动设置到id属性，此时就是脱管状态。<br>（2）创建的Room实例为瞬时状态，不设置id或设置的id在表中找不到对应，此时调用Hibernate Session的持久化方法，将成为持久化状态。<br>（3）Room实体在持久化状态下关闭Hibernate Session，此时就是脱管状态。<br>（4）Room实体在脱管状态下调用Hibernate Session的持久化方法，此时就是持久化状态。<br>（5）Room实体在持久化状态下关闭Hibernate Session，随后清除id属性的值，此时就是瞬时状态。</p>
<h5 id="实体状态的代码实现：瞬时—持久化"><a href="#实体状态的代码实现：瞬时—持久化" class="headerlink" title="实体状态的代码实现：瞬时—持久化"></a>实体状态的代码实现：瞬时—持久化</h5><p>从瞬时状态到持久化状态，Hibernate提供了如下的实现，见例6.1（以下代码省略了配置映射文件的部分）。</p>
<p>瞬时—持久化的实现<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//创建瞬时状态的UserInf实例</span></span><br><span class="line">     UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">     <span class="comment">//设置UserInfo属性，持久化标识id属性在映射中为自增长，不用设置</span></span><br><span class="line">     userInfo.setName(<span class="string">"RW"</span>);</span><br><span class="line">     userInfo.setSex(<span class="string">"M"</span>);</span><br><span class="line">     <span class="comment">//启动Session</span></span><br><span class="line">     Session session = HibernateSessionFactory.currentSession();</span><br><span class="line">     <span class="comment">//启动事务</span></span><br><span class="line">     Transaction tx = session.beginTransaction();</span><br><span class="line">     <span class="comment">//瞬时—持久化的实现，保存UserInfo代表的一条记录到数据库</span></span><br><span class="line">     session.save(userInfo);</span><br><span class="line">     <span class="comment">//对持久化的UserInfo进行属性的更新，此时将同步数据库</span></span><br><span class="line">     userInfo.setName(<span class="string">"RW2"</span>);</span><br><span class="line">     userInfo.setSex(<span class="string">"F"</span>);</span><br><span class="line">     <span class="comment">//不用调用update方法，持久化状态的UserInfo会自动同步数据库</span></span><br><span class="line">     <span class="comment">//提交事务</span></span><br><span class="line">     tx.commit();</span><br><span class="line">     <span class="comment">//关闭Hibernate Session</span></span><br><span class="line">     HibernateSessionFactory.closeSession();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>针对该段代码将执行如下SQL语句：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* session.save(userInfo);的动作 */</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> userinfo(<span class="keyword">NAME</span>, SEX, roomid, <span class="keyword">id</span>)<span class="keyword">values</span>(?, ?, ?, ?)</span><br><span class="line"><span class="comment">/* userInfo.setName("RW2"); userInfo.setSex("F"); 的动作*/</span></span><br><span class="line"><span class="keyword">update</span> userinfo <span class="keyword">set</span> <span class="keyword">NAME</span>=?,SEX=?,roomid=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br></pre></td></tr></table></figure></p>
<p>当瞬时状态转变为持久化状态时，需要自行调用持久化方法（如：session.save()）来执行SQL。而在持久化状态时，Hibernate控制器会自动侦测到改动，执行SQL同步数据库。</p>
<h5 id="实体状态的代码实现：脱管-持久化、持久化-脱管"><a href="#实体状态的代码实现：脱管-持久化、持久化-脱管" class="headerlink" title="实体状态的代码实现：脱管-持久化、持久化-脱管"></a>实体状态的代码实现：脱管-持久化、持久化-脱管</h5><p>从脱管状态和持久化状态双重转变，Hibernate提供了如下的实现<br>脱管状态和持久化状态双重转变<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//创建UserInfo实例</span></span><br><span class="line">      UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">      <span class="comment">//启动Session</span></span><br><span class="line">      Session session = HibernateSessionFactory.currentSession();</span><br><span class="line">      <span class="comment">//启动事务</span></span><br><span class="line">      Transaction tx = session.beginTransaction();</span><br><span class="line">      <span class="comment">//得到持久化UserInfo，此时UserInfo为持久化状态</span></span><br><span class="line">      <span class="comment">//与数据库中主键为11117的记录同步</span></span><br><span class="line">      session.load(userInfo,<span class="keyword">new</span> Long(<span class="number">11117</span>));</span><br><span class="line">      <span class="comment">//提交事务</span></span><br><span class="line">      tx.commit();</span><br><span class="line">      <span class="comment">//关闭Hibernate Session</span></span><br><span class="line">      HibernateSessionFactory.closeSession();</span><br><span class="line">      <span class="comment">//关闭Hibernate Session后UserInfo的状态为脱管状态</span></span><br><span class="line">      <span class="comment">//此时依然能够得到数据库在持久化状态时的数据</span></span><br><span class="line">      <span class="comment">//对userInfo实体的属性的操作将不影响数据库中主键为11117的记录</span></span><br><span class="line">      userInfo.setName(<span class="string">"RW3"</span>);</span><br><span class="line">      userInfo.setSex(<span class="string">"M"</span>);</span><br><span class="line">      <span class="comment">//启动Session</span></span><br><span class="line">      session = HibernateSessionFactory.currentSession();</span><br><span class="line">      <span class="comment">//启动事务</span></span><br><span class="line">      tx = session.beginTransaction();</span><br><span class="line">      <span class="comment">//从脱管状态到持久化状态的转变，此时将更新数据库中对应主键为11117的记录</span></span><br><span class="line">      session.update(userInfo);</span><br><span class="line">      <span class="comment">//提交事务</span></span><br><span class="line">      tx.commit();</span><br><span class="line">      <span class="comment">//关闭Hibernate Session</span></span><br><span class="line">      HibernateSessionFactory.closeSession();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>针对该段代码将执行如下SQL语句：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* session.load(userInfo,new Long(11117))的动作 */</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">        userinfo0_.id <span class="keyword">as</span> id0_0_,</span><br><span class="line">        userinfo0_.NAME <span class="keyword">as</span> NAME0_0_,</span><br><span class="line">        userinfo0_.SEX <span class="keyword">as</span> SEX0_0_,</span><br><span class="line">        userinfo0_.roomid <span class="keyword">as</span> roomid0_0_</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        userinfo userinfo0_</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        userinfo0_.id=?</span><br><span class="line"><span class="comment">/* session.update(userInfo)的动作 */</span></span><br><span class="line"><span class="keyword">update</span> userinfo <span class="keyword">set</span> <span class="keyword">NAME</span>=?, SEX=?, roomid=? <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>userInfo.setName(&quot;RW3&quot;)</code>这一部分的代码没有直接同步数据库的表，因为此时Hibernate Session已经关闭了，此时是脱管状态。而直到再次打开Hibernate Session并调用<code>session.update(userInfo)</code>，此时由于持久化标识存在于UserInfo实例，因此将从脱管状态转变为持久化状态，同步数据库。</p>
<h5 id="持久化方法对状态的影响"><a href="#持久化方法对状态的影响" class="headerlink" title="持久化方法对状态的影响"></a>持久化方法对状态的影响</h5><p>在Hibernate中定义了多个持久化方法，这些方法的调用对实体状态是有影响的。注意，并不是每一个持久化方法都会将实体状态变为持久化状态。在之前的代码中，已经使用到的持久化方法为<code>session.save()</code>、<code>session.load()</code>、<code>session.update()</code>。下面是另外一些持久化方法的调用方式。</p>
<p>（1）<strong>session.delete()方法</strong><br>该方法将已经存在的表记录删除，其所影响的状态是从持久化、脱管状态转变为瞬时状态<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//创建UserInfo实例</span></span><br><span class="line">     UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">     <span class="comment">//启动Session</span></span><br><span class="line">     Session session = HibernateSessionFactory.currentSession();</span><br><span class="line">     <span class="comment">//启动事务</span></span><br><span class="line">     Transaction tx = session.beginTransaction();</span><br><span class="line">     <span class="comment">//得到持久化UserInfo，此时UserInfo为持久化状态</span></span><br><span class="line">     <span class="comment">//与数据库中主键为11117的记录同步</span></span><br><span class="line">     session.load(userInfo,<span class="keyword">new</span> Long(<span class="number">11117</span>));</span><br><span class="line">     <span class="comment">//删除持久化状态的UserInfo实体，此时UserInfo实体为瞬时状态</span></span><br><span class="line">     session.delete(userInfo);</span><br><span class="line">     <span class="comment">//提交事务</span></span><br><span class="line">     tx.commit();</span><br><span class="line">     <span class="comment">//关闭Hibernate Session</span></span><br><span class="line">     HibernateSessionFactory.closeSession();</span><br><span class="line">     <span class="comment">//由于执行了session.delete因此UserInfo实体为瞬时状态，在数据库中找不到主键为11117的数据</span></span><br><span class="line">     <span class="comment">//此时依然能够显示该实体的属性</span></span><br><span class="line">     System.out.println(<span class="string">"---Id:"</span> + userInfo.getId());</span><br><span class="line">     System.out.println(<span class="string">"---Name:"</span> + userInfo.getName());</span><br><span class="line">     System.out.println(<span class="string">"---Sex:"</span> + userInfo.getSex());</span><br><span class="line">     <span class="comment">//更新UserInfo实体的持久化标识，使其成为脱管状态</span></span><br><span class="line">     userInfo.setId(<span class="number">11116</span>);</span><br><span class="line">     <span class="comment">//启动Session</span></span><br><span class="line">     session = HibernateSessionFactory.currentSession();</span><br><span class="line">     <span class="comment">//启动事务</span></span><br><span class="line">     tx = session.beginTransaction();</span><br><span class="line">     <span class="comment">//调用delete方法将脱管状态的UserInfo实体转变为瞬时状态</span></span><br><span class="line">     session.delete(userInfo);</span><br><span class="line">     <span class="comment">//提交事务</span></span><br><span class="line">     tx.commit();</span><br><span class="line">     <span class="comment">//关闭Hibernate Session</span></span><br><span class="line">     HibernateSessionFactory.closeSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>针对该段代码将执行如下SQL语句：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* session.load(userInfo,new Long(11117))的动作 */</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">        userinfo0_.id <span class="keyword">as</span> id0_0_,</span><br><span class="line">        userinfo0_.NAME <span class="keyword">as</span> NAME0_0_,</span><br><span class="line">        userinfo0_.SEX <span class="keyword">as</span> SEX0_0_,</span><br><span class="line">        userinfo0_.roomid <span class="keyword">as</span> roomid0_0_</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        userinfo userinfo0_</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        userinfo0_.id=?</span><br><span class="line"><span class="comment">/* session.delete(userInfo)的动作 */</span></span><br><span class="line"><span class="keyword">delete</span></span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            userinfo</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            <span class="keyword">id</span>=?</span><br><span class="line"><span class="comment">/* session.delete(userInfo)的动作 */</span></span><br><span class="line"><span class="keyword">delete</span></span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            userinfo</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            <span class="keyword">id</span>=?</span><br></pre></td></tr></table></figure></p>
<p>可以看到，两句delete语句分别对应了持久化状态的UserInfo和脱管状态的UserInfo的删除动作。之后两种状态的UserInfo都会成为瞬时状态。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Hibernate</category>
      </categories>
      <tags>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>html标签与css样式表</title>
    <url>/html-css/</url>
    <content><![CDATA[<h3 id="html实线边框的表格样式定义"><a href="#html实线边框的表格样式定义" class="headerlink" title="html实线边框的表格样式定义"></a>html实线边框的表格样式定义</h3><blockquote>
<p><a href="http://blog.csdn.net/henrytsu/article/details/3446384" rel="external nofollow noopener noreferrer" target="_blank">html实线边框的表格样式定义</a></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>:collapse;</span><br><span class="line">  <span class="attribute">border-left</span>:solid <span class="number">1</span> <span class="number">#000000</span>; <span class="attribute">border-top</span>:solid <span class="number">1</span> <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">border-right</span>:solid <span class="number">1</span> <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:solid <span class="number">1</span> <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: Silver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">font</span>:normal;</span><br><span class="line">  <span class="attribute">border-right</span>:solid <span class="number">1</span> <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:solid <span class="number">1</span> <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="表格奇偶行不同颜色"><a href="#表格奇偶行不同颜色" class="headerlink" title="表格奇偶行不同颜色"></a>表格奇偶行不同颜色</h3><blockquote>
<p>来自 <a href="http://www.cnblogs.com/sanmen/archive/2012/08/09/2631011.html" rel="external nofollow noopener noreferrer" target="_blank">纯CSS table 表格奇偶行不同颜色实现</a></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.table-striped</span> <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(odd)</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: Red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table-striped"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="CSS发光边框文本框效果"><a href="#CSS发光边框文本框效果" class="headerlink" title="CSS发光边框文本框效果"></a>CSS发光边框文本框效果</h3><blockquote>
<p>来自 <a href="http://blog.netsh.org/posts/css-input-border-light-box-effect_533.netsh.html" rel="external nofollow noopener noreferrer" target="_blank">CSS发光边框文本框效果</a></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=password]</span><span class="selector-pseudo">:focus</span>,<span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>:border linear .<span class="number">2s</span>,box-shadow linear .<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">-moz-transition</span>:border linear .<span class="number">2s</span>,-moz-box-shadow linear .<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>:border linear .<span class="number">2s</span>,-webkit-box-shadow linear .<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">outline</span>:none;<span class="attribute">border-color</span>:<span class="built_in">rgba</span>(<span class="number">241</span>,<span class="number">39</span>,<span class="number">242</span>,.<span class="number">75</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">241</span>,<span class="number">39</span>,<span class="number">232</span>,.<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">241</span>,<span class="number">39</span>,<span class="number">232</span>,.<span class="number">5</span>);</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">241</span>,<span class="number">39</span>,<span class="number">232</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中的RGB色彩可以根据个人口味进行改变</p>
<hr>
<h3 id="html-table-td边框效果"><a href="#html-table-td边框效果" class="headerlink" title="html table td边框效果"></a>html table td边框效果</h3><blockquote>
<p><a href="http://hi.baidu.com/9prior/item/60b47eb61cd3b8941846970e" rel="external nofollow noopener noreferrer" target="_blank">html table td边框效果</a></p>
</blockquote>
<p>同时用样式表为 table、td 指定了边框后，可能会发生重叠，这取决于 <code>border-collapse</code><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">"border:1px solid red;border-collapse:collapse;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border:1px solid blue;"</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border:1px solid blue;"</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border:1px solid blue;"</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border:1px solid blue;"</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在发生重叠时，Firefox 是用 td 覆盖 table 的，而 IE 是用 table 覆盖 td 的<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">bordercolor</span>=<span class="string">"#FF9966"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"102"</span> <span class="attr">style</span>=<span class="string">"border-right-style:none"</span>&gt;</span>隐藏右边框<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"119"</span> <span class="attr">style</span>=<span class="string">"border-left-style:none"</span>&gt;</span>隐藏左边框<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border-top-style:none"</span>&gt;</span>隐藏上边框<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border-bottom-style:none"</span>&gt;</span>隐藏下边框<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border-right:#cccccc solid 1px;"</span>&gt;</span>显示右边框<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border-left:#cccccc solid 1px;"</span>&gt;</span>显示左边框<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border-top:#cccccc solid 1px;"</span>&gt;</span>显示上边框<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border-bottom:#cccccc solid 1px;"</span>&gt;</span>显示下边框<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border-right : thin dashed blue;"</span>&gt;</span>右边框显示细虚线<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border-bottom: thick dashed yellow;"</span>&gt;</span>左边框显示粗虚线<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border-top: double green;"</span>&gt;</span>上边框显示两条线<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">"border-left: dotted red;"</span>&gt;</span>下边框显示点<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="实现Parallax效果"><a href="#实现Parallax效果" class="headerlink" title="实现Parallax效果"></a>实现Parallax效果</h3><blockquote>
<p><a href="https://davidwalsh.name/parallax" rel="external nofollow noopener noreferrer" target="_blank">Creating Scrolling Parallax Effects with CSS</a></p>
</blockquote>
<p>之前浏览网页，发现一个挺有意思的效果，就是滚动了文章之后，他间隔的背景图片会不断的变化。当时觉得很新奇，就想着该怎么实现，然后用蹩脚的英文在谷歌上输入了几个单词，结果想不到还真的查到了。原来这种效果叫Parallax。实现起来也十分简单：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.parallax &#123;</span><br><span class="line">  height: 70vh;</span><br><span class="line">  background-position: center center;</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-attachment: fixed;</span><br><span class="line">  -webkit-background-size: cover;</span><br><span class="line">  -moz-background-size: cover;</span><br><span class="line">  -o-background-size: cover;</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最核心的就是<code>background-attachment: fixed</code>这句。然后再弄一张背景图片：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.parallax-1 &#123;</span><br><span class="line">  background-image: url(&quot;...&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后直接使用样式即可:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;section class=&quot;parallax parallax-1&quot;&gt;</span><br><span class="line">  //...</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>web</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>html表单</title>
    <url>/html-form/</url>
    <content><![CDATA[<h3 id="禁止文本框的记忆性输入"><a href="#禁止文本框的记忆性输入" class="headerlink" title="禁止文本框的记忆性输入"></a>禁止文本框的记忆性输入</h3><blockquote>
<p><a href="http://www.cnblogs.com/ajax2008/archive/2011/07/31/2122701.html" rel="external nofollow noopener noreferrer" target="_blank">禁止文本框的记忆性输入 ,input ,textbox</a></p>
</blockquote>
<p>设置表单属性<code>AUTOCOMPLETE</code>为<strong>OFF</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">AUTOCOMPLETE</span>=<span class="string">"OFF"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>设置单个输入框<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">AUTOCOMPLETE</span>=<span class="string">"OFF"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果要禁止文本框使用输入法，可以把在它的样式中添加 ime-mode : disabled 即可，但是这样并不能禁止输入汉字，因为用户还是可以通过复制粘贴输入汉字的<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"ime-mode: disabled;"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="提交表单后清空输入框内容"><a href="#提交表单后清空输入框内容" class="headerlink" title="提交表单后清空输入框内容"></a>提交表单后清空输入框内容</h3><blockquote>
<p><a href="http://bbs.51js.com/thread-5147-1-1.html" rel="external nofollow noopener noreferrer" target="_blank">如何使表单提交后,清空表单中文本框的内容</a></p>
</blockquote>
<p>提交按钮的<code>onClick</code>方法指定表单提交之后执行<code>reset</code>方法<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"text1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> <span class="attr">onClick</span>=<span class="string">"form1.submit();form1.reset();"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="让select下拉列表只读"><a href="#让select下拉列表只读" class="headerlink" title="让select下拉列表只读"></a>让select下拉列表只读</h3><blockquote>
<p><a href="http://bbs.csdn.net/topics/20196208" rel="external nofollow noopener noreferrer" target="_blank">如何让select下拉选择只读</a><br><a href="http://bbs.csdn.net/topics/20418138" rel="external nofollow noopener noreferrer" target="_blank">如何把select选项给只读，让他不可选，但数据还是保存在下拉表中</a></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onchange</span>=<span class="string">"selectedIndex=this.defaultChecked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onfocus</span>=<span class="string">"this.blur()"</span> <span class="attr">onmouseover</span>=<span class="string">"this.setCapture()"</span> <span class="attr">onmouseout</span>=<span class="string">"this.releaseCapture()"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="强制页面图片刷新"><a href="#强制页面图片刷新" class="headerlink" title="强制页面图片刷新"></a>强制页面图片刷新</h3><blockquote>
<p><a href="http://bbs.csdn.net/topics/70499996" rel="external nofollow noopener noreferrer" target="_blank">不刷新页面，如何强制图片刷新？</a></p>
</blockquote>
<p>只要保证每次src的字符串不同就会重取<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">img1.src=图片地址+<span class="string">"?"</span>+date.toLocaleString();</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">img1.src=img1.src + <span class="string">"?"</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="用get方法丢失参数"><a href="#用get方法丢失参数" class="headerlink" title="用get方法丢失参数"></a>用get方法丢失参数</h3><blockquote>
<p><a href="http://bbs.csdn.net/topics/300046767" rel="external nofollow noopener noreferrer" target="_blank">用get方法丢失参数啦 请指教</a></p>
</blockquote>
<p>如果提交的表单<code>action</code>中跟的参数与表单中的某个参数重名，则会造成参数丢失的情况，这时设置表单的<code>method</code>方法为<code>post</code>即可。或者写入隐藏域中，即使用<code>&lt;input type=&quot;hidden&quot;&gt;</code></p>
<hr>
<h3 id="表单中的button类型问题"><a href="#表单中的button类型问题" class="headerlink" title="表单中的button类型问题"></a>表单中的button类型问题</h3><blockquote>
<p><a href="http://bbs.csdn.net/topics/390982400" rel="external nofollow noopener noreferrer" target="_blank">button会自动提交表单吗</a></p>
</blockquote>
<p>如果在表单中使用了<code>button</code>标签，一定要为其指定<code>type</code>类型，如果不指定，IE默认其为<code>button</code>类型，而FF,Chrome等浏览器则认定其默认类型为<code>Submit</code>,因此点击<code>button</code>会提交表单。为了预防表单提交，可以设置表单的<code>onSubmit</code>方法返回<code>false</code>，然后再指定<code>button</code>的点击事件为提交方法：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">onSubmit</span>=<span class="string">"return false"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"submitForm()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>web</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>form</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS零散知识收集</title>
    <url>/ios-background/</url>
    <content><![CDATA[<p>收集一些平时在iOS开发中碰到的问题解决方法</p>
<a id="more"></a>
<h3 id="WKWebView中的Javascript交互"><a href="#WKWebView中的Javascript交互" class="headerlink" title="WKWebView中的Javascript交互"></a>WKWebView中的Javascript交互</h3><p>在<strong>WKWebView</strong>中，Javascript与OC的交互变的十分简单。只需要通过<code>WKScriptMessageHandler</code>代理中的<code>userContentController:didReceiveScriptMessage:</code>即可在网页中让Javascript发送消息给OC。</p>
<p>首先试着写一段js脚本<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">c.type=<span class="string">'checkbox'</span>; <span class="number">2.n</span>ame=<span class="string">'accept'</span>; c2.id=<span class="string">'accept'</span>;  c.checked=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> label = <span class="built_in">document</span>.createElement(<span class="string">'label'</span>);</span><br><span class="line">label.htmlFor = <span class="string">'accept'</span>;</span><br><span class="line">label.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'accept'</span>));</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].appendChild(c);</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].appendChild(label);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.innerHTML = \<span class="string">"</span></span><br><span class="line"><span class="string">document.getElementById('accept').onclick = function toggle() &#123;</span></span><br><span class="line"><span class="string">    var obj = document.getElementById('accept');</span></span><br><span class="line"><span class="string">    window.webkit.messageHandlers.accept.postMessage(&#123;'accept':obj.checked&#125;);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">\";</span></span><br><span class="line"><span class="string">document.getElementsByTagName('body')[0].appendChild(script);</span></span><br></pre></td></tr></table></figure></p>
<p>这段js很简单，就是添加了一个<code>checkbox</code>元素，然后在点击事件中通过<code>postMessage</code>方法就可以在OC获取到js中传过来的对象。</p>
<p>接下来则是配置<code>WKUSErContentController</code>:<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</span><br><span class="line">configuration.userContentController = [<span class="built_in">WKUserContentController</span> new];</span><br><span class="line"><span class="comment">//在文档末尾追加javascript</span></span><br><span class="line"><span class="built_in">WKUserScript</span> *script = [[<span class="built_in">WKUserScript</span> alloc] initWithSource:scriptString injectionTime:<span class="built_in">WKUserScriptInjectionTimeAtDocumentEnd</span> forMainFrameOnly:<span class="literal">YES</span>];</span><br><span class="line">[configuration.userContentController addUserScript:script];</span><br><span class="line"><span class="comment">//添加需要用作连接的对象</span></span><br><span class="line">[configuration.userContentController addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"accept"</span>];</span><br><span class="line">        </span><br><span class="line"><span class="built_in">WKPreferences</span> *preferences = [[<span class="built_in">WKPreferences</span> alloc] init];</span><br><span class="line">preferences.javaScriptEnabled = <span class="literal">YES</span>;</span><br><span class="line">configuration.preferences = preferences;</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.webView =  [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.frame configuration:configuration];</span><br></pre></td></tr></table></figure></p>
<p>在这里通过<code>addScriptMEssageHandler</code>方法定义了一个js通知oc的对象accept，就是js中的<code>messageHandlers</code>后边声明的对象。</p>
<p>最后ViewController实现<code>WKScriptMessageHandler</code>代理，通过下列方法即可获得传输过来的数据：<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">pragma</span> mark - WKScriptMessageHandler</span></span><br><span class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"message name: %@, body: %@"</span>, message.name, message.body);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里通过<code>message.name</code>可以获得传输对象的名称，就是上边定义的<code>accept</code>，而<code>message.body</code>则是获取到从js中传过来的数据</p>
<hr>
<h3 id="iOS应用内切换语言"><a href="#iOS应用内切换语言" class="headerlink" title="iOS应用内切换语言"></a>iOS应用内切换语言</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/1669645/how-to-force-nslocalizedstring-to-use-a-specific-language" rel="external nofollow noopener noreferrer" target="_blank">How to force NSLocalizedString to use a specific language</a><br><a href="http://www.cocoachina.com/bbs/read.php?tid=149950" rel="external nofollow noopener noreferrer" target="_blank">ios开发应用内实现多语言自由切换</a></p>
</blockquote>
<p>使用系统内置的<code>NSLocalizedString(key,comment)</code>函数即可获得对应的本地化语句。如果需要在应用内切换其他语言，可以自行添加一个定义<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CustomLocalizedString(key, comment) \</span></span><br><span class="line">[[<span class="built_in">NSBundle</span> bundleWithPath: [[<span class="built_in">NSBundle</span> mainBundle] pathForResource: [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,[[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] objectForKey:<span class="string">@"AppleLanguages"</span>] firstObject]] ofType:<span class="string">@"lproj"</span>]] localizedStringForKey:(key) value:<span class="string">@""</span> table:<span class="literal">nil</span>]</span><br></pre></td></tr></table></figure></p>
<p>然后切换语言需要修改<code>AppleLanguages</code>中的数组数据位置<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setObject:[<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"en-US"</span>, <span class="string">@"zh-Hant"</span>, <span class="string">@"zh-Hans"</span>, <span class="literal">nil</span>] forKey:<span class="string">@"AppleLanguages"</span>];</span><br><span class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] synchronize];</span><br></pre></td></tr></table></figure></p>
<p>将需要切换的语言放置到第一个元素中即可</p>
<hr>
<h3 id="页面组件自适应导航栏"><a href="#页面组件自适应导航栏" class="headerlink" title="页面组件自适应导航栏"></a>页面组件自适应导航栏</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/17074365/status-bar-and-navigation-bar-appear-over-my-views-bounds-in-ios-7" rel="external nofollow noopener noreferrer" target="_blank">Status bar and navigation bar appear over my view’s bounds in iOS 7</a></p>
</blockquote>
<p>当使用<strong>Interface Builder</strong>来构建页面的时候，如果是<code>UIScrollVIew</code>或者其子类<code>UITableView</code>的时候，当页面显示了<code>NavigationBar</code>的时候，<code>UIScrollVIew</code>部件会自动将坐标下移到<code>NavigationBar</code>下方，<br>这是因为<code>automaticallyAdjustsScrollViewInsets</code>属性为<code>YES</code>，如果不希望<code>scroll view</code>自动适应，将其设置为<code>NO</code>即可。</p>
<p>如果是普通的页面，一般都会直接拖到最顶层，如果这个时候页面显示了<code>NavigationBar</code>时，会将页面布局的一部分遮挡掉，以往的做法是将布局下移64，但是<strong>iOS7</strong>之后可以利用<code>edgesForExtendedLayout</code>来设置：<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(edgesForExtendedLayout)]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.edgesForExtendedLayout = <span class="built_in">UIRectEdgeLeft</span> | <span class="built_in">UIRectEdgeRight</span> | <span class="built_in">UIRectEdgeBottom</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="跳转页面之后背景半透明"><a href="#跳转页面之后背景半透明" class="headerlink" title="跳转页面之后背景半透明"></a>跳转页面之后背景半透明</h3><blockquote>
<p><a href="http://www.cnblogs.com/oyhj/p/5120212.html" rel="external nofollow noopener noreferrer" target="_blank">用presentViewController一个背景颜色半透明的模态视图</a></p>
</blockquote>
<p>当使用<code>presentViewController</code>方法弹出下一个<code>UIViewController</code>的时候，如果需要这个视图背景半透明，需要设置如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UIViewController *viewControllers = [UIViewController new];</span><br><span class="line">self.definesPresentationContext = YES;</span><br><span class="line">viewController.modalPresentationStyle = UIModalPresentationOverCurrentContext;</span><br><span class="line">viewController.backgroudColor = [UIColor colorWithWhite: 0.1 alpha: 0.5];</span><br><span class="line">//如果源视图不是NavigationController子视图，直接用self即可</span><br><span class="line">[self.navigationController presentViewController:viewController animated:NO completion:nil];</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="隐藏状态栏"><a href="#隐藏状态栏" class="headerlink" title="隐藏状态栏"></a>隐藏状态栏</h3><blockquote>
<p><a href="http://www.cocoachina.com/bbs/read.php?tid-153922.html" rel="external nofollow noopener noreferrer" target="_blank">IOS7如何隐藏状态栏，貌似之前的没效果了</a><br><a href="http://stackoverflow.com/questions/24236912/how-do-i-hide-the-status-bar-in-a-swift-ios-app" rel="external nofollow noopener noreferrer" target="_blank">How do I hide the status bar in a Swift iOS app?</a></p>
</blockquote>
<p>在需要隐藏状态栏的<code>ViewController</code>中重写<code>prefersStatusBarHidden</code>方法<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)prefersStatusBarHidden &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在需要更改隐藏状态的地方调用<code>setNeedsStatusBarAppearanceUpdate</code>方法<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span> setNeedsStatusBarAppearanceUpdate]</span><br></pre></td></tr></table></figure></p>
<p><code>swift</code>写法<br><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prefersStatusBarHidden</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="在应用中打开另一个应用"><a href="#在应用中打开另一个应用" class="headerlink" title="在应用中打开另一个应用"></a>在应用中打开另一个应用</h3><blockquote>
<p><a href="http://blog.sina.com.cn/s/blog_a170e5c80101gsdj.html" rel="external nofollow noopener noreferrer" target="_blank">利用openURL，在IOS应用中打开另外一个应用</a><br><a href="http://stackoverflow.com/questions/32870393/canopenurl-this-app-is-not-allowed-to-query-for-scheme-instragram-ios9" rel="external nofollow noopener noreferrer" target="_blank">canOpenUrl - This app is not allowed to query for scheme instragram iOS9</a><br><a href="http://stackoverflow.com/questions/9530075/ios-access-app-info-plist-variables-in-code" rel="external nofollow noopener noreferrer" target="_blank">iOS: Access app-info.plist variables in code</a></p>
</blockquote>
<p>首先需要在<code>info.plist</code>注册自定义的<code>URL scheme</code><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在<code>iOS9</code>以后，还需要添加以下属性:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>LSApplicationQueriesSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里意为应用可以打开<code>scheme</code>为<code>test2</code>的应用。<br>然后在代码中可以使用<code>openUrl</code>函数打开应用：<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取scheme</span></span><br><span class="line">let prefix = (Bundle.main.object(forInfoDictionaryKey: <span class="string">"LSApplicationQueriesSchemes"</span>) as! <span class="built_in">NSArray</span>)[<span class="number">0</span>]</span><br><span class="line">let url = URL(string: <span class="string">"\(prefix):client_id=test1&amp;scoe=wopi&amp;platform=iOS&amp;app=test1&amp;action=12345"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">UIApplication</span>.shared.canOpenURL(url! as URL) &#123;   <span class="comment">//判断能否打开</span></span><br><span class="line">    <span class="comment">//打开应用</span></span><br><span class="line">    <span class="built_in">UIApplication</span>.shared.openURL(url! as URL)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    print(<span class="string">"can not go to this app!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来应用可以在<code>AppDelegate</code>类中的<code>handleOpenUrl</code>方法中获取到传过来的参数:<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">func application(_ application: <span class="built_in">UIApplication</span>, handleOpen url: URL) -&gt; Bool &#123;</span><br><span class="line">    print(url)</span><br><span class="line">    </span><br><span class="line">    let viewController = <span class="keyword">self</span>.window?.rootViewController</span><br><span class="line">    let message = url.absoluteString</span><br><span class="line">    let alertController = <span class="built_in">UIAlertController</span>.init(title: <span class="string">"url"</span>, message: message, preferredStyle: .alert)</span><br><span class="line">    alertController.addAction(<span class="built_in">UIAlertAction</span>.init(title: <span class="string">"OK"</span>, style: .default, handler: <span class="literal">nil</span>))</span><br><span class="line">    viewController?.present(alertController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="在网页中打开应用"><a href="#在网页中打开应用" class="headerlink" title="在网页中打开应用"></a>在网页中打开应用</h3><p>在网页<code>&lt;script&gt;</code>块中直接定义跳转的<code>scheme</code>为应用自定义的<code>scheme</code>即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果无法打开应用则跳转到AppStore中</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.location = <span class="string">"https://itunes.apple.com/cn/app/microsoft-word/id586447913"</span></span><br><span class="line">&#125;, <span class="number">25</span>);</span><br><span class="line"><span class="built_in">window</span>.location = <span class="string">"test1://"</span>;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="UIButton-内容左对齐"><a href="#UIButton-内容左对齐" class="headerlink" title="UIButton 内容左对齐"></a>UIButton 内容左对齐</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/2765024/how-to-set-the-title-of-uibutton-as-left-alignment" rel="external nofollow noopener noreferrer" target="_blank">How to set the title of UIButton as left alignment?</a></p>
</blockquote>
<p>设置<code>contentHorizontalAlignment</code>属性<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[button setContentHorizontalAlignment: <span class="built_in">UIControlContentHorizontalAlignmentLeft</span>];</span><br></pre></td></tr></table></figure></p>
<p>或者使用<code>UIEdgeInsetsMake(top, left, bottom, right)</code>方法来设置缩进，正数为缩进，负数为突出<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[button setContentEdgeInsets: <span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">-20</span>, <span class="number">0</span>, <span class="number">0</span>)];</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="裁剪照片"><a href="#裁剪照片" class="headerlink" title="裁剪照片"></a>裁剪照片</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/15951746/how-to-crop-an-image-from-avcapture-to-a-rect-seen-on-the-display" rel="external nofollow noopener noreferrer" target="_blank">How to crop an image from AVCapture to a rect seen on the display</a></p>
</blockquote>
<p>通过<code>AVCaptureSession</code>以及<code>AVCaptureStillImageOuput</code>获取的照片默认填充整个屏幕，与自定义的显示屏幕并不相同，因此需要裁剪照片至所见区域</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *)cropImage: (<span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    <span class="comment">//获取需要裁剪的矩形</span></span><br><span class="line">    <span class="built_in">CGRect</span> outputRect = [<span class="keyword">self</span>.captureVideoPreviewLayer metadataOutputRectOfInterestForRect:<span class="keyword">self</span>.captureVideoPreviewLayer.bounds];</span><br><span class="line">    <span class="built_in">CGImageRef</span> takenCGImage = image.CGImage;</span><br><span class="line">    size_t width = <span class="built_in">CGImageGetWidth</span>(takenCGImage);</span><br><span class="line">    size_t height = <span class="built_in">CGImageGetHeight</span>(takenCGImage);</span><br><span class="line">    <span class="built_in">CGRect</span> cropRect = <span class="built_in">CGRectMake</span>(outputRect.origin.x * width, outputRect.origin.y * height, outputRect.size.width * width, outputRect.size.height * height);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGImageRef</span> cropCGImage = <span class="built_in">CGImageCreateWithImageInRect</span>(takenCGImage, cropRect);</span><br><span class="line">    <span class="comment">//需要使用原图的朝向</span></span><br><span class="line">    <span class="built_in">UIImage</span> *croppedImage = [<span class="built_in">UIImage</span> imageWithCGImage:cropCGImage scale:image.scale orientation:image.imageOrientation];</span><br><span class="line">    <span class="built_in">CGImageRelease</span>(cropCGImage);</span><br><span class="line">    <span class="keyword">return</span> croppedImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="从照片文件夹中获取图像资源写入到临时文件夹"><a href="#从照片文件夹中获取图像资源写入到临时文件夹" class="headerlink" title="从照片文件夹中获取图像资源写入到临时文件夹"></a>从照片文件夹中获取图像资源写入到临时文件夹</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/6881923/alasset-send-a-photo-to-a-web-service-including-its-exif-data" rel="external nofollow noopener noreferrer" target="_blank">ALAsset , send a photo to a web service including its exif data</a></p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">ALAsset *selectedAsset = [<span class="keyword">self</span>.selectAssets objectForKey:key];</span><br><span class="line"><span class="keyword">if</span> (selectedAsset) &#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> byteSize = selectedAsset.defaultRepresentation.size;</span><br><span class="line">    <span class="built_in">NSMutableData</span> *rawData = [[<span class="built_in">NSMutableData</span> alloc] initWithCapacity:byteSize];</span><br><span class="line">    <span class="keyword">void</span> *bufferPointer = [rawData mutableBytes];</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    [selectedAsset.defaultRepresentation getBytes:bufferPointer fromOffset:<span class="number">0</span> length:byteSize error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"get asset data error: %@"</span>,error);</span><br><span class="line">    &#125;</span><br><span class="line">    rawData = [<span class="built_in">NSMutableData</span> dataWithBytes:bufferPointer length:byteSize];</span><br><span class="line">    [cloudObject setFilesize:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%lld"</span>, byteSize]];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *filePath = [<span class="built_in">NSTemporaryDirectory</span>() stringByAppendingPathComponent:fileName];</span><br><span class="line">    <span class="keyword">if</span> ([rawData writeToFile:filePath atomically:<span class="literal">YES</span>]) &#123;</span><br><span class="line">        [cloudObject setTempFilePath:filePath];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"current file path: %@"</span>, filePath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="通过PHAsset获取资源文件大小"><a href="#通过PHAsset获取资源文件大小" class="headerlink" title="通过PHAsset获取资源文件大小"></a>通过PHAsset获取资源文件大小</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/26549938/how-can-i-determine-file-size-on-disk-of-a-video-phasset-in-ios8" rel="external nofollow noopener noreferrer" target="_blank">How can I determine file size on disk of a video PHAsset in iOS8</a></p>
</blockquote>
<p><strong>iOS8</strong>之后，<code>ALAsset</code>被标记为不推荐，取而代之的是<code>PHAsset</code>。如果要获取文件大小，不能使用<code>asset.defaultRepresentation.size</code>了，需要用到以下方法:<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">PHAsset *asset = [[PHAsset fetchAssetsWithLocalIdentifiers:@[cloudObject.tempFilePath] options:<span class="literal">nil</span>] firstObject];</span><br><span class="line"><span class="keyword">if</span> (asset.mediaType == PHAssetMediaTypeImage) &#123;</span><br><span class="line">    PHImageRequestOptions *imageOptions = [[PHImageRequestOptions alloc] init];</span><br><span class="line">    imageOptions.deliveryMode = PHImageRequestOptionsDeliveryModeHighQualityFormat;</span><br><span class="line">    imageOptions.resizeMode = PHImageRequestOptionsResizeModeExact;</span><br><span class="line">    imageOptions.synchronous = <span class="literal">YES</span>;</span><br><span class="line">    imageOptions.networkAccessAllowed = <span class="literal">NO</span>;</span><br><span class="line">    [[PHImageManager defaultManager] requestImageDataForAsset:asset options:imageOptions resultHandler:^(<span class="built_in">NSData</span> * _Nullable imageData, <span class="built_in">NSString</span> * _Nullable dataUTI, <span class="built_in">UIImageOrientation</span> orientation, <span class="built_in">NSDictionary</span> * _Nullable info) &#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"length %f"</span>,imageData.length/(<span class="number">1024.0</span>*<span class="number">1024.0</span>));</span><br><span class="line">    &#125;];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (asset.mediaType == PHAssetMediaTypeVideo) &#123;</span><br><span class="line">    PHVideoRequestOptions *videoOptions = [[PHVideoRequestOptions alloc] init];</span><br><span class="line">    videoOptions.version = PHVideoRequestOptionsVersionOriginal;</span><br><span class="line">    videoOptions.networkAccessAllowed = <span class="literal">NO</span>;</span><br><span class="line">    [[PHImageManager defaultManager] requestAVAssetForVideo:asset options:videoOptions resultHandler:^(<span class="built_in">AVAsset</span> * _Nullable asset, <span class="built_in">AVAudioMix</span> * _Nullable audioMix, <span class="built_in">NSDictionary</span> * _Nullable info) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([asset isKindOfClass:[<span class="built_in">AVURLAsset</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="built_in">AVURLAsset</span> *urlAsset = (<span class="built_in">AVURLAsset</span> *)asset;</span><br><span class="line">            <span class="built_in">NSNumber</span> *size;</span><br><span class="line">            [urlAsset.URL getResourceValue:&amp;size forKey:<span class="built_in">NSURLFileSizeKey</span> error:<span class="literal">nil</span>];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"size is %f"</span>,[size floatValue]/(<span class="number">1024.0</span>*<span class="number">1024.0</span>));</span><br><span class="line">            <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:urlAsset.URL];</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"length %f"</span>,[data length]/(<span class="number">1024.0</span>*<span class="number">1024.0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>不要忘了引入框架<code>@import Photos</code></p>
<hr>
<h3 id="CMTimeMake"><a href="#CMTimeMake" class="headerlink" title="CMTimeMake"></a>CMTimeMake</h3><blockquote>
<p><a href="http://www.cnblogs.com/sell/archive/2013/01/29/2880832.html" rel="external nofollow noopener noreferrer" target="_blank">CMTimeMake和CMTimeMakeWithSeconds 详解</a></p>
</blockquote>
<p><code>CMTimeMake(a,b)</code> : a当前第几帧, b每秒钟多少帧.当前播放时间a/b<br><code>CMTimeMakeWithSeconds(a,b)</code> : a当前时间,b每秒钟多少帧</p>
<h3 id="更新播放时间"><a href="#更新播放时间" class="headerlink" title="更新播放时间"></a>更新播放时间</h3><p>使用<code>addPeriodicTimeObserverForInterval:queue:usingBlock</code>方法可以监听到播放时间的变化</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"> <span class="keyword">id</span> playerObserver = [<span class="keyword">self</span>.player addPeriodicTimeObserverForInterval:<span class="built_in">CMTimeMakeWithSeconds</span>(<span class="number">1.0</span>, <span class="built_in">NSEC_PER_SEC</span>) queue:<span class="literal">NULL</span> usingBlock:^(<span class="built_in">CMTime</span> time) &#123;</span><br><span class="line">    Float64 interval = <span class="built_in">CMTimeGetSeconds</span>(time);</span><br><span class="line">    <span class="built_in">NSInteger</span> seconds = (<span class="built_in">NSInteger</span>)interval % <span class="number">60</span>;</span><br><span class="line">    <span class="built_in">NSInteger</span> minutes = ((<span class="built_in">NSInteger</span>)interval / <span class="number">60</span>) % <span class="number">60</span>;</span><br><span class="line">    <span class="built_in">NSInteger</span> hours = (<span class="built_in">NSInteger</span>)interval / <span class="number">3600</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *currentTime = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%02ld:%02ld:%02ld"</span>, (<span class="keyword">long</span>)hours, (<span class="keyword">long</span>)minutes, (<span class="keyword">long</span>)seconds];</span><br><span class="line">    weakSelf.timeView.text = currentTime;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>使用完需要移除观察者<code>[self.player removeTimeObserver: playerObserver]</code></p>
]]></content>
      <categories>
        <category>iOS</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>photo</tag>
        <tag>WebView</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C 基础知识</title>
    <url>/ios-base/</url>
    <content><![CDATA[<h3 id="Objective-C-基础"><a href="#Objective-C-基础" class="headerlink" title="Objective-C 基础"></a>Objective-C 基础</h3><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><blockquote>
<p><a href="http://blog.csdn.net/dfqin/article/details/11669993" rel="external nofollow noopener noreferrer" target="_blank">Object-C @property 小结</a><br><a href="http://www.cnblogs.com/letmefly/archive/2012/07/20/2601338.html" rel="external nofollow noopener noreferrer" target="_blank">IOS，objective_C中用@interface和 @property 方式声明变量的区别</a><br><a href="http://moto0421.iteye.com/blog/1577459" rel="external nofollow noopener noreferrer" target="_blank">iOS开发中常见的语句@synthesize obj=_obj的意义详解</a><br><a href="http://www.cnblogs.com/ygm900/p/3660364.html" rel="external nofollow noopener noreferrer" target="_blank">iOS中属性与成员变量的区别</a></p>
</blockquote>
<h5 id="property是什么"><a href="#property是什么" class="headerlink" title="@property是什么"></a><code>@property</code>是什么</h5><p>标识为<code>@property</code>的变量可以自动生成<code>setter</code>与<code>getter</code>方法。<br><strong>声明</strong>: 声明格式为<code>@property (attributes) type propertyName</code><br><strong>实现</strong>: 在.m文件中的implements下，格式为<code>@synthsize name</code>即可。而在xcode4.4以后的版本，系统会自动合成, 等价于自己写了代码“ @synthesize  name = _name;” 。 也就是说如果没有特殊需求，只需要在头文件中声明而无需实现，就可以直接使用了<br><strong>成员变量访问权限</strong>: 头文件中声明的成员变量，默认是<code>protected</code>，.m文件中声明的成员变量，默认是<code>private</code>的。合成属性时，<code>@synthesize  propertyName = _name</code>；如果变量<code>_name</code>没有声明，系统会自动生成该成员变量且为<code>private</code>权限。如<code>果_name</code>已声明，它们会自动合成</p>
<p>声明一个属性，如果没有声明为只读的，它默认会生成两个方法 <code>- (type)name</code> 和 <code>- (void)setName</code>; 为了可读性等其它原因，也可以改变属性的setter和getter访问名称<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span>  (<span class="keyword">setter</span>=setMyValue, <span class="keyword">getter</span>=getBool) <span class="built_in">NSInteger</span>  value;</span><br></pre></td></tr></table></figure></p>
<p>这样的话就可以通过 <code>[obj setMyValue:10]</code> 和 <code>[obj getBool]</code>方法业访问成员变量了，此时<code>setValue</code>方法会被覆盖，不再存在</p>
<p><strong>@property的修饰属性(attributes)</strong></p>
<ul>
<li>可读性：<code>readwrite</code> / <code>readonly</code> ，不写的话默认为readwrite，即会合成setter和getter方法</li>
<li>内存 <code>assign</code> / <code>retain</code> / <code>weak</code> / <code>strong</code> ，在非ARC环境下， assign为默认，引用计数不变；retain引用计数加1；在引用计数环境下，默认为strong，与retain作用相同；从5.0系统后引入了weak，作用与assign相似，不过当所指向对象引用为0时，自动置为nil</li>
</ul>
<hr>
<h4 id="Selector基本概念"><a href="#Selector基本概念" class="headerlink" title="Selector基本概念"></a>Selector基本概念</h4><blockquote>
<p><a href="http://moto0421.iteye.com/blog/1625204" rel="external nofollow noopener noreferrer" target="_blank">Selector基本概念和操作</a></p>
</blockquote>
<p><code>@selector()</code>就是取类方法的编号,他的行为基本可以等同C语言的中函数指针,只不过C语言中，可以把函数名直接赋给一个函数指针，而Objective-C的类不能直接应用函数指针，这样只能做一个@selector语法来取。它的结果是一个SEL类型。这个类型本质是类方法的编号(函数地址)?</p>
<hr>
<h4 id="引入头文件关键字-Class-import"><a href="#引入头文件关键字-Class-import" class="headerlink" title="引入头文件关键字@Class/#import"></a>引入头文件关键字<code>@Class</code>/<code>#import</code></h4><blockquote>
<p><a href="http://blog.csdn.net/pjk1129/article/details/6590282" rel="external nofollow noopener noreferrer" target="_blank">IOS开发技术之──头文件引用（@class/#import/#include）</a><br><a href="http://www.cnblogs.com/martin1009/archive/2012/06/24/2560218.html" rel="external nofollow noopener noreferrer" target="_blank">IOS基础：深入理解Objective-c中@class的含义</a></p>
</blockquote>
<p><code>#include</code>:引入C头文件<br><code>#import</code>:引入Objective-C的头文件<br><code>@class</code>:类引用</p>
<p><code>#import</code>确定一个文件只能被导入一次，这使你在递归包含中不会出现问题.<code>#import</code>比起<code>#include</code>的好处就是不会引起交叉编译.<br><code>#import</code>方式会包含被引用类的所有信息，包括被引用类的变量和方法；<code>@class</code>方式只是告诉编译器在被引用类只是类的声明，具体这个类里有什么信息，这里不需要知道，等实现文件中真正要用到时，才会真正去查看被引用类中信息。<br>使用<code>@class</code>方式由于只需要只要被引用类的名称就可以了，而在实现类由于要用到被引用类中的实体变量和方法，所以需要使用<code>#import</code>来包含被引用类的头文件<br><code>@class</code>是放在<code>interface</code>中的，只是在引用一个类，将这个被引用类作为一个类型，在实现文件中，如果需要引用到被引用类的实体变量或者方法时，还需要使用<code>#import</code>方式引入被引用类</p>
<hr>
<h4 id="ivar是什么意思"><a href="#ivar是什么意思" class="headerlink" title="ivar是什么意思"></a>ivar是什么意思</h4><blockquote>
<p><a href="http://blog.csdn.net/lvxiangan/article/details/18816481" rel="external nofollow noopener noreferrer" target="_blank">ObjectiveC基础－ivar是什么意思</a></p>
</blockquote>
<p>Objective-C运行时定义了几种重要的类型。</p>
<ul>
<li><strong>class</strong>: 定义Objective-C类</li>
<li><strong>ivar</strong>: 定义对象的实例变量，包括类型与名字</li>
<li><strong>protocol</strong>: 定义协议</li>
<li><strong>objc_property_t</strong>: 定义属性</li>
<li><strong>method</strong>: 定义对象方法或者类方法。这个类型提供了方法的名字(<em>选择器</em>),参数类型与数量，返回值(合称为<em>方法签名</em>)，以及指向代码的函数指针(<em>方法的实现</em>)</li>
<li><strong>SEL</strong>: 定义选择器。选择器为方法名唯一的标识</li>
<li><strong>IMP</strong>: 定义方法的实现。这是一个指向某个函数的指针，该函数接受一个对象，一个选择器以及一个可变参数列表，返回一个对象。</li>
</ul>
<hr>
<h4 id="Objective-C限定词"><a href="#Objective-C限定词" class="headerlink" title="Objective-C限定词"></a>Objective-C限定词</h4><blockquote>
<p><a href="http://blog.sina.com.cn/s/blog_7aa21f320100qugx.html" rel="external nofollow noopener noreferrer" target="_blank">Objective-C 限定词 long short 等</a><br><a href="http://blog.csdn.net/xpwang168/article/details/8087143" rel="external nofollow noopener noreferrer" target="_blank">objectiveC【语法】修饰符 static extern const</a></p>
</blockquote>
<ul>
<li><p><strong>long</strong>: 如果直接把限定词long放在int声明之前，那么所声明的整型变量在某些计算机上具有扩展的值域。例如<code>long int factorial</code>.这条语句将变量factorial声明为long的整型变量，也就是长整型。就象<code>float</code>和<code>double</code>变量一样，long变量的具体精度是由具体的计算机系统决定的。在许多系统上，<code>int</code>与<code>long int</code>具有相同的值域，而且任何一个都能存储4个字节(1个字节8位)，32位宽(2,147,483,647)的整型值。<code>long</code>在限定整型的时候，实际相当于双精度的<code>short</code>。<br><code>long int</code>类型的常量值可通过在整型常量末尾添加字母L(大小写均可)来形成。单数字和L之间不允许由空格。因为小写的L和数字1容易混淆，建议有用到这种情况，都用大写。要用<code>NSLog</code>显示<code>long int</code>的值，使用字母l做为修饰符并放在整型格式符号i，o和x之前。例如“%lx”表示十六进制格式显示值。<br>当然，我们同样可以把<code>long</code>标识符放在<code>double</code>声明之前。<code>long double</code>常量可写成其尾部带有字母l或L的浮点常量。要显示<code>long double</code>的值，需要使用修饰符L。因此，<code>%Lf</code>用浮点计数法显示<code>long double</code>的值，<code>%Le</code>用科学计数法显示同样的值，而<code>%Lg</code>将告诉<code>NSLo</code>g在<code>%Lf</code>和<code>%Le</code>之间任选一个使用。</p>
</li>
<li><p><strong>long long</strong>: 双长整型相当于双精度long，可以用如下形式使用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long long int maxAllowedStorage;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这条语句把指定的变量声明为具有特定扩展精度的双长整型变量，该扩展精度保证变量至少8个字节，具有64位的宽度。<code>NSLog</code>字符串不使用单个字母l，而使用两个l来显示<code>long long</code>的整数，例如“<code>%lli</code>”</p>
<ul>
<li><p><strong>short</strong>: 把限定词<code>short</code>放在<code>int</code>声明之前时，它告诉Objective-C编译器要声明的特定变量用来存储相当小的整数。之所以使用<code>short</code>变量，主要原因是对节约内存空间的考虑，当程序员需要大量内存而可用的内存量又十分有限时，就可用<code>short</code>变量来解决这个问题。在某些计算机上，<code>short int</code>占用的内存空间是常规<code>int</code>变量所占空间的一半。在任何情况下，确保分配给<code>short int</code>的空间数量不少于2个字节，16位<br><strong>注意</strong>，在Objective-C中，没有其他方法可显式地编写<code>short int</code>型常量。要显示<code>short int</code>变量，可将字母h放在任何普通的整型转换符之前，如<code>%hi</code>，<code>%ho</code>或<code>%hx</code>。换句话说，可用任何整型转换符号来显示<code>short int</code>，因为当它作为参数传递给<code>NSLog</code>例程时，可转换成整数</p>
</li>
<li><p><strong>unsigned</strong>: 这个最终限定词就是无符号，可放在int变量之前，当整数变量只用来存储正数的情况下使用最终限定符。以下语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unsigned int counter;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>向编译器声明：变量counter只用来保存正值。通过限制整型变量的使用，使它专门存储正整数，可以扩展整型变量的精度。一般<code>unsigned int</code>可简写为<code>uint</code>。</p>
<ul>
<li><p><strong>signed</strong>: <code>signed</code>限定词可明确地告诉编译器特定变量是有符号的。它主要用在char声明前面。</p>
</li>
<li><p><strong>const</strong>: 修饰的东西不能被修改。指针类型根据位置的不同可以理解成3种情况:<br>1.常量指针</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化之后不能赋值，指向的对象可以是任意对象，对象可变。</span></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> pt1;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>2.指向常量的指针<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化之后可以赋值，即指向别的常量，指针本身的值可以修改，指向的值不能修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">NSString</span> * pt2;</span><br></pre></td></tr></table></figure></p>
<p>3.指向常量的常量指针<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">NSString</span> *  <span class="keyword">const</span> pt3;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p><strong>extern</strong>: 等同于c，全局变量的定义</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//x .h 声明</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">NSString</span> * AA;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x .m 定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">NSString</span> * AA = <span class="string">@"abc"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"x.h"</span></span></span><br><span class="line">或者再次申明</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">NSString</span> * AA;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>static</strong>: 等同于c，将变量的作用域限定于本文件,<code>static</code>变量属于本类，不同的类对应的是不同的对象;<code>static</code>变量同一个类所有对象中共享，只初始化一次。</p>
</li>
</ul>
<ol>
<li><code>static const</code>变量同<code>static</code>的结论，只是不能修改了，但是还是不同的对象</li>
<li><code>extern const</code>变量只有一个对象，标准的常量的定义方法</li>
<li><code>extern</code>的意思就是这个变量已经定义了，你只负责用就行了</li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>objc</tag>
      </tags>
  </entry>
  <entry>
    <title>Linphone通话录音功能实现</title>
    <url>/ios-callrecording/</url>
    <content><![CDATA[<p>最近使用<a href="http://www.linphone.org" rel="external nofollow noopener noreferrer" target="_blank"><code>Linphone</code></a>要实现一个通话录音的功能，<code>Linphone</code>倒是给了相关的方法，不过组合在一起还不知道怎么用。好在有安卓方面成功的代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinphoneCall call = linphoneCore.getCurrentCall();</span><br><span class="line">LinphoneCallParams params = call.getCurrentParamsCopy();</span><br><span class="line">params.setRecordFile(recordingPath);</span><br><span class="line">linphoneCore.updateCall(myCall, params);</span><br><span class="line">call.startRecording();</span><br></pre></td></tr></table></figure></p>
<p>然后照着这部分代码试着写了一个<code>iOS</code>版本的:<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">LinphoneCall *call = linphone_core_get_current_call(LC);</span><br><span class="line">LinphoneCallParams *params = linphone_call_params_copy(linphoen_call_get_current_params(call));</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *file_path = [recordingPath cStringUsingEncoding:[<span class="built_in">NSString</span> defaultCStringEncoding]];</span><br><span class="line">linphone_call_params_set_record_file(params, file_path);</span><br><span class="line">linphone_core_update_call(LC, call, params);</span><br><span class="line">linphone_call_params_destroy(params);</span><br></pre></td></tr></table></figure></p>
<p>这样算是设置好了录音文件的路径，接下来只需要调用对应的方法就开始录音了：<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">linphone_call_start_recording(call);</span><br></pre></td></tr></table></figure></p>
<p>结束录音的时候，尝试看看能不能获取到对应的路径：<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">linphone_call_stop_recording(call);</span><br><span class="line"><span class="keyword">const</span> LinphoneCallParams *params = linphone_call_get_current_params(call);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *record_file = linphone_call_params_get_record_file(params);</span><br><span class="line"><span class="keyword">if</span> (record_file) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结果却是这里的路径总是为<code>NULL</code>，看样子这样的写法是不成功了。</p>
<p>查了相关资料，看了那些方法的注释，才发现要在通话开始之前就要设置好录音文件的路径。<br>如果是在打电话的过程中，则需要在拨打之前进行设置：<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">LinphoneAddress *address = linphone_address_new(linphone_core_get_identity(LC));</span><br><span class="line">LinphoneCallParams *params = linphone_core_create_call_params(LC, <span class="literal">NULL</span>);</span><br><span class="line">linphone_call_params_set_record_file(params, file_path);</span><br><span class="line">linphone_core_invite_address_with_params(LC, address, params);</span><br><span class="line">linphone_call_params_destroy(params);</span><br></pre></td></tr></table></figure></p>
<p>如果是在接听电话的时候需要录音，那则在收到对应的状态时就要设置：<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (state == LinphoneCallIncomingReceived) &#123;</span><br><span class="line">    LinphoneCallParams *params = linphone_core_create_call_params(LC, <span class="literal">NULL</span>);</span><br><span class="line">    linphone_call_params_set_record_file(params, file_path);</span><br><span class="line">    linphone_core_accept_call_with_params(LC, call, params);</span><br><span class="line">    linphone_call_params_destroy(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来在通话的过程中使用<code>linphone_call_start_recording</code>开始录音，使用<code>linphone_call_stop_recording</code>方法结束录音。然后调用<code>linphone_call_params_get_record_file</code>就可以获取到对应的录音文件路径了。</p>
]]></content>
      <categories>
        <category>iOS</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>LinPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cocoapods来进行项目依赖管理</title>
    <url>/ios-cocoapods/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在安装之前，先做一些准备工作。首先需要替换掉<code>Ruby</code>的默认源:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem sources -a https://ruby.taobao.org/</span><br><span class="line">gem sources --remove https://rubygems.org/</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>更新: 现在淘宝的ruby镜像不再维护了，现在应该替换成<code>gem sources -a https://gems.ruby-china.org/</code></p>
</blockquote>
<p>然后可以输入命令<code>gem sources -l</code>验证是否替换成功。<br>若是<code>gem</code>版本低，可以使用<code>update</code>命令更新:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem update -n /usr/<span class="built_in">local</span>/bin --system</span><br></pre></td></tr></table></figure></p>
<p>接下来则是安装<code>Cocoapods</code>:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem install -n /usr/<span class="built_in">local</span>/bin cocoapods</span><br></pre></td></tr></table></figure></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>可以使用<code>search</code>命令搜寻需要的第三方库:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod search 第三方库名称</span><br></pre></td></tr></table></figure></p>
<p>在已经建立好的<code>Xcode</code>项目中加入<strong>Podfile</strong>文件，或者在终端中<em>cd</em>到项目路径中，然后运行<code>touch</code>命令建立该文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch Podfile</span><br></pre></td></tr></table></figure></p>
<p>然后编辑<strong>Podfile</strong>文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">platform :ios, <span class="string">'9.0'</span> <span class="comment">#支持的系统版本</span></span><br><span class="line">target <span class="string">'MyApp'</span> <span class="keyword">do</span></span><br><span class="line">  pod <span class="string">'AFNetworking'</span>, <span class="string">'~&gt; 3.0'</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure></p>
<p>编辑完保存之后在终端运行命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure></p>
<p>如果是第一次运行<code>pod install</code>命令的话，默认会执行<code>pod setup</code>来更新源。这一步会从<code>github</code>上边下载，如果连接经常断掉的话，可以按以下步骤解决:</p>
<ol>
<li>首先通过浏览器<a href="https://github.com/CocoaPods/Specs" rel="external nofollow noopener noreferrer" target="_blank">下载</a>压缩包，默认解压后的路径是<code>~/Download/Spec-master</code>。</li>
<li>然后在终端中运行<code>git clone https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master</code>命令，等其开始运行。</li>
<li>再开一个终端，运行<code>cp -r ~/.cocoapods/repos/master/.git ~/Download/Spec-master/</code>，成功后将上边的下载动作终止。</li>
<li>运行命令<code>mv ~/Download/Spec-master ~/.cocoapods/repos/master</code>转移目录。</li>
<li><code>cd</code>到Pod项目目录中执行<code>pod install --no-repo-update</code>命令。</li>
</ol>
<p>待其构建好项目之后打开<code>MyApp.xcworkspace</code>文件即可。</p>
<p>如果出现了引入的依赖无法找到的问题(Could not build module ‘…’)，可以尝试以下步骤解决:</p>
<ol>
<li>关闭Xcode。</li>
<li>运行命令<code>rm -rf ~/Library/Developer/Xcode/DerivedData</code>删除项目临时文件。</li>
<li>删除项目根目录下的<code>*.xcworkspace</code>、<code>Podfile.lock</code>文件，还有Pods文件夹。</li>
<li>重新运行<code>Pod install</code>命令，待其完成之后再通过<code>*.xcworkspace</code>打开项目。</li>
</ol>
<p>可以参考stackoverflow上的<a href="https://stackoverflow.com/questions/41709912/error-could-not-build-objective-c-module-firebase" rel="external nofollow noopener noreferrer" target="_blank">答案</a>。</p>
<hr>
<h3 id="卸载Cocoapods"><a href="#卸载Cocoapods" class="headerlink" title="卸载Cocoapods"></a>卸载Cocoapods</h3><p>首先使用命令查找<code>pod</code>的安装路径<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> pod</span><br></pre></td></tr></table></figure></p>
<p>然后删除这它:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/bin/pod</span><br></pre></td></tr></table></figure></p>
<p>这里的路径则是通过<code>which</code>命令找出来的。然后通过<code>gem list</code>命令来查找<code>gem</code>中的<code>Cocoapods</code>包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem list</span><br></pre></td></tr></table></figure></p>
<p>接下来将所有与<code>Cocoapods</code>有关的包移除掉<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure></p>
<p>如果有多个版本同时存在，终端会提示需要删除哪一个版本，按对应的数字即可。<br>这样<code>Cocoapods</code>就算是成功卸载了。</p>
<hr>
<blockquote>
<p>参考<br><a href="http://blog.csdn.net/wzzvictory/article/details/18737437" rel="external nofollow noopener noreferrer" target="_blank">CocoaPods详解之—-使用篇</a><br><a href="http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/" rel="external nofollow noopener noreferrer" target="_blank">用CocoaPods做iOS程序的依赖管理</a><br><a href="http://www.jianshu.com/p/071d30a3af02" rel="external nofollow noopener noreferrer" target="_blank">CocoaPods 安装 使用</a><br><a href="http://blog.csdn.net/sjl_leaf/article/details/50506057" rel="external nofollow noopener noreferrer" target="_blank">CocoaPods报错：The dependency <code>AFNetworking</code> is not used in any concrete target</a><br><a href="http://blog.csdn.net/qq_18670721/article/details/50432892" rel="external nofollow noopener noreferrer" target="_blank">如何从电脑中卸载cocoapods</a></p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Cocoapods</tag>
      </tags>
  </entry>
  <entry>
    <title>GCD相关知识</title>
    <url>/ios-gcd/</url>
    <content><![CDATA[<p>GCD是Grand Central Dispatch的简称,它是基于C语言的。如果使用GCD，完全由系统管理线程，我们不需要编写线程代码。只需定义想要执行的任务,然后添加到适当的调度队列(dispatch queue)。GCD会负责创建线程和调度你的任务，系统直接提供线程管理</p>
<a id="more"></a>
<h3 id="GCD-术语"><a href="#GCD-术语" class="headerlink" title="GCD 术语"></a>GCD 术语</h3><p>要理解 GCD ，你要先熟悉与线程和并发相关的几个概念。这两者都可能模糊和微妙，所以在开始 GCD 之前先简要地回顾一下它们。</p>
<ul>
<li><p><strong>Serial vs. Concurrent 串行 vs. 并发</strong><br>这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。</p>
</li>
<li><p><strong>Synchronous vs. Asynchronous 同步 vs. 异步</strong><br>在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。一个同步函数只在完成了它预定的任务后才返回。<br>一个异步函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。<br>注意——当你读到同步函数“阻塞（Block）”当前线程，或函数是一个“阻塞”函数或阻塞操作时，不要被搞糊涂了！动词“阻塞”描述了函数如何影响它所在的线程而与名词“代码块（Block）”没有关系。代码块描述了用 Objective-C 编写的一个匿名函数，它能定义一个任务并被提交到 GCD 。</p>
</li>
<li><p><strong>Critical Section 临界区</strong><br>就是一段代码不能被并发执行，也就是，两个线程不能同时执行这段代码。这很常见，因为代码去操作一个共享资源，例如一个变量若能被并发进程访问，那么它很可能会变质（译者注：它的值不再可信）。</p>
</li>
<li><p><strong>Race Condition 竞态条件</strong><br>这种状况是指基于特定序列或时机的事件的软件系统以不受控制的方式运行的行为，例如程序的并发任务执行的确切顺序。竞态条件可导致无法预测的行为，而不能通过代码检查立即发现。</p>
</li>
<li><p><strong>Deadlock 死锁</strong><br>两个（有时更多）东西——在大多数情况下，是线程——所谓的死锁是指它们都卡住了，并等待对方完成或执行其它操作。第一个不能完成是因为它在等待第二个的完成。但第二个也不能完成，因为它在等待第一个的完成。</p>
</li>
<li><p><strong>Thread Safe 线程安全</strong><br>线程安全的代码能在多线程或并发任务中被安全的调用，而不会导致任何问题（数据损坏，崩溃，等）。线程不安全的代码在某个时刻只能在一个上下文中运行。一个线程安全代码的例子是 NSDictionary 。你可以在同一时间在多个线程中使用它而不会有问题。另一方面，NSMutableDictionary 就不是线程安全的，应该保证一次只能有一个线程访问它。</p>
</li>
<li><p><strong>Context Switch 上下文切换</strong><br>一个上下文切换指当你在单个进程里切换执行不同的线程时存储与恢复执行状态的过程。这个过程在编写多任务应用时很普遍，但会带来一些额外的开销。</p>
</li>
<li><p><strong>Concurrency vs Parallelism 并发与并行</strong><br>并发和并行通常被一起提到，所以值得花些时间解释它们之间的区别。并发代码的不同部分可以“同步”执行。然而，该怎样发生或是否发生都取决于系统。多核设备通过并行来同时执行多个线程；然而，为了使单核设备也能实现这一点，它们必须先运行一个线程，执行一个上下文切换，然后运行另一个线程或进程。这通常发生地足够快以致给我们并发执行地错觉</p>
</li>
<li><p><strong>Queues 队列</strong><br>GCD 提供有 dispatch queues 来处理代码块，这些队列管理你提供给 GCD 的任务并用 FIFO 顺序执行这些任务。这就保证了第一个被添加到队列里的任务会是队列中第一个开始的任务，而第二个被添加的任务将第二个开始，如此直到队列的终点。所有的调度队列（dispatch queues）自身都是线程安全的，你能从多个线程并行的访问它们。 GCD 的优点是显而易见的，即当你了解了调度队列如何为你自己代码的不同部分提供线程安全。关于这一点的关键是选择正确类型的调度队列和正确的调度函数来提交你的工作。</p>
</li>
<li><p><strong>Concurrent Queues 并发队列</strong><br>在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。</p>
</li>
<li><p><strong>Queue Types 队列类型</strong><br><strong>首先</strong>，系统提供给你一个叫做 主队列（main queue） 的特殊队列。和其它串行队列一样，这个队列中的任务一次只能执行一个。然而，它能保证所有的任务都在主线程执行，而主线程是唯一可用于更新 UI 的线程。这个队列就是用于发生消息给 UIView 或发送通知的。系统同时提供给你好几个并发队列。它们叫做 全局调度队列（Global Dispatch Queues） 。目前的四个全局队列有着不同的优先级：background、low、default 以及 high。要知道，Apple 的 API 也会使用这些队列，所以你添加的任何任务都不会是这些队列中唯一的任务。<strong>最后</strong>，你也可以创建自己的串行队列或并发队列。这就是说，至少有五个队列任你处置：主队列、四个全局调度队列，再加上任何你自己创建的队列。</p>
</li>
</ul>
<hr>
<h3 id="GCD基本方法"><a href="#GCD基本方法" class="headerlink" title="GCD基本方法"></a>GCD基本方法</h3><h4 id="创建和管理dispatch-queue"><a href="#创建和管理dispatch-queue" class="headerlink" title="创建和管理dispatch queue"></a>创建和管理dispatch queue</h4><ol>
<li>获得全局并发Dispatch Queue (concurrent dispatch queue)<br>1.1 并发dispatch queue可以同时并行地执行多个任务,不过并发queue仍然按先进先出的顺序来启动任务。并发queue会在之前的任务完成之前就出列下一个任务并开始执行。并发queue同时执行的任务数量会根据应用和系统动态变化,各种因素包括:可用核数量、其它进程正在执行的工作数量、其它串行dispatch queue中优先任务的数量等.<br>1.2 虽然dispatch queue是引用计数的对象,但你不需要retain和release全局并发queue。因为这些queue对应用是全局的,retain和release调用会被忽略。你也不需要存储这三个queue的引用,每次都直接调用dispatch_get_global_queue获得queue就行了<br>1.3 系统给每个应用提供三个并发dispatch queue,整个应用内全局共享,三个queue的区别是优先级。你不需要显式地创建这些queue,使用dispatch_get_global_queue函数来获取这三个queue:<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span>  queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>第一个参数用于指定优先级，分别使用<code>DISPATCH_QUEUE_PRIORITY_HIGH</code>和<code>DISPATCH_QUEUE_PRIORITY_LOW</code>两个常量来获取高和低优先级的两个queue；第二个参数目前未使用到，默认0即可</p>
<ol start="2">
<li>创建串行Dispatch Queue (serial dispatch queue)<br>2.1 应用的任务需要按特定顺序执行时,就需要使用串行Dispatch Queue,串行queue每次只能执行一个任务。你可以使用串行queue来替代锁,保护共享资源 或可变的数据结构。和锁不一样的是,串行queue确保任务按可预测的顺序执行。而且只要你异步地提交任务到串行queue,就永远不会产生死锁<br>2.2 你必须显式地创建和管理所有你使用的串行queue,应用可以创建任意数量的串行queue,但不要为了同时执行更多任务而创建更多的串行queue。如果你需要并发地执行大量任务,应该把任务提交到全局并发queue<br>2.3 利用<code>dispatch_queue_create</code>函数创建串行queue,两个参数分别是queue名和一组queue属性<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"cn.itcast.queue"</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>第一个参数是队列的名称，一般是使用倒序的全域名。虽然可以不给队列指定一个名称，但是有名称的队列可以让我们在遇到问题时更好调试；当第二个参数为nil时返回Serial Dispatch Queue，如上面那个例子，当指定为<code>DISPATCH_QUEUE_CONCURRENT</code>时返回Concurrent Dispatch Queue。<br>需要注意一点，如果是在OS X 10.8或iOS 6以及之后版本中使用，Dispatch Queue将会由ARC自动管理，如果是在此之前的版本，需要自己手动释放(<code>dispatch_release(queue)</code>)</p>
<ol start="3">
<li>运行时获得公共Queue<br>GCD提供了函数让应用访问几个公共dispatch queue:<br>3.1 使用<code>dispatch_get_current_queue</code>函数作为调试用途,或者测试当前queue的标识。在block对象中调用这个函数会返回block提交到的queue(这个时候queue应该正在执行中)。在block对象之外调用这个函数会返回应用的默认并发queue。<br>3.2 使用<code>dispatch_get_main_queue</code>函数获得应用主线程关联的串行dispatch queue<br>3.3 使用<code>dispatch_get_global_queue</code>来获得共享的并发queue</li>
</ol>
<h4 id="用-dispatch-async-处理后台任务"><a href="#用-dispatch-async-处理后台任务" class="headerlink" title="用 dispatch_async 处理后台任务"></a>用 dispatch_async 处理后台任务</h4><p>为了避免界面在处理耗时的操作时卡死，比如读取网络数据，IO,数据库读写等，我们会在另外一个线程中处理这些操作，然后通知主线程更新界面。<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;  </span><br><span class="line">    <span class="comment">// 例:下载图片 </span></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;  </span><br><span class="line">        <span class="comment">// 例:显示图片  </span></span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="使用-dispatch-after-延后工作"><a href="#使用-dispatch-after-延后工作" class="headerlink" title="使用 dispatch_after 延后工作"></a>使用 dispatch_after 延后工作</h4><p>dispatch_after能让我们添加进队列的任务延时执行:<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//NSEC_PER_SEC:秒 NSEC_PER_MSEC:毫秒</span></span><br><span class="line">dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64)(<span class="number">10</span> * <span class="built_in">NSEC_PER_SEC</span>))；</span><br><span class="line">dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class="keyword">void</span>)&#123; </span><br><span class="line">    <span class="comment">//延迟10秒执行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="利用dispatch-once创建单例"><a href="#利用dispatch-once创建单例" class="headerlink" title="利用dispatch_once创建单例"></a>利用dispatch_once创建单例</h4><p> 该函数接收一个<code>dispatch_once</code>用于检查该代码块是否已经被调度的谓词（是一个长整型，实际上作为BOOL使用）。它还接收一个希望在应用的生命周期内仅被调度一次的代码块，对于本例就用于shared实例的实例化。<br>dispatch_once不仅意味着代码仅会被运行一次，而且还是线程安全的，这就意味着你不需要使用诸如@synchronized之类的来防止使用多个线程或者队列时不同步的问题。<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> AccountManager *sharedAccountManagerInstance = <span class="literal">nil</span>;  <span class="comment">//需要实例化的类</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123; </span><br><span class="line">    sharedAccountManagerInstance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>dispatch_once()</code>以线程安全的方式执行且仅执行其代码块一次。试图访问临界区（即传递给 dispatch_once 的代码）的不同的线程会在临界区已有一个线程的情况下被阻塞，直到临界区完成为止。</p>
<h4 id="dispatch-barrier-async的使用"><a href="#dispatch-barrier-async的使用" class="headerlink" title="dispatch_barrier_async的使用"></a>dispatch_barrier_async的使用</h4><p><code>dispatch_barrier_async</code>就如同它的名字一样，在队列执行的任务中增加“栅栏”，在增加“栅栏”之前已经开始执行的block将会继续执行，当<code>dispatch_barrier_async</code>开始执行的时候其他的block处于等待状态，<code>dispatch_barrier_async</code>的任务执行完后，其后的block才会执行。<br>简单点说，就是<code>dispatch_barrier_async</code>是在前面的任务执行结束后它才执行，而且它后面的任务等它执行完成之后才会执行<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"test.gcd"</span>, DISPATCH_QUEUE_CONCURRENT);  </span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;  </span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dispatch_async1"</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;  </span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">4</span>];  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dispatch_async2"</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line">dispatch_barrier_async(queue, ^&#123;  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dispatch_barrier_async"</span>);  </span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">4</span>];  </span><br><span class="line">  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;  </span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dispatch_async3"</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="dispatch-sync"><a href="#dispatch-sync" class="headerlink" title="dispatch_sync"></a>dispatch_sync</h4><p><code>dispatch_sync()</code> 同步地提交工作并在返回前等待它完成。使用 <code>dispatch_sync</code> 跟踪你的调度障碍工作，或者当你需要等待操作完成后才能使用 Block 处理过的数据。它干的事儿和<code>dispatch_async</code>相同，但是它会等待block中的代码执行完成并返回。结合__block类型修饰符，可以用来从执行中的block获取一个值。<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__block <span class="built_in">NSArray</span> *array;</span><br><span class="line"><span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.concurrentPhotoQueue, ^&#123;  </span><br><span class="line">    array = [<span class="built_in">NSArray</span> arrayWithArray:_photosArray];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>但你需要很小心。想像如果你调用 dispatch_sync 并放在你已运行着的当前队列。这会导致死锁，因为调用会一直等待直到 Block 完成，但 Block 不能完成（它甚至不会开始！），直到当前已经存在的任务完成，而当前任务无法完成！这将迫使你自觉于你正从哪个队列调用——以及你正在传递进入哪个队列。</p>
<h4 id="dispatch-group"><a href="#dispatch-group" class="headerlink" title="dispatch_group"></a>dispatch_group</h4><p>Dispatch Group 会在整个组的任务都完成时通知你。这些任务可以是同步的，也可以是异步的，即便在不同的队列也行。而且在整个组的任务都完成时，Dispatch Group 可以用同步的或者异步的方式通知你。<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 异步下载图片  </span></span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;  </span><br><span class="line">    <span class="comment">// 创建一个组  </span></span><br><span class="line">    dispatch_group_t group = dispatch_group_create();  </span><br><span class="line">    __block <span class="built_in">UIImage</span> *image1 = <span class="literal">nil</span>;  </span><br><span class="line">    __block <span class="built_in">UIImage</span> *image2 = <span class="literal">nil</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 关联一个任务到group  </span></span><br><span class="line">    dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;  </span><br><span class="line">        <span class="comment">// 下载第一张图片  </span></span><br><span class="line">        image1 = [<span class="built_in">UIImage</span> imageWithData: [<span class="built_in">NSData</span> dataWithContentsOfURL:url1]];  </span><br><span class="line">    &#125;);  </span><br><span class="line">      </span><br><span class="line">    dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;  </span><br><span class="line">        <span class="comment">// 下载第二张图片  </span></span><br><span class="line">        image2 = [<span class="built_in">UIImage</span> imageWithData: [<span class="built_in">NSData</span> dataWithContentsOfURL:url2]];</span><br><span class="line">    &#125;);  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 等待组中的任务执行完毕,回到主线程执行block回调  </span></span><br><span class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;  </span><br><span class="line">        <span class="keyword">self</span>.imageView1.image = image1;  </span><br><span class="line">        <span class="keyword">self</span>.imageView2.image = image2;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>除此之外，还可以使用<code>dispatch_group_wait</code>方法来实现此功能<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);  </span><br><span class="line">dispatch_group_t group = dispatch_group_create();  </span><br><span class="line">dispatch_group_async(group, queue, ^&#123;  </span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">1</span>];  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"group1"</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line">dispatch_group_async(group, queue, ^&#123;  </span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"group2"</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line">dispatch_group_async(group, queue, ^&#123;  </span><br><span class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">3</span>];  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"group3"</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"group finish"</span>);</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是，<code>dispatch_group_wait</code>实际上会使当前的线程处于等待的状态，也就是说如果是在主线程执行<code>dispatch_group_wait</code>，在上面的Block执行完之前，主线程会处于卡死的状态。可以注意到<code>dispatch_group_wait</code>的第二个参数是指定超时的时间，如果指定为<code>DISPATCH_TIME_FOREVER</code>则表示会永久等待，直到上面的Block全部执行完，除此之外，还可以指定为具体的等待时间，根据<code>dispatch_group_wait</code>的返回值来判断是上面block执行完了还是等待超时了。</p>
<h4 id="dispatch-apply"><a href="#dispatch-apply" class="headerlink" title="dispatch_apply"></a>dispatch_apply</h4><p>dispatch_apply会将一个指定的block执行指定的次数。<code>dispatch_apply</code>表现得就像一个 for 循环，但它能并发地执行不同的迭代。这个函数是同步的，所以和普通的 for 循环一样，它只会在所有工作都完成后才会返回。<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//循环10次</span></span><br><span class="line">dispatch_apply(<span class="number">10</span>, queue, ^(size_t i) &#123;  </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,i); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h4 id="dispatch-suspend-dispatch-resume"><a href="#dispatch-suspend-dispatch-resume" class="headerlink" title="dispatch_suspend / dispatch_resume"></a>dispatch_suspend / dispatch_resume</h4><p>某些情况下，我们可能会想让<em>Dispatch Queue</em>暂时停止一下，然后在某个时刻恢复处理，这时就可以使用<code>dispatch_suspend</code>以及<code>dispatch_resume</code>函数<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暂停</span></span><br><span class="line">dispatch_suspend(globalQueue)</span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line">dispatch_resume(globalQueue)</span><br></pre></td></tr></table></figure></p>
<p>挂起和继续是异步的,而且只在执行block之间（比如在执行一个新的block之前或之后）生效。挂起一个queue不会导致正在执行的block停止。</p>
<h4 id="dispatch-semaphore"><a href="#dispatch-semaphore" class="headerlink" title="dispatch_semaphore"></a>dispatch_semaphore</h4><p>信号量让你控制多个消费者对有限数量资源的访问。举例来说，如果你创建了一个有着两个资源的信号量，那同时最多只能有两个线程可以访问临界区。其他想使用资源的线程必须在一个FIFO队列里等待。<br>信号量在多线程开发中被广泛使用，当一个线程在进入一段关键代码之前，线程必须获取一个信号量，一旦该关键代码段完成了，那么该线程必须释放信号量。其它想进入该关键代码段的线程必须等待前面的线程释放信号量。<br>信号量的具体做法是：当信号计数大于0时，每条进来的线程使计数减1，直到变为0，变为0后其他的线程将进不来，处于等待状态；执行完任务的线程释放信号，使计数加1，如此循环下去。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">__block <span class="built_in">NSMutableData</span> *result = [[<span class="built_in">NSMutableData</span> alloc] init];</span><br><span class="line"><span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</span><br><span class="line"><span class="built_in">NSURLSessionDataTask</span> *dataTask = [session dataTaskWithURL:[<span class="built_in">NSURL</span> URLWithString:url] completionHandler:^(<span class="built_in">NSData</span> *data, <span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</span><br><span class="line">        result = [<span class="built_in">NSMutableData</span> dataWithData:data];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        *e = error;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"NSURLSessionDataTask Error: %@"</span>, [error localizedDescription]);</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch_semaphore_signal(semaphore);</span><br><span class="line">&#125;];</span><br><span class="line">[dataTask resume];</span><br><span class="line">dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br></pre></td></tr></table></figure>
<p><code>dispatch_semaphore_create</code>创建一个信号，并且将信号量指定为0，这样在<code>dispatch_semaphore_wait</code>处就会一直等待信号的发送，直到<code>dispatch_semaphore_signal</code>发送出信号后,程序才会进行下一步，这个时候在主程序已经获取到了需要的返回数据了。</p>
<hr>
<h3 id="在GCD中使用NSTimer"><a href="#在GCD中使用NSTimer" class="headerlink" title="在GCD中使用NSTimer"></a>在GCD中使用NSTimer</h3><blockquote>
<p>来自<a href="http://stackoverflow.com/questions/14569693/timer-inside-global-queue-is-not-calling-in-ios" rel="external nofollow noopener noreferrer" target="_blank">Timer inside global queue is not calling in iOS</a></p>
</blockquote>
<p>如果在GCD中使用NSTimer，则需要在主线程切换回来才能实现效果，如<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">	<span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">0.10</span> </span><br><span class="line">									 target:<span class="keyword">self</span> </span><br><span class="line">								   selector:<span class="keyword">@selector</span>(action_Timer) </span><br><span class="line">								   userInfo:<span class="literal">nil</span> </span><br><span class="line">									repeats:<span class="literal">YES</span>];</span><br><span class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">		[[<span class="built_in">NSRunLoop</span> mainRunLoop] addTimer:timer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">	&#125;);        </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><a href="http://www.cocoachina.com/industry/20140428/8248.html" rel="external nofollow noopener noreferrer" target="_blank">GCD 深入理解（一）</a><br><a href="http://www.cocoachina.com/industry/20140515/8433.html" rel="external nofollow noopener noreferrer" target="_blank">GCD 深入理解（二）</a><br><a href="http://blog.csdn.net/zhangao0086/article/details/38904923" rel="external nofollow noopener noreferrer" target="_blank">iOS GCD使用指南</a><br><a href="http://www.cnblogs.com/lovesmile/archive/2012/09/13/2683468.html" rel="external nofollow noopener noreferrer" target="_blank">GCD介绍</a><br><a href="http://blog.csdn.net/q199109106q/article/details/8566300" rel="external nofollow noopener noreferrer" target="_blank">多线程编程4 - GCD</a><br><a href="http://blog.csdn.net/totogo2010/article/details/8016129" rel="external nofollow noopener noreferrer" target="_blank">iOS多线程编程之Grand Central Dispatch(GCD)介绍和使用</a><br><a href="http://bj007.blog.51cto.com/1701577/649413/" rel="external nofollow noopener noreferrer" target="_blank">利用dispatch_once创建单例</a></p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>GCD</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j配置</title>
    <url>/java-log4j/</url>
    <content><![CDATA[<blockquote>
<p><a href="http://www.cnblogs.com/licheng/archive/2008/08/23/1274566.html" rel="external nofollow noopener noreferrer" target="_blank">Log4j使用指南</a><br><a href="http://www.blogjava.net/rickhunter/articles/28133.html" rel="external nofollow noopener noreferrer" target="_blank">如何使用Log4j？</a><br><a href="http://www.cnblogs.com/shenliang123/archive/2012/05/02/2479286.html" rel="external nofollow noopener noreferrer" target="_blank">玩转log4j</a><br><a href="http://www.cnblogs.com/dkblog/archive/2007/07/27/1980873.html" rel="external nofollow noopener noreferrer" target="_blank">Tomcat下log4j设置文件路径和temp目录</a><br><a href="http://wenku.baidu.com/link?url=LTbE_lIz7Myn7GZtJ9PQlZJl_mHyYGJoVu7BSAIMy0eVKbGf4WL-IibBPJb0j0Sf183sf3A2o08Nao2pddGHTk3r5Oq-VnQhgQw_tuGLQxu" rel="external nofollow noopener noreferrer" target="_blank">log4j输出多个自定义日志文件</a></p>
</blockquote>
<p>log4j的配置文件支持key=value格式的properties文件以及xml文件。</p>
<h4 id="日志优先级"><a href="#日志优先级" class="headerlink" title="日志优先级"></a>日志优先级</h4><p>它的日志优先级别有: <strong>OFF</strong>、<strong>FATAL</strong>、<strong>ERROR</strong>、<strong>WARN</strong>、<strong>INFO</strong>、<strong>DEBUG</strong>、<strong>ALL</strong>或者自定义级别。一般使用的从低到高为<strong>DEBUG</strong>、<strong>INFO</strong>、<strong>WARN</strong>、<strong>ERROR</strong>.假如在一个级别为q的Logger中发生一个级别为p的日志请求，如果p&gt;=q,那么请求将被启用。这是Log4j的核心原则。 比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。</p>
<h4 id="输出源"><a href="#输出源" class="headerlink" title="输出源"></a>输出源</h4><p>一个输出源被称做一个<strong>Appender</strong>。 <strong>Appender</strong>包括console（控制台）, files（文件）, GUI components（图形的组件）, remote socket servers（socket 服务）, JMS（java信息服务）, NT Event Loggers（NT的事件日志）, and remote UNIX Syslog daemons（远程UNIX的后台日志服务）。它也可以做到异步记录。<br>一个logger可以设置超过一个的appender。 用addAppender 方法添加一个appender到一个给定的logger。对于一个给定的logger它每个生效的日志请求都被转发到该logger所有的appender上和该logger的父辈logger的appender上。<br>Log4j提供的appender有以下几种：</p>
<p><strong>org.apache.log4j.ConsoleAppender</strong>（控制台）<br><strong>org.apache.log4j.FileAppender</strong>（文件）<br><strong>org.apache.log4j.DailyRollingFileAppender</strong>（每天产生一个日志文件）<br><strong>org.apache.log4j.RollingFileAppender</strong>（文件大小到达指定尺寸的时候产生新文件）<br><strong>org.apache.log4j.WriterAppender</strong>（将日志信息以流格式发送到任意指定的地方）</p>
<h4 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h4><h5 id="布局样式"><a href="#布局样式" class="headerlink" title="布局样式"></a>布局样式</h5><p><strong>org.apache.log4j.HTMLLayout</strong>（以HTML表格形式布局），<br><strong>org.apache.log4j.PatternLayout</strong>（可以灵活地指定布局模式），<br><strong>org.apache.log4j.SimpleLayout</strong>（包含日志信息的级别和信息字符串），<br><strong>org.apache.log4j.TTCCLayout</strong>（包含日志产生的时间、线程、类别等等信息）</p>
<h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><p>%m 输出代码中指定的消息<br>%p 输出优先级，即<code>DEBUG</code>，<code>INFO</code>，<code>WARN</code>，<code>ERROR</code>，<code>FATAL</code><br>%r 输出自应用启动到输出该log信息耗费的毫秒数<br>%c 输出所属的类目，通常就是所在类的全名<br>%t 输出产生该日志事件的线程名<br>%n 输出一个回车换行符，Windows平台为”rn”，Unix平台为”n”<br>%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921<br>%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(Test Log4.java:10) </p>
<p>示例:<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># log4j.rootLogger=INFO,stdout</span></span><br><span class="line"><span class="comment"># 指定多个输出源</span></span><br><span class="line"><span class="attr">log4j.logger.com.framework</span>=INFO,stdout,R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定控制台输出</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=org.apache.log4j.ConsoleAppender</span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span>=System.out</span><br><span class="line"><span class="comment"># 输出级别为INFO</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Threshold</span>=INFO</span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=[%p] %d&#123;yyyy-MM-dd HH:mm:ss&#125; %m%n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定输出日志到文件</span></span><br><span class="line"><span class="attr">log4j.appender.R</span>=org.apache.log4j.RollingFileAppender</span><br><span class="line"><span class="comment"># 指定文件目录，这里为tomcat主目录,需要在环境变量中配置</span></span><br><span class="line"><span class="attr">log4j.appender.R.File</span>=<span class="variable">$&#123;catalina.base&#125;</span>/logs/ilog.txt</span><br><span class="line"><span class="comment"># 大于20MB则另起文件</span></span><br><span class="line"><span class="attr">log4j.appender.R.MaxFileSize</span>=<span class="number">20</span>MB</span><br><span class="line"><span class="attr">log4j.appender.R.Threshold</span>=INFO</span><br><span class="line"><span class="attr">log4j.appender.R.MaxBackupIndex</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">log4j.appender.R.layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line"><span class="attr">log4j.appender.R.layout.ConversionPattern</span>=[%p] %d&#123;yyyy-MM-dd HH:mm:ss&#125; %m%n</span><br></pre></td></tr></table></figure></p>
<p>在代码中调用日志:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123;</span><br><span class="line">  Logger log = Logger.getLogger(LogTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     log.info(<span class="string">"test"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>log</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Optional.orElse与Optional.orElseGet的区别</title>
    <url>/java-optional-orelse/</url>
    <content><![CDATA[<p><strong>Java8</strong>加入了<code>Optional</code>这一利器用来对付<code>null</code>。它里边就包含了<code>orElse</code>与<code>orElseGet</code>方法。<br>单看方法及注释的话，它俩的区别就是接收的参数不一样，以及一个返回<code>null</code>,另一个则不允许。<br>不过最近在使用过程中发现它俩还有一个区别，就是<em>无论<code>Optional</code>中的值为不为<code>null</code>，<br><code>orElse</code>都会有执行，而<code>orElseGet</code>则不会执行。</em></p>
<p>下面通过一个简单的代码段来测试一下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">other</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"call other method"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"nothing"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">orElseMethod</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(s).orElse(other());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">orElseGetMethod</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(s).orElseGet(() -&gt; other());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(<span class="string">"----------orElse---------"</span>);</span><br><span class="line">    System.out.println(orElseMethod(s));</span><br><span class="line">    System.out.println(<span class="string">"----------orElseGet---------"</span>);</span><br><span class="line">    System.out.println(orElseGetMethod(s));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">----------orElse---------</span><br><span class="line">call other method</span><br><span class="line">nothing</span><br><span class="line">----------orElseGet---------</span><br><span class="line">call other method</span><br><span class="line">nothing</span><br></pre></td></tr></table></figure></p>
<p>查看输出信息可以得知，当<code>Optional</code>值为<code>null</code>的时候，<code>orElse</code>及<code>orElseGet</code>都执行了对应的方法并且返回了候补值。<br>当传入的值不为<code>null</code>时：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String s = <span class="string">"a"</span>;</span><br><span class="line">    System.out.println(<span class="string">"----------orElse---------"</span>);</span><br><span class="line">    System.out.println(orElseMethod(s));</span><br><span class="line">    System.out.println(<span class="string">"----------orElseGet---------"</span>);</span><br><span class="line">    System.out.println(orElseGetMethod(s));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">----------orElse---------</span><br><span class="line">call other method</span><br><span class="line">a</span><br><span class="line">----------orElseGet---------</span><br><span class="line">a</span><br></pre></td></tr></table></figure></p>
<p>这时<code>orElseGet</code>里的方法并不会执行，而<code>orElse</code>里的方法还是会执行。</p>
<p>乍看之下，它俩有点像单例模式中的<em>饿汉模式</em>与<em>懒汉模式</em>，一个是事先准备好返回值，<br>另一个则是需要用到的时候才去构造对应的返回值。因此这样看某些情况下<code>orElseGet</code>比<code>orElse</code>性能会好一些？</p>
<p>跑个分看看:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode</span>(Mode.Throughput)</span><br><span class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.MICROSECONDS)</span><br><span class="line"><span class="meta">@State</span>(Scope.Benchmark)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Param</span>(&#123;<span class="string">"sss"</span>&#125;)</span><br><span class="line">    <span class="keyword">public</span> String s = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">other</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"nothing"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">orElseMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(s).orElse(other());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">orElseGetMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(s).orElseGet(() -&gt; other());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Options options = <span class="keyword">new</span> OptionsBuilder().include(OptionalTest<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span></span><br><span class="line"><span class="class">                .<span class="title">forks</span>(2)</span></span><br><span class="line"><span class="class">                .<span class="title">warmupIterations</span>(4).<span class="title">warmupTime</span>(<span class="title">TimeValue</span>.<span class="title">seconds</span>(1))</span></span><br><span class="line"><span class="class">                .<span class="title">measurementIterations</span>(10).<span class="title">measurementTime</span>(<span class="title">TimeValue</span>.<span class="title">seconds</span>(1))</span></span><br><span class="line"><span class="class">                .<span class="title">threads</span>(4)</span></span><br><span class="line"><span class="class">                .<span class="title">build</span>()</span>;</span><br><span class="line">        <span class="keyword">new</span> Runner(options).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">Benchmark                     (s)   Mode  Cnt    Score    Error   Units</span><br><span class="line">OptionalTest.orElseGetMethod  sss  thrpt   <span class="number">40</span>  <span class="number">494.108</span> ± <span class="number">16.033</span>  ops/us</span><br><span class="line">OptionalTest.orElseMethod     sss  thrpt   <span class="number">40</span>  <span class="number">461.837</span> ± <span class="number">36.228</span>  ops/us</span><br></pre></td></tr></table></figure></p>
<p>这里的评测指标为<strong>吞吐量</strong><code>Throughput</code>,表示指定时间内能执行多少次调用。那自然分数是越高越好。<br>从这个测试结果来看，<code>orElseGet</code>是比<code>orElse</code>分数高的，当然测试用例的不同分数自然不一样，此次跑分结果仅供娱乐。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java知识点收集</title>
    <url>/java-other/</url>
    <content><![CDATA[<p>收集平时碰到的一些小问题的解决方法。</p>
<a id="more"></a>
<h3 id="java-lang-ClassCastException-oracle-sql-BLOB"><a href="#java-lang-ClassCastException-oracle-sql-BLOB" class="headerlink" title="java.lang.ClassCastException: oracle.sql.BLOB"></a>java.lang.ClassCastException: oracle.sql.BLOB</h3><blockquote>
<p><a href="http://www.haodaima.net/art/783483" rel="external nofollow noopener noreferrer" target="_blank">奇怪的错误 java.lang.ClassCastException: oracle.sql.BLOB</a></p>
</blockquote>
<p>tommcat目录下的lib文件夹中与项目中WEB-INF/lib下有同样的包导致，去掉其中一个即可。</p>
<hr>
<h3 id="java-sql-SQLException-对只转发结果集的无效操作"><a href="#java-sql-SQLException-对只转发结果集的无效操作" class="headerlink" title="java.sql.SQLException: 对只转发结果集的无效操作"></a>java.sql.SQLException: 对只转发结果集的无效操作</h3><blockquote>
<p><a href="http://zhidao.baidu.com/question/38976693.html" rel="external nofollow noopener noreferrer" target="_blank">java.sql.SQLException: 对只转发结果集的无效操作</a></p>
</blockquote>
<p><code>stat = conn.createStatement();</code>改为 <code>stmt=conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);</code>就可以了</p>
<p>分析: 异常出现于移动结果集的指针时,原因是在生成statement对象的时候提供的参数不同<br>无参数的那个方法使用的是默认参数,<code>statement</code>执行后得到的结果集类型为 <code>ResultSet.TYPE_FORWARD_ONLY</code>.这种类型的结果集只能通过<code>rs.next();</code>方法逐条读取,使用其他方法就会报异常. 如果想执行一些复杂的移动结果集指针的操作就要使用其他参数了<br>顺便简单介绍一下各个参数:</p>
<ol>
<li><code>ResultSet.TYPE_FORWARD_ONLY</code>   (略)</li>
<li><code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>  双向滚动，但不及时更新，就是如果数据库里的数据修改过，并不在ResultSet中反应出来。</li>
<li><code>ResultSet.TYPE_SCROLL_SENSITIVE</code>  双向滚动，并及时跟踪数据库里的更新,以便更改ResultSet中的数据。</li>
<li><code>ResultSet.CONCUR_READ_ONLY</code>  只读取ResultSet</li>
<li><code>ResultSet.CONCUR_UPDATABLE</code>  用ResultSet更新数据库</li>
</ol>
<hr>
<h3 id="bean-user-not-found-within-scope"><a href="#bean-user-not-found-within-scope" class="headerlink" title="bean user not found within scope"></a>bean user not found within scope</h3><blockquote>
<p><a href="http://bbs.csdn.net/topics/290064466" rel="external nofollow noopener noreferrer" target="_blank">bean user not found within scope</a></p>
</blockquote>
<p>如果是<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:useBean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">type</span>=<span class="string">"bean.Bean_person"</span> <span class="attr">scope</span>=<span class="string">"request"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>把他改成<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:useBean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"bean.Bean_person"</span> <span class="attr">scope</span>=<span class="string">"request"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="PrintWriter-中文乱码"><a href="#PrintWriter-中文乱码" class="headerlink" title="PrintWriter 中文乱码"></a>PrintWriter 中文乱码</h3><blockquote>
<p><a href="http://www.cnblogs.com/mohe/p/3287306.html" rel="external nofollow noopener noreferrer" target="_blank">关于Servlet的PrintWriter 中文乱码问题</a></p>
</blockquote>
<p>指定字符集为<code>UTF-8</code>即可<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">""</span>);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="配置filter拦截路径"><a href="#配置filter拦截路径" class="headerlink" title="配置filter拦截路径"></a>配置filter拦截路径</h3><blockquote>
<p><a href="http://www.iteye.com/problems/40229" rel="external nofollow noopener noreferrer" target="_blank">请问为什么这个filter配置不对呢</a></p>
</blockquote>
<p>Servlet JSR（2.3） 11.2章在web应用描述文件中，匹配的定义如下：<br>以’/‘开始，以’/<em> ‘为结尾的字符串,用作路径匹配<br>以’</em>.’开始的字符串，用作扩展名匹配<br>包含’/‘字符串，定义一个默认的servlet。如匹配的servlet路径是请求URI路径的最小上下文路径，路经的info为空。<br>其它的字符串用作精确的匹配。</p>
<p>如果要拦截”/page/<em> .jsp”,应该配置”/page/</em> “,然后再到filter中判断后缀是否为”jsp”</p>
<hr>
<h3 id="“-lt-include-file-quot-quot-gt-，-lt-jsp-include-page-quot-quot-gt-与-lt-c-import-url-quot-quot-gt-的应用及区别”"><a href="#“-lt-include-file-quot-quot-gt-，-lt-jsp-include-page-quot-quot-gt-与-lt-c-import-url-quot-quot-gt-的应用及区别”" class="headerlink" title="“&lt;%@ include file=&quot;&quot; %&gt; ，&lt;jsp:include page=&quot;&quot;&gt; 与 &lt;c:import url=&quot;&quot; /&gt; 的应用及区别”"></a>“<code>&lt;%@ include file=&quot;&quot; %&gt;</code> ，<code>&lt;jsp:include page=&quot;&quot;&gt;</code> 与 <code>&lt;c:import url=&quot;&quot; /&gt;</code> 的应用及区别”</h3><blockquote>
<p><a href="http://jackroomage.iteye.com/blog/1868358" rel="external nofollow noopener noreferrer" target="_blank"><code>&lt;%@ include file=&quot;&quot; %&gt;</code> ，<code>&lt;jsp:include page=&quot;&quot;&gt;</code> 与 <code>&lt;c:import url=&quot;&quot; /&gt;</code> 的应用及区别</a></p>
</blockquote>
<ul>
<li><p><code>&lt;%@ include file=&quot;&quot; %&gt;</code><br>伪指令在某些网站上有其用武之地。例如，如果站点包含一些（如果有变化，也很少）几乎没有变化的页眉、页脚和导航文件，那么基本的 include 伪指令是这些组件的最佳选项。由于 include 伪指令采用了高速缓存，因此只需放入包含文件一次，其内容就会被高速缓存，其结果会是极大地提高了站点的性能。</p>
</li>
<li><p><code>&lt;jsp:include page=&quot;&quot;&gt;</code><br>flush 指示在读入包含内容之前是否清空任何现有的缓冲区。JSP 1.1 中需要 flush 属性，因此，如果代码中不用它，会得到一个错误。但是，在 JSP 1.2 中， flush 属性缺省为 false<br>设置flush为true，就是说，如果你的缓冲区的内容很多了，就将数据读出，以免数据泄漏，造成错误。服务器端页面缓冲，大致的意思是，在将生成的HTML代码送到客户端前，先在服务器端内存中保留，因为解释JSP或Servlet变成HTML是一步步进行的，可以在服务器端生成完HTML或生成一部分HTML（所占用字节数已达到指定的缓冲字节数）后再送到客户。如果不缓冲，就会解释生成一句HTML就向客户端送一句。<br>你还可以用<a href="jsp:param" rel="external nofollow noopener noreferrer" target="_blank">jsp:param</a>传递一个或多个参数给JSP 网页。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">"header.jsp"</span> <span class="attr">flush</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">name</span>=<span class="string">"pageTitle"</span> <span class="attr">value</span>=<span class="string">"newInstance.com"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">name</span>=<span class="string">"pageSlogan"</span> <span class="attr">value</span>=<span class="string">" "</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp:include</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;c:import url=&quot;&quot; /&gt;</code><br><code>&lt;c:import&gt;</code> 标签的功能类似于<code>&lt;jsp:include &gt;</code>,但是相比来说还是<code>&lt;c:import&gt;</code>标签的功能更强大一些。<code>&lt;jsp:include &gt;</code>标签只能导入同一个web容器内的资源，而<code>&lt;c:import&gt;</code>除此之外也可以导入外网的资源。同时<code>&lt;c:import&gt;</code>也可以把页面内容插入到页面中，还可以把内容保存到String对象中。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:import</span> <span class="attr">url</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">var</span>=<span class="string">"urlStr"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;urlStr&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="对request-getSession理解"><a href="#对request-getSession理解" class="headerlink" title="对request.getSession理解"></a>对<code>request.getSession</code>理解</h3><blockquote>
<p><a href="http://blog.csdn.net/gaolinwu/article/details/7285783" rel="external nofollow noopener noreferrer" target="_blank">关于request.getSession(true/false/null)的区别</a><br><a href="http://blog.csdn.net/xxd851116/article/details/4296866" rel="external nofollow noopener noreferrer" target="_blank">对request.getSession(false)的理解（附程序员常疏忽的一个漏洞）</a></p>
</blockquote>
<p><strong><code>getSession(boolean create)</code></strong>意思是返回当前reqeust中的HttpSession ，如果当前reqeust中的HttpSession 为null，当create为true，就创建一个新的Session，否则返回null；</p>
<p>简而言之：</p>
<p><code>HttpServletRequest.getSession(ture)</code> 等同于 <strong>HttpServletRequest.getSession()</strong>;<br><code>HttpServletRequest.getSession(false)</code> 等同于<strong>如果当前Session没有就为null</strong>；</p>
<p>当向Session中存取登录信息时，一般建议：<code>HttpSession session =request.getSession()</code>;<br>当从Session中获取登录信息时，一般建议：<code>HttpSession session =request.getSession(false)</code>;</p>
<hr>
<h3 id="jstl的相关标签"><a href="#jstl的相关标签" class="headerlink" title="jstl的相关标签"></a>jstl的相关标签</h3><h4 id="迭代标签"><a href="#迭代标签" class="headerlink" title="迭代标签"></a>迭代标签</h4><blockquote>
<p><a href="http://blog.csdn.net/honey_claire/article/details/7664165" rel="external nofollow noopener noreferrer" target="_blank">jstl中&lt;c:forEach&gt;的用法</a><br><a href="http://www.cnblogs.com/qingyuanintel/archive/2012/11/29/2794154.html" rel="external nofollow noopener noreferrer" target="_blank">C:forEach 使用方法</a></p>
</blockquote>
<p>jstl中的<code>&lt;c:forEach&gt;</code>标签用于迭代需要的数组。<br>使用jstl标签都需要在页面中引用jstl标签库</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;c:forEach&gt;</code>的语法定义如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"item"</span> <span class="attr">items</span>=<span class="string">"$&#123;list&#125;"</span> <span class="attr">varStatus</span>=<span class="string">"i"</span> <span class="attr">begin</span>=<span class="string">"1"</span> <span class="attr">end</span>=<span class="string">"10"</span> <span class="attr">step</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  $&#123;item&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>标签有如下属性:</p>
<ul>
<li>var: 需要迭代的参数名称</li>
<li>items: 需迭代的集合</li>
<li>varStatus: 迭代变量的名称，可以通过它来访问自身的信息</li>
<li>begin: 迭代开始的位置</li>
<li>end: 迭代结束的位置</li>
<li>step: 迭代的步长。</li>
</ul>
<p><code>varStatus</code>包含了一系列的特性，它们描述了当前的迭代状态，主要有</p>
<ul>
<li>current: 迭代至当前集合众的项</li>
<li>index: 当前的迭代索引</li>
<li>count: 集合的长度</li>
<li>first: 判断是否为集合第一个元素，返回类型为boolean</li>
<li>last: 判断是否为集合最后一个元素，返回类型为boolean</li>
<li>begin: 获取迭代开始的位置</li>
<li>end: 获取迭代结束的位置</li>
<li>step: 获取迭代步长</li>
</ul>
<hr>
<h4 id="判断标签"><a href="#判断标签" class="headerlink" title="判断标签"></a>判断标签</h4><blockquote>
<p><a href="http://blog.csdn.net/xiyuan1999/article/details/4412009" rel="external nofollow noopener noreferrer" target="_blank">JSTL 的 if else : 有 c:if 没有 else 的处理</a><br><a href="http://tianhandigeng.iteye.com/blog/938253" rel="external nofollow noopener noreferrer" target="_blank">用jstl的if或when标签判断字符串是否为空</a><br><a href="http://blog.csdn.net/queenjade/article/details/7444059" rel="external nofollow noopener noreferrer" target="_blank">JSTL: empty 可以减少很多繁冗的判空</a></p>
</blockquote>
<p>在jstl中判断可以使用<code>&lt;c:if test=&quot;&quot;&gt;&lt;/c:if&gt;</code>标签来进行判断，但是却没有<code>&lt;c:else&gt;</code>这样的分支，如果要达到这种要求，可以使用<code>&lt;c:choose&gt;</code>标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">  ···</span><br><span class="line">  <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在以上代码中，当<code>&lt;c:when&gt;</code>分支的条件都不符合时，则会进入<code>&lt;c:otherwise&gt;</code>分支。</p>
<p>当判断字符串是否为空时，除了可以使用<code>&lt;c:if test=&quot;${str != &#39;&#39;}&quot;&gt;</code>之外，还可以使用<code>empty</code>关键字来判断，如<code>&lt;c:if test=&quot;${! empty str}&quot;&gt;</code>.不仅仅如此，<code>empty</code>还可以用来判断集合是否为空等。</p>
<hr>
<h4 id="使用fmt标签显示小数"><a href="#使用fmt标签显示小数" class="headerlink" title="使用fmt标签显示小数"></a>使用fmt标签显示小数</h4><p>需要另外引入标签库</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@tagliburi="http:</span>//<span class="attr">java.sun.com</span>/<span class="attr">jsp</span>/<span class="attr">jstl</span>/<span class="attr">fmt</span>"<span class="attr">prefix</span>=<span class="string">"fmt"</span>%&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;fmt:formatNumber&gt;</code>标签可以用来格式化需要的数字，例如如果需要输出的数字为两位小数，则可以使用它</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"balance"</span> <span class="attr">value</span>=<span class="string">"112.345"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fmt:formatNumber</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">maxFractionDigits</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"$&#123;balance&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>maxFractionDigits</code>属性表示小数点后最大的位数，关于<code>formatNumber</code>的其他参数可以参考<a href="http://www.w3cschool.cc/jsp/jstl-format-formatnumber-tag.html" rel="external nofollow noopener noreferrer" target="_blank">这里</a>.</p>
<hr>
<h4 id="fn函数"><a href="#fn函数" class="headerlink" title="fn函数"></a>fn函数</h4><p><a href="http://blog.csdn.net/donghustone/article/details/6711999" rel="external nofollow noopener noreferrer" target="_blank">JSTL（fn函数）</a></p>
<p>首先引入函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"fn"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>fn</code>主要有如下函数</p>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>fn:contains(string, substring)</td>
<td style="text-align:left">判断string是否包含substring</td>
</tr>
<tr>
<td>fn:containsIgnoreCase(string, substring)</td>
<td style="text-align:left">判断string是否包含substring(不计大小写)</td>
</tr>
<tr>
<td>fn:endsWith(string, suffix)</td>
<td style="text-align:left">判断string是否以suffix结尾</td>
</tr>
<tr>
<td>fn:escapeXml(string)</td>
<td style="text-align:left">跳过可以作为XML标记的字符</td>
</tr>
<tr>
<td>fn:indexOf(string, substring)</td>
<td style="text-align:left">返回substring第一次在string出现的位置</td>
</tr>
<tr>
<td>fn:join(array, separator)</td>
<td style="text-align:left">形成一个字符串以array+separator组成</td>
</tr>
<tr>
<td>fn:length(item)</td>
<td style="text-align:left">返回item的长度 String/Collection等</td>
</tr>
<tr>
<td>fn:replace(string, before, after)</td>
<td style="text-align:left">在string中用after替换掉before字符串</td>
</tr>
<tr>
<td>fn:split(string, separator)</td>
<td style="text-align:left">将string通过separator分割成数组</td>
</tr>
<tr>
<td>fn:substring(string, begin, end)</td>
<td style="text-align:left">通过开始位置begin与结束位置end从string截取子字符串</td>
</tr>
<tr>
<td>fn:substringAfter(string, substring)</td>
<td style="text-align:left">返回字符串在指定子串之后的子集</td>
</tr>
<tr>
<td>fn:substringBefore(string, substring)</td>
<td style="text-align:left">返回字符串在指定子串之前的子集</td>
</tr>
<tr>
<td>fn:toLowerCase(string)</td>
<td style="text-align:left">转换为小写</td>
</tr>
<tr>
<td>fn:toUpperCase(string)</td>
<td style="text-align:left">转换为大写</td>
</tr>
<tr>
<td>fn:trim(string)</td>
<td style="text-align:left">去除首位空格</td>
</tr>
</tbody>
</table>
<p>具体示例可以查看<a href="http://www.w3cschool.cc/jsp/jsp-jstl.html" rel="external nofollow noopener noreferrer" target="_blank">JSTL函数</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>tomcat</tag>
        <tag>jdbc</tag>
        <tag>servlet</tag>
        <tag>filter</tag>
        <tag>jsp</tag>
      </tags>
  </entry>
  <entry>
    <title>stream中去除相同的元素</title>
    <url>/java-stream-duplicate/</url>
    <content><![CDATA[<p>给一个集合中的元素<em>去重</em>算是一个比较常见的任务需求了。这里记录一下通过<code>stream</code>来对元素去重操作的两种方法。</p>
<h4 id="distinct方法"><a href="#distinct方法" class="headerlink" title="distinct方法"></a>distinct方法</h4><p><code>stream</code>本身提供了<code>distinct()</code>这样的方法来对集合中的元素进行去重操作。不过默认情况下对于集合中的自定义类是无能为力的。<br>看了下关于<code>distinct()</code>中的注释，他是利用<code>equals()</code>方法来判断集合中的对象是否完全相等来去重的。<br>因此如果是自定义类，可以通过重写<code>equals()</code>方法来达到目的:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123; name: \""</span> + name + <span class="string">"\", age: "</span> + age + <span class="string">" &#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span> || getClass() != obj.getClass()) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">        Student s = (Student)obj;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.name != <span class="keyword">null</span>) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.name.equals(s.name)) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age != s.age) &#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里定义了一个Student类，然后通过判断name与age属性来判断对象是否相等。<br>需要注意的是，点开<code>equals()</code>方法会看到以下注释：</p>
<blockquote>
<p>请注意，通常每当重写此方法时，都必须重写{@code hashCode}方法，以便维护{@code hashCode}方法的常规协定，该协定规定相等的对象必须具有相等的哈希码。</p>
</blockquote>
<p>因此也不要忘记了重写<code>hashCode()</code>方法。接下来测试一下。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> Random().ints(<span class="number">10</span>, <span class="number">10</span>, <span class="number">16</span>).boxed()</span><br><span class="line">                .map(i -&gt; <span class="keyword">new</span> Student(String.valueOf((<span class="keyword">char</span>)(<span class="number">55</span>+i)), i)).collect(Collectors.toList());</span><br><span class="line">students.forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">students.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>
<p>输出的结果为:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; name: &quot;C&quot;, age: 12&quot;&#125;</span><br><span class="line">&#123; name: &quot;E&quot;, age: 14&quot;&#125;</span><br><span class="line">&#123; name: &quot;A&quot;, age: 10&quot;&#125;</span><br><span class="line">&#123; name: &quot;A&quot;, age: 10&quot;&#125;</span><br><span class="line">&#123; name: &quot;C&quot;, age: 12&quot;&#125;</span><br><span class="line">&#123; name: &quot;A&quot;, age: 10&quot;&#125;</span><br><span class="line">&#123; name: &quot;C&quot;, age: 12&quot;&#125;</span><br><span class="line">&#123; name: &quot;A&quot;, age: 10&quot;&#125;</span><br><span class="line">&#123; name: &quot;F&quot;, age: 15&quot;&#125;</span><br><span class="line">&#123; name: &quot;B&quot;, age: 11&quot;&#125;</span><br><span class="line">-----------------------------------</span><br><span class="line">&#123; name: &quot;C&quot;, age: 12&quot;&#125;</span><br><span class="line">&#123; name: &quot;E&quot;, age: 14&quot;&#125;</span><br><span class="line">&#123; name: &quot;A&quot;, age: 10&quot;&#125;</span><br><span class="line">&#123; name: &quot;F&quot;, age: 15&quot;&#125;</span><br><span class="line">&#123; name: &quot;B&quot;, age: 11&quot;&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到<code>distinct()</code>方法已经生效了。</p>
<h4 id="filter方法"><a href="#filter方法" class="headerlink" title="filter方法"></a>filter方法</h4><p>如果不想修改自定义类的<code>equals()</code>与<code>hashCode()</code>方法，就可以利用<code>filter</code>方法来过滤掉重复的类。<br><code>filter</code>方法接收的是一个<code>Predicate</code>,他可以筛选出在<code>stream</code>中与该<code>Predicate</code>匹配的元素，<br>因此可以写个去重的<code>Predicate</code>来达到目的：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKeys</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ?&gt;... keyExtractors)</span> </span>&#123;</span><br><span class="line">    Map&lt;Object, Boolean&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; &#123;</span><br><span class="line">        List&lt;?&gt; keys = Arrays.stream(keyExtractors).map(k -&gt; k.apply(t)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> map.putIfAbsent(keys, Boolean.TRUE) == <span class="keyword">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Function</code>有点类似匿名函数，他通过传入一个参数，然后可以返回一个结果。<br>这里通过将这些<code>Function</code>的执行结果组成一个列表当作<code>Map</code>的key存入到指定的<code>Map</code>中，<br><code>putIfAbset</code>方法与<code>put</code>方法不同点在于它并不会覆盖掉<code>Map</code>中已存在的键值对，并且还会返回该键所对应的值。<br>所以如果<code>Map</code>中没有该键值对时，必然返回的值为<code>null</code>。<br>因此第一次放入<code>Map</code>中的元素都能成功放入，返回的都是<code>null</code>,如果<code>Map</code>本身已包含了该元素，则不会返回<code>null</code>，说明该元素已经重复了。<br>这里主要是通过键来过滤元素，对值的要求不高，使用<code>Boolean.True</code>对象是因为它占用的字节数较少。<br>因为<code>stream</code>有可能通过<code>parallel()</code>方法来变成一个<code>parallelStream</code>,因此需要使用<code>ConcurrentHashMap</code>来确保多线程下的访问。<br>最终配合<code>filter()</code>方法可以过滤掉重复的元素。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">students.stream().filter(distinctByKeys(Student::getName, Student::getAge)).forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>
<p>最终输出结果与上边过滤结果一致。</p>
<p>如果只是想要利用类的单个属性来过滤，则直接将<code>Function</code>的执行结果作为key即可：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, Object&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">    Map&lt;Object, Boolean&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">students.stream().filter(distinctByKey(Student::getName)).forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetty相关知识</title>
    <url>/jetty-flushbonading/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://wiki.eclipse.org/Jetty/Tutorial/Embedding_Jetty" rel="external nofollow noopener noreferrer" target="_blank">Jetty/Tutorial/Embedding Jetty</a><br><a href="http://stackoverflow.com/questions/19530806/java-jetty-how-to-add-filter-to-embedded-jetty" rel="external nofollow noopener noreferrer" target="_blank">Java / Jetty: How to Add Filter to Embedded Jetty</a><br><a href="http://mouselearnjava.iteye.com/blog/2156221" rel="external nofollow noopener noreferrer" target="_blank">EnumSet的几个例子</a></p>
</blockquote>
<h4 id="使用代码运行jetty"><a href="#使用代码运行jetty" class="headerlink" title="使用代码运行jetty"></a>使用代码运行jetty</h4><p>运行一个war包<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneWebApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String jetty_home = System.getProperty(<span class="string">"jetty.home"</span>,<span class="string">".."</span>);</span><br><span class="line"> </span><br><span class="line">        Server server = <span class="keyword">new</span> Server(<span class="number">8080</span>);</span><br><span class="line"> </span><br><span class="line">        WebAppContext webapp = <span class="keyword">new</span> WebAppContext();</span><br><span class="line">        webapp.setContextPath(<span class="string">"/"</span>);</span><br><span class="line">        webapp.setWar(jetty_home+<span class="string">"/webapps/test.war"</span>);</span><br><span class="line">        server.setHandler(webapp);</span><br><span class="line"> </span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行一个web项目<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneWebAppUnassembled</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Server server = <span class="keyword">new</span> Server(<span class="number">8080</span>);</span><br><span class="line"> </span><br><span class="line">        WebAppContext context = <span class="keyword">new</span> WebAppContext();</span><br><span class="line">        context.setDescriptor(webapp+<span class="string">"/WEB-INF/web.xml"</span>);</span><br><span class="line">        context.setResourceBase(<span class="string">"../test-jetty-webapp/src/main/webapp"</span>);</span><br><span class="line">        context.setContextPath(<span class="string">"/"</span>);</span><br><span class="line">        context.setParentLoaderPriority(<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">        server.setHandler(context);</span><br><span class="line"> </span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行spring mvc项目<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Server server = <span class="keyword">new</span> Server(<span class="number">8090</span>);</span><br><span class="line">    WebAppContext context = <span class="keyword">new</span> WebAppContext();</span><br><span class="line">    <span class="comment">//添加log4j监听器</span></span><br><span class="line">    context.setInitParameter(<span class="string">"log4jConfigLocation"</span>, <span class="string">"classpath:log4j.properties"</span>);</span><br><span class="line">    context.addEventListener(<span class="keyword">new</span> Log4jConfigListener());</span><br><span class="line">    <span class="comment">//设置访问路径</span></span><br><span class="line">    context.setContextPath(<span class="string">"/test1"</span>);</span><br><span class="line">    <span class="comment">//设置页面资源文件夹</span></span><br><span class="line">    context.setResourceBase(<span class="string">"../test1/src/main/webapp"</span>);</span><br><span class="line">    EnumSet&lt;DispatcherType&gt; es = EnumSet.of(DispatcherType.ASYNC,DispatcherType.ERROR,DispatcherType.REQUEST,DispatcherType.FORWARD);</span><br><span class="line">    <span class="comment">//添加Filter</span></span><br><span class="line">    context.addFilter(new FilterHolder(WebAppFilter.class), "/*", es);</span><br><span class="line">    AnnotationConfigWebApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">    <span class="comment">//加载spring注解配置类</span></span><br><span class="line">    ctx.register(WebMvcConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    DispatcherServlet ds = <span class="keyword">new</span> DispatcherServlet(ctx);</span><br><span class="line">    context.addServlet(<span class="keyword">new</span> ServletHolder(ds), <span class="string">"/"</span>);</span><br><span class="line">    <span class="comment">//添加servlet</span></span><br><span class="line">    context.addServlet(HelloServlet.class, "/helloServlet");</span><br><span class="line">    </span><br><span class="line">    server.setHandler(context);</span><br><span class="line">    </span><br><span class="line">    server.start();</span><br><span class="line">    server.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="jetty相关配置"><a href="#jetty相关配置" class="headerlink" title="jetty相关配置"></a>jetty相关配置</h4><blockquote>
<p>来自<br><a href="http://blog.csdn.net/fjslovejhl/article/details/15501091" rel="external nofollow noopener noreferrer" target="_blank">jetty配置文件详解</a><br><a href="http://www.cnblogs.com/shitou/archive/2011/05/30/2063423.html" rel="external nofollow noopener noreferrer" target="_blank">Jetty 的配置</a></p>
</blockquote>
<p>Jetty 的配置文件放在 etc 路径下,jetty.xml文件是默认的配置文件,jetty-jmx.xml是启动 JMX 控制的配置文件; jetty-plus.xm1文件是在增加 Jetty 扩展功能的配置文件。启动Jetty的命令为(配置环境路径或者进入Jetty目录下执行下面命令):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar startup.jar</span><br></pre></td></tr></table></figure></p>
<p>默认使用jetty.xm1文件时启动Jetty，即与如下命令效果相同<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar startup.jar etc/jetty.xml</span><br></pre></td></tr></table></figure></p>
<p>启动时也可以指定多个配置文件，可输入如下命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar startup.jaretc/jetty.xml etc/jetty-plus.xml</span><br></pre></td></tr></table></figure></p>
<p>打开 Jetty 配置文件，该配置文件的根元素是<code>Configure</code>，另外还会看到有如下的配<br>置元素。</p>
<ul>
<li><strong>Set</strong>: 相当于调用 setxx 方法。</li>
<li><strong>Get</strong>: 相当于调用 getXxx 方法。</li>
<li><strong>New</strong>: 创建某个类的实例。</li>
<li><strong>Arg</strong>: 为方法或构造器传入参数。</li>
<li><strong>Array</strong>: 设置一个数组。</li>
<li><strong>Item</strong>: 设置数组或集合的-J页。</li>
<li><strong>Call</strong>: 调用某个方法。</li>
</ul>
<p>Jetty 是个嵌入式 Web 容器，因此它的服务对应一个 <code>Server</code> 实例，可以看到配置文件中有如下片段:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置了一个Jetty服务器进程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configure</span> <span class="attr">id</span>=<span class="string">"Server"</span> <span class="attr">class</span>=<span class="string">"org.mortbay.jetty.Server"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>上述是整个配置文件的root元素，读到它的时候会创建一个server对象，当然这个server对象的创建采用的是默认构造函数，因而可以理解为它是一个空的server</p>
<p>把相应的war包丢到jetty目录下的webapps目录里即可运行，在jetty目录下新建一个文件夹work，这样war包解压的文件就不会放到默认临时文件夹而放到work目录下</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Jetty</category>
      </categories>
      <tags>
        <tag>Jetty</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery零散知识点整理</title>
    <url>/jquery-base/</url>
    <content><![CDATA[<p>收集一些平时使用jQuery碰到的问题解决方法及相关知识点。</p>
<a id="more"></a>
<h3 id="手风琴特效"><a href="#手风琴特效" class="headerlink" title="手风琴特效"></a>手风琴特效</h3><blockquote>
<p><a href="http://roshanbh.com.np/2008/06/accordion-menu-using-jquery.html" rel="external nofollow noopener noreferrer" target="_blank">Making accordion menu using jquery</a></p>
</blockquote>
<p>html<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"firstpane"</span> <span class="attr">class</span>=<span class="string">"menu_list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"menu_head"</span>&gt;</span>Header-1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu_body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"menu_head"</span>&gt;</span>Header-2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu_body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"menu_head"</span>&gt;</span>Header-3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu_body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>css<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.menu_list</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu_head</span> &#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">cursor</span>: pointer;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">1px</span>;</span><br><span class="line">       <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu_body</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu_body</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#006699</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#EFEFEF</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:bold;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu_body</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>:underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>js(需要引入jquery文件)<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//点击事件，如果需要移动鼠标出效果则是mouseover方法</span></span><br><span class="line">$(<span class="string">"#firstpane p.menu_head"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).next(<span class="string">"div.menu_body"</span>).slideToggle(<span class="number">300</span>).siblings(<span class="string">"div.menu_body"</span>).slideUp(<span class="string">"slow"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="jquery跳出each循环"><a href="#jquery跳出each循环" class="headerlink" title="jquery跳出each循环"></a>jquery跳出each循环</h3><blockquote>
<p><a href="http://www.cnblogs.com/abllyboy/archive/2011/03/11/1981437.html" rel="external nofollow noopener noreferrer" target="_blank">Jquery跳出each循环</a></p>
</blockquote>
<p>jquery each循环中，<code>return false</code>则是<code>break</code>功能，<code>return true</code>则是<code>continue</code>功能</p>
<hr>
<h3 id="判断div是否隐藏"><a href="#判断div是否隐藏" class="headerlink" title="判断div是否隐藏"></a>判断<code>div</code>是否隐藏</h3><blockquote>
<p>来自 <a href="http://blog.csdn.net/ddxkjddx/article/details/5766603" rel="external nofollow noopener noreferrer" target="_blank">jquery判断div是否隐藏实例</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#div_id"</span>).is(<span class="string">":visible"</span>);<span class="comment">//是否显示</span></span><br><span class="line">$(<span class="string">"#div_id"</span>).is(<span class="string">":hidden"</span>);<span class="comment">//是否隐藏</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="选择非只读的控件"><a href="#选择非只读的控件" class="headerlink" title="选择非只读的控件"></a>选择非只读的控件</h3><blockquote>
<p>来自 <a href="http://stackoverflow.com/questions/3708764/jquery-not-readonly-selector" rel="external nofollow noopener noreferrer" target="_blank">jQuery “not readonly” selector</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"input[type=text]:not([readonly])"</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="比较日期大小"><a href="#比较日期大小" class="headerlink" title="比较日期大小"></a>比较日期大小</h3><blockquote>
<p>来自 <a href="http://blog.csdn.net/sxdtzhaoxinguo/article/details/11291291" rel="external nofollow noopener noreferrer" target="_blank">【jQuery日期处理】两个时间大小的比较</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkDate</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(val);</span><br><span class="line">	<span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">	<span class="keyword">if</span> (d1 &lt; d2) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="jquery-post方法提交json数据不能被解析"><a href="#jquery-post方法提交json数据不能被解析" class="headerlink" title="jquery post方法提交json数据不能被解析"></a>jquery post方法提交json数据不能被解析</h3><blockquote>
<p><a href="http://blog.csdn.net/pzp_118/article/details/8423925" rel="external nofollow noopener noreferrer" target="_blank">使用jQuery POST提交数据返回的JSON是字符串不能解析为JSON对象</a></p>
</blockquote>
<p><code>$.post</code>方法最后一个参数指定返回数据类型，写明json即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.post(url,data,function()&#123;&#125;,&apos;json&apos;);</span><br></pre></td></tr></table></figure></p>
<h3 id="jquery提交post数据在firefox正常在chrome和ie下乱码解决"><a href="#jquery提交post数据在firefox正常在chrome和ie下乱码解决" class="headerlink" title="jquery提交post数据在firefox正常在chrome和ie下乱码解决"></a>jquery提交post数据在firefox正常在chrome和ie下乱码解决</h3><blockquote>
<p>来自 <a href="http://blog.i5a6.com/973.html" rel="external nofollow noopener noreferrer" target="_blank">jquery提交post数据在firefox正常在chrome和ie下乱码解决</a></p>
</blockquote>
<p>1.使用<code>$.ajaxSetup</code>指定字符集为”UTF-8”<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  contentType: &quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span><br><span class="line">&#125;);</span><br><span class="line">$.post(url,data,function()&#123;&#125;,&apos;json&apos;);</span><br></pre></td></tr></table></figure></p>
<p>2.在<code>$.ajax</code>方法中使用<code>contentType</code>指定字符集<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url:url,</span><br><span class="line">  type:&quot;POST&quot;,</span><br><span class="line">  data:data,</span><br><span class="line">  contentType:&quot;application/x-www-form-urlencoded; charset=utf-8&quot;,</span><br><span class="line">  dataType:&quot;json&quot;,</span><br><span class="line">  success: function()&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="JQuery-ajax向后台传递数组"><a href="#JQuery-ajax向后台传递数组" class="headerlink" title="JQuery ajax向后台传递数组"></a>JQuery ajax向后台传递数组</h3><blockquote>
<p><a href="http://empirel.iteye.com/blog/1763010" rel="external nofollow noopener noreferrer" target="_blank">JQuery Ajax向后台传递数组</a></p>
</blockquote>
<p>前端传送是，最好指定参数名带数组的标识<code>[]</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url:url,</span><br><span class="line">  type:&quot;POST&quot;,</span><br><span class="line">  data:&#123;&quot;aa[]&quot;:new Array&#125;</span><br><span class="line">  success: function()&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>后台接收时，使用<code>getParameterValues</code>方法即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String[] aa = request.getParameterValues();</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="jQuery中prop-方法和attr-方法的区别"><a href="#jQuery中prop-方法和attr-方法的区别" class="headerlink" title="jQuery中prop()方法和attr()方法的区别"></a>jQuery中<code>prop()</code>方法和<code>attr()</code>方法的区别</h3><blockquote>
<p><a href="http://lemmychrist.blog.163.com/blog/static/98732963201391485225489/" rel="external nofollow noopener noreferrer" target="_blank">jQuery中prop()方法和attr()方法的区别</a></p>
</blockquote>
<p><code>prop()</code>方法是jQuery1.6以后出现的方法，与<code>attr()</code>方法接近，都是对组件自身一些属性操作的方法，对于<code>async</code>,<code>autofocus</code>,<code>checked</code>,<code>location</code>,<code>multiple</code>,<code>readOnly</code>,<code>selected</code>这些属性可以使用<code>prop()</code>方法，其余的建议用<code>attr()</code>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input id=&quot;c1&quot; type=&quot;checkbox&quot; checked&gt;</span><br><span class="line">&lt;input id=&quot;c2&quot; type=&quot;checkbox&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">  //获取选中状态</span><br><span class="line">  $(&quot;#c1&quot;).prop(&quot;checked&quot;); //返回true</span><br><span class="line">  $(&quot;#c2&quot;).prop(&quot;checked&quot;); //返回false</span><br><span class="line">  $(&quot;#c1&quot;).attr(&quot;checked&quot;); //返回checked</span><br><span class="line">  $(&quot;#c2&quot;).attr(&quot;checked&quot;); //返回undefined</span><br><span class="line">  </span><br><span class="line">  //对选中进行操作</span><br><span class="line">  $(&quot;#c1&quot;).prop(&quot;checked&quot;,true); //取消用false</span><br><span class="line">  $(&quot;#c1&quot;).attr(&quot;checked&quot;,&quot;true&quot;);</span><br><span class="line">  //取消选中</span><br><span class="line">  $(&quot;#c1&quot;).removeAttr(&quot;checked&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>对于html5新属性<code>data-*</code>，如果使用<code>prop</code>则可以取值但无法赋值，<code>attr</code>则可以赋值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; id=&quot;t1&quot; data-test=&quot;t&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">  //取值</span><br><span class="line">  $(&quot;#t1&quot;).prop(&quot;data-test&quot;); //返回t</span><br><span class="line">  $(&quot;#t1&quot;).attr(&quot;data-test&quot;); //返回t</span><br><span class="line">  $(&quot;#t1&quot;).data(&quot;test&quot;); //返回t</span><br><span class="line">  </span><br><span class="line">  //赋值</span><br><span class="line">  $(&quot;#c1&quot;).attr(&quot;data-test&quot;,&quot;tt&quot;); </span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="jQuery-javascript获得网页的高度和宽度"><a href="#jQuery-javascript获得网页的高度和宽度" class="headerlink" title="jQuery,javascript获得网页的高度和宽度"></a>jQuery,javascript获得网页的高度和宽度</h3><blockquote>
<p><a href="http://blog.csdn.net/ljw520204/article/details/6925775" rel="external nofollow noopener noreferrer" target="_blank">jQuery,javascript获得网页的高度和宽度</a></p>
</blockquote>
<p><strong>javascript</strong><br>网页可见区域宽： <code>document.body.clientWidth</code><br>网页可见区域高： <code>document.body.clientHeight</code><br>网页可见区域宽： <code>document.body.offsetWidth</code> (包括边线的宽)<br>网页可见区域高： <code>document.body.offsetHeight</code> (包括边线的高)<br>网页正文全文宽： <code>document.body.scrollWidth</code><br>网页正文全文高： <code>document.body.scrollHeight</code><br>网页被卷去的高： <code>document.body.scrollTop</code><br>网页被卷去的左： <code>document.body.scrollLeft</code><br>网页正文部分上： <code>window.screenTop</code><br>网页正文部分左： <code>window.screenLeft</code><br>屏幕分辨率的高： <code>window.screen.height</code><br>屏幕分辨率的宽： <code>window.screen.width</code><br>屏幕可用工作区高度： <code>window.screen.availHeight</code><br>屏幕可用工作区宽度： <code>window.screen.availWidth</code></p>
<p><strong>jquery</strong><br>获取浏览器显示区域的高度 ： <code>$(window).height()</code>;<br>获取浏览器显示区域的宽度 ：<code>$(window).width()</code>;<br>获取页面的文档高度 ：<code>$(document).height()</code>;<br>获取页面的文档宽度 ：<code>$(document).width()</code>;<br>获取滚动条到顶部的垂直高度 ：<code>$(document).scrollTop()</code>;<br>获取滚动条到左边的垂直宽度 ：<code>$(document).scrollLeft()</code>; </p>
<p>计算元素位置和偏移量<br><code>offset</code>方法是一个很有用的方法，它返回包装集中第一个元素的偏移信息。默认情况下是相对body的偏移信息。结果包含 top和left两个属性。<br><code>offset(options, results)</code><br><code>options.relativeTo</code>　　指定相对计算偏移位置的祖先元素。这个元素应该是relative或absolute定位。省略则相对body。<br><code>options.scroll</code>　　是否把 滚动条计算在内，默认TRUE<br><code>options.padding</code>　　是否把padding计算在内，默认false<br><code>options.margin</code> 　　是否把margin计算在内，默认true<br><code>options.border</code>　　是否把边框计算在内，默认true </p>
<hr>
<h3 id="jQuery元素追加和删除"><a href="#jQuery元素追加和删除" class="headerlink" title="jQuery元素追加和删除"></a>jQuery元素追加和删除</h3><blockquote>
<p><a href="http://www.cnblogs.com/william-lin/archive/2012/08/12/2635402.html" rel="external nofollow noopener noreferrer" target="_blank">Jquery元素追加和删除</a></p>
</blockquote>
<p><strong>追加元素</strong><br><code>append()</code>: 向每个匹配的元素内追加内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;ul&quot;).append(&quot;&lt;li&gt;AA&lt;/li&gt;&quot;);</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;AA&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>appendTo()</code>: 该方法和append()相反<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;&lt;li&gt;AA&lt;/li&gt;&quot;).appendTo (&quot;ul&quot;);</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;AA&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>prepend()</code>:向每个匹配的元素内部前置内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;aa&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;p&quot;).prepend(&quot;&lt;b&gt;bb&lt;/b&gt;&quot;);</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;b&gt;bb&lt;/b&gt;aa&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>prependTo()</code>:该方法和prepend()相反<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;aa&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">$(&lt;b&gt;bb&lt;/b&gt;&quot;).prependTo(&quot;p&quot;);</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;b&gt;bb&lt;/b&gt;aa&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>after()</code>:在每个匹配的元素<strong>之后</strong>插入内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;aa&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;p&quot;).after(&quot;&lt;b&gt;bb&lt;/b&gt;&quot;);</span><br><span class="line"></span><br><span class="line">&lt;p&gt;aa&lt;/p&gt;&lt;b&gt;bb&lt;/b&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>insertAfter()</code>:该方法和after()相反<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;aa&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">$(&lt;b&gt;bb&lt;/b&gt;&quot;).insertAfter(&quot;p&quot;);</span><br><span class="line"></span><br><span class="line">&lt;p&gt;aa&lt;/p&gt;&lt;b&gt;bb&lt;/b&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>before()</code>:在每个匹配的元素<strong>之前</strong>插入内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;aa&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;p&quot;).before(&quot;&lt;b&gt;bb&lt;/b&gt;&quot;);</span><br><span class="line"></span><br><span class="line">&lt;b&gt;bb&lt;/b&gt;&lt;p&gt;aa&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>insertBefore()</code>:该方法和before()相反<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;aa&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">$(&lt;b&gt;bb&lt;/b&gt;&quot;).insertBefore(&quot;p&quot;);</span><br><span class="line"></span><br><span class="line">&lt;b&gt;bb&lt;/b&gt;&lt;p&gt;aa&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>删除元素</strong><br><code>remove()</code>:删除元素<br><code>empty()</code>:清空元素文本内容，元素本身还存在</p>
<hr>
<h3 id="jquery选择器"><a href="#jquery选择器" class="headerlink" title="jquery选择器"></a>jquery选择器</h3><blockquote>
<p><a href="http://www.cnblogs.com/zhangziqiu/archive/2009/05/03/jQuery-Learn-2.html" rel="external nofollow noopener noreferrer" target="_blank">从零开始学习jQuery (二) 万能的选择器</a></p>
</blockquote>
<p><strong>1. 基础选择器 Basics</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>#id</td>
<td>根据元素id选择</td>
<td><code>$(&quot;#tid&quot;)</code> 选择ID为tid的元素</td>
</tr>
<tr>
<td>element</td>
<td>根据元素的名称选择</td>
<td><code>$(&quot;a&quot;)</code> 选择所有<code>&lt;a&gt;</code>元素</td>
</tr>
<tr>
<td><code>.class</code></td>
<td>根据元素的css类选择</td>
<td><code>$(&quot;.imgClass&quot;)</code>选择所用CSS类为imgClass的元素</td>
</tr>
<tr>
<td><code>*</code></td>
<td>选择所有元素</td>
<td><code>$(&quot;*&quot;)</code>选择页面所有元素</td>
</tr>
<tr>
<td>selector1, selector2</td>
<td>可以将几个选择器用”,”分隔开然后再拼成一个选择器字符串.会同时选中这几个选择器匹配的内容.</td>
<td><code>$(&quot;#tid, a, .imgClass&quot;)</code></td>
</tr>
</tbody>
</table>
<p><strong>2.层次选择器 Hierarchy</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>ancestor descendant</td>
<td>使用”form input”的形式选中form中的所有input元素.即ancestor(祖先)为from, descendant(子孙)为input.</td>
<td><code>$(&quot;#tid input&quot;)</code> 选择ID为tid的元素中所有的input元素</td>
</tr>
<tr>
<td>parent &gt; child</td>
<td>选择parent的直接子节点child.  child必须包含在parent中并且父类是parent元素.</td>
<td><code>$(&quot;.myList&gt;li&quot;)</code>选择CSS类为myList元素中的直接子节点<code>&lt;li&gt;</code>对象</td>
</tr>
<tr>
<td>prev + next</td>
<td>prev和next是两个同级别的元素. 选中在prev元素后面的next元素</td>
<td><code>$(&quot;#tid+img&quot;)</code>选在id为hibiscus元素后面的img对象</td>
</tr>
<tr>
<td>prev ~ siblings</td>
<td>选择prev后面的根据siblings过滤的元素.siblings是过滤器</td>
<td><code>$(&quot;#someDiv~[title]&quot;)</code>选择id为someDiv的对象后面所有带有title属性的元素</td>
</tr>
</tbody>
</table>
<p><strong>3.基本过滤器 Basic Filters</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:first</code></td>
<td>匹配找到的第一个元素</td>
<td>查找表格的第一行:<code>$(&quot;tr:first&quot;)</code></td>
</tr>
<tr>
<td><code>:last</code></td>
<td>匹配找到的最后一个元素</td>
<td>查找表格的最后一行:<code>$(&quot;tr:last&quot;)</code></td>
</tr>
<tr>
<td><code>not(selector)</code></td>
<td>去除所有与给定选择器匹配的元素</td>
<td>查找所有未选中的 input 元素: <code>$(&quot;input:not(:checked)&quot;)</code></td>
</tr>
<tr>
<td><code>:even</code></td>
<td>匹配所有索引值为偶数的元素，从 0 开始计数</td>
<td>查找表格的偶数行:<code>$(&quot;tr:even&quot;)</code></td>
</tr>
<tr>
<td><code>:odd</code></td>
<td>匹配所有索引值为奇数的元素，从 0 开始计数</td>
<td>查找表格的奇数行:<code>$(&quot;tr:odd&quot;)</code></td>
</tr>
<tr>
<td><code>:eq(index)</code></td>
<td>匹配一个给定索引值的元素,index从 0 开始计数</td>
<td>查找第二行:<code>$(&quot;tr:eq(1)&quot;)</code></td>
</tr>
<tr>
<td><code>:gt(index)</code></td>
<td>匹配所有大于给定索引值的元素,index从 0 开始计数</td>
<td>查找第二第三行，即索引值是1和2，也就是比0大:<code>$(&quot;tr:gt(0)&quot;)</code></td>
</tr>
<tr>
<td><code>:lt(index)</code></td>
<td>匹配所有小于给定索引值的元素,index从 0 开始计数</td>
<td>查找第一第二行，即索引值是0和1，也就是比2小:<code>$(&quot;tr:lt(2)&quot;)</code></td>
</tr>
<tr>
<td><code>:header</code></td>
<td>选择所有h1,h2,h3一类的header标签</td>
<td>给页面内所有标题加上背景色: <code>$(&quot;:header&quot;).css(&quot;background&quot;, &quot;#EEE&quot;);</code></td>
</tr>
<tr>
<td><code>:animated</code></td>
<td>匹配所有正在执行动画效果的元素</td>
<td>查找不执行动画效果的div元素: <code>$(&quot;div:not(:animated)&quot;)</code></td>
</tr>
</tbody>
</table>
<p><strong>4. 内容过滤器 Content Filters</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:contains(text)</code></td>
<td>匹配包含给定文本的元素</td>
<td>查找所有包含 “John” 的 div 元素:<code>$(&quot;div:contains(&#39;John&#39;)&quot;)</code></td>
</tr>
<tr>
<td><code>:empty</code></td>
<td>匹配所有不包含子元素或者文本的空元素</td>
<td>查找所有不包含子元素或者文本的空元素:<code>$(&quot;td:empty&quot;)</code></td>
</tr>
<tr>
<td><code>:has(selector)</code></td>
<td>匹配含有选择器所匹配的元素的元素</td>
<td>给所有包含 p 元素的 div 元素添加一个 text 类: <code>$(&quot;div:has(p)&quot;).addClass(&quot;test&quot;);</code></td>
</tr>
<tr>
<td><code>:parent</code></td>
<td>匹配含有子元素或者文本的元素</td>
<td>查找所有含有子元素或者文本的 td 元素:<code>$(&quot;td:parent&quot;)</code></td>
</tr>
</tbody>
</table>
<p><strong>5.可见性过滤器  Visibility Filters</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:hidden</code></td>
<td>匹配所有的不可见元素</td>
<td>查找所有不可见的 tr 元素:<code>$(&quot;tr:hidden&quot;)</code></td>
</tr>
<tr>
<td><code>:visible</code></td>
<td>匹配所有的可见元素</td>
<td>查找所有可见的 tr 元素:<code>$(&quot;tr:visible&quot;)</code></td>
</tr>
</tbody>
</table>
<p><strong>6.属性过滤器 Attribute Filters</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[attribute]</code></td>
<td>匹配包含给定属性的元素</td>
<td>查找所有含有 id 属性的 div 元素: <code>$(&quot;div[id]&quot;)</code></td>
</tr>
<tr>
<td><code>[attribute=value]</code></td>
<td>匹配给定的属性是某个特定值的元素</td>
<td>查找所有 name 属性是 a 的 input 元素: <code>$(&quot;input[name=&#39;a&#39;]&quot;)</code></td>
</tr>
<tr>
<td><code>[attribute!=value]</code></td>
<td>匹配给定的属性不是某个特定值的元素</td>
<td>查找所有 name 属性不是 a 的 input 元素: <code>$(&quot;input[name!=&#39;a&#39;]&quot;)</code></td>
</tr>
<tr>
<td><code>[attribute^=value]</code></td>
<td>匹配给定的属性是以某些值开始的元素</td>
<td>查找所有 name 属性是以 a 开头的 input 元素 <code>$(&quot;input[name^=&#39;a&#39;]&quot;)</code></td>
</tr>
<tr>
<td><code>[attribute$=value]</code></td>
<td>匹配给定的属性是以某些值结尾的元素</td>
<td>查找所有 name 属性是以 a 结尾的 input 元素 <code>$(&quot;input[name$=&#39;a&#39;]&quot;)</code></td>
</tr>
<tr>
<td><code>[attribute*=value]</code></td>
<td>匹配给定的属性是以包含某些值的元素</td>
<td>查找所有 name 属性是包含 a 的 input 元素 <code>$(&quot;input[name*=&#39;a&#39;]&quot;)</code></td>
</tr>
<tr>
<td>[attributeFilter1][attributeFilter2]</td>
<td>复合属性选择器，需要同时满足多个条件时使用。</td>
<td>找到所有含有 id 属性，并且它的 name 属性是以 man 结尾的:<code>$(&quot;input[id][name$=&#39;man&#39;]&quot;)</code></td>
</tr>
</tbody>
</table>
<p><strong>7.子元素过滤器 Child Filters</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>:nth-child(index/even/odd/equation)</td>
<td>匹配其父元素下的第N个子或奇偶元素</td>
<td>在每个 ul 查找第 2 个li: <code>$(&quot;ul li:nth-child(2)&quot;)</code></td>
</tr>
<tr>
<td><code>:first-child</code></td>
<td>匹配第一个子元素</td>
<td>在每个 ul 中查找第一个 li: <code>$(&quot;ul li:first-child&quot;</code>)</td>
</tr>
<tr>
<td><code>:last-child</code></td>
<td>匹配最后一个子元素</td>
<td>在每个 ul 中查找最后一个 li: <code>$(&quot;ul li:last-child&quot;)</code></td>
</tr>
<tr>
<td><code>:only-child</code></td>
<td>如果某个元素是父元素中唯一的子元素，那将会被匹配。如果父元素中含有其他元素，那将不会被匹配。</td>
<td>在 ul 中查找是唯一子元素的 li:<code>$(&quot;ul li:only-child&quot;)</code></td>
</tr>
</tbody>
</table>
<p><strong>8.表单选择器 Forms</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:input</code></td>
<td>匹配所有 input, textarea, select 和 button 元素</td>
<td><code>$(&quot;:input&quot;)</code></td>
</tr>
<tr>
<td><code>:text</code></td>
<td>匹配所有的文本框</td>
<td><code>$(&quot;:text&quot;)</code></td>
</tr>
<tr>
<td><code>:password</code></td>
<td>匹配所有密码框</td>
<td><code>$(&quot;:password&quot;)</code></td>
</tr>
<tr>
<td><code>:radio</code></td>
<td>匹配所有单选按钮</td>
<td><code>$(&quot;:radio&quot;)</code></td>
</tr>
<tr>
<td><code>:checkbox</code></td>
<td>匹配所有的复选按钮</td>
<td><code>$(&quot;:checkbox&quot;)</code></td>
</tr>
<tr>
<td><code>:submit</code></td>
<td>匹配所有提交按钮</td>
<td><code>$(&quot;:submit&quot;)</code></td>
</tr>
<tr>
<td><code>:image</code></td>
<td>匹配所有图像域</td>
<td><code>$(&quot;:image&quot;)</code></td>
</tr>
<tr>
<td><code>:reset</code></td>
<td>匹配所有重置按钮</td>
<td><code>$(&quot;:reset&quot;)</code></td>
</tr>
<tr>
<td><code>:button</code></td>
<td>匹配所有按钮</td>
<td><code>$(&quot;:button&quot;)</code></td>
</tr>
<tr>
<td><code>:file</code></td>
<td>匹配所有文件域</td>
<td><code>$(&quot;:file&quot;)</code></td>
</tr>
</tbody>
</table>
<p><strong>9.表单过滤器 Form Filters</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:enabled</code></td>
<td>匹配所有可用元素</td>
<td>查找所有可用的input元素: <code>$(&quot;input:enabled&quot;)</code></td>
</tr>
<tr>
<td><code>:disabled</code></td>
<td>匹配所有不可用元素</td>
<td>查找所有不可用的input元素:<code>$(&quot;input:disabled&quot;)</code></td>
</tr>
<tr>
<td><code>:checked</code></td>
<td>匹配所有选中的被选中元素(复选框、单选框等，不包括select中的option)</td>
<td>查找所有选中的复选框元素:<code>$(&quot;input:checked&quot;)</code></td>
</tr>
<tr>
<td><code>:selected</code></td>
<td>匹配所有选中的option元素</td>
<td>查找所有选中的选项元素:<code>$(&quot;select option:selected&quot;)</code></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h3><h4 id="jquery使用on函数绑定hover事件"><a href="#jquery使用on函数绑定hover事件" class="headerlink" title="jquery使用on函数绑定hover事件"></a>jquery使用on函数绑定hover事件</h4><blockquote>
<p><a href="http://stackoverflow.com/questions/9827095/is-it-possible-to-use-jquery-on-and-hover" rel="external nofollow noopener noreferrer" target="_blank">Is it possible to use jQuery .on and hover?</a><br><a href="http://segmentfault.com/q/1010000000319439" rel="external nofollow noopener noreferrer" target="_blank">jQuery 使用 .on( ) 无法绑定 hover，jQuery 2.0 如何给生成的内容绑定 hover？</a></p>
</blockquote>
<p>jQuery的<code>.on()</code>方法不能绑定<code>hover</code>事件，配合<code>mouseenter</code>及<code>mouseleave</code>事件可达到效果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;.selector&quot;).on(&#123;</span><br><span class="line">    mouseenter: function () &#123;</span><br><span class="line">        //stuff to do on mouse enter</span><br><span class="line">    &#125;,</span><br><span class="line">    mouseleave: function () &#123;</span><br><span class="line">        //stuff to do on mouse leave</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="jquery回车键事件"><a href="#jquery回车键事件" class="headerlink" title="jquery回车键事件"></a>jquery回车键事件</h4><blockquote>
<p>[基于jquery的button默认enter事件(回车事件)。]<a href="http://www.jb51.net/article/27170.htm" rel="external nofollow noopener noreferrer" target="_blank">http://www.jb51.net/article/27170.htm</a>)<br><a href="http://blog.csdn.net/wym3587/article/details/6938292" rel="external nofollow noopener noreferrer" target="_blank">jquery中如何实现按回车触发按钮事件</a></p>
</blockquote>
<p>按回车键触发按钮点击事件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;body&quot;).keydown(function() &#123;</span><br><span class="line">  if (event.keyCode == &quot;13&quot;) &#123;//keyCode=13是回车键</span><br><span class="line">    $(&apos;#btnSumit&apos;).click();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="按tab键跳过readonly的输入框"><a href="#按tab键跳过readonly的输入框" class="headerlink" title="按tab键跳过readonly的输入框"></a>按tab键跳过readonly的输入框</h4><blockquote>
<p><a href="http://bbs.csdn.net/topics/340016321" rel="external nofollow noopener noreferrer" target="_blank">怎样实现按TAB键后跳过readonly的文本框</a></p>
</blockquote>
<p>给<code>readonly</code>属性的输入框指定<code>tabindex</code>属性为 -1 即可实现按tab键时跳过readonly的输入框<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;input[type=text][readonly]&quot;).attr(&quot;tabindex&quot;,-1);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="head-insertBefore-script-head-firstChild"><a href="#head-insertBefore-script-head-firstChild" class="headerlink" title="head.insertBefore( script, head.firstChild );"></a>head.insertBefore( script, head.firstChild );</h3><blockquote>
<p><a href="http://blog.csdn.net/diligentcatrich/article/details/5903554" rel="external nofollow noopener noreferrer" target="_blank">多次Jquery引发head.insertBefore( script, head.firstChild ); </a></p>
</blockquote>
<p>多次载入jquery是指在一个页面里引用jquery，而在DIV中载入的那个页面中就不要再引用jquery了。如果引用则会触发head.insertBefore( script, head.firstChild );的错误。</p>
<hr>
<h3 id="TypeError-invalid-‘in’-operand-obj"><a href="#TypeError-invalid-‘in’-operand-obj" class="headerlink" title="TypeError: invalid ‘in’ operand obj"></a>TypeError: invalid ‘in’ operand obj</h3><blockquote>
<p><a href="http://blog.csdn.net/lwx2615/article/details/9668777" rel="external nofollow noopener noreferrer" target="_blank">有关TypeError: invalid ‘in’ operand obj的错误</a></p>
</blockquote>
<p>使用each解析json时候，如果会报错TypeError: invalid ‘in’ operand obj则需要调用<code>$.parseJSON</code>方法<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">"POST"</span>,</span><br><span class="line">  url: url,</span><br><span class="line">  dataype: <span class="string">"json"</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    obj= $.parseJSON(data);</span><br><span class="line">    $.each( obj, <span class="function"><span class="keyword">function</span>(<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>官网对parseJSON的描述是：<em>Takes a well-formed JSON string and returns the resulting JavaScript object.</em></p>
<hr>
<h3 id="解决JQuery-trim-函数ie下报错的问题"><a href="#解决JQuery-trim-函数ie下报错的问题" class="headerlink" title="解决JQuery.trim()函数ie下报错的问题"></a>解决JQuery.trim()函数ie下报错的问题</h3><blockquote>
<p><a href="http://vsp.iteye.com/blog/1262441" rel="external nofollow noopener noreferrer" target="_blank">解决JQuery.trim()函数ie下报错的问题</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这种写法在firefox下有效，但是在ie下无效</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">"input"</span>).val().trim()!=<span class="string">""</span>);</span><br><span class="line"><span class="comment">//ie的写法</span></span><br><span class="line">alert($.trim($(<span class="string">"input"</span>).val())!=<span class="string">""</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="x-editable更改默认的空白字段的填充文字"><a href="#x-editable更改默认的空白字段的填充文字" class="headerlink" title="x-editable更改默认的空白字段的填充文字"></a>x-editable更改默认的空白字段的填充文字</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/19494605/x-editable-twitter-bootstrap-how-to-change-the-empty-value" rel="external nofollow noopener noreferrer" target="_blank">x-editable (twitter bootstrap): how to change the empty value?</a></p>
</blockquote>
<p>使用属性<code>emptytext</code>修改<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">emptytext: <span class="string">'space'</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="jQuery-handleError-is-not-a-function"><a href="#jQuery-handleError-is-not-a-function" class="headerlink" title="jQuery.handleError is not a function"></a>jQuery.handleError is not a function</h3><blockquote>
<p><a href="http://hi.baidu.com/wangsen911/item/5ddf775744c44d01e7c4a51a" rel="external nofollow noopener noreferrer" target="_blank">jquery.form 无刷新上传文件报错(jQuery.handleError is not a function)，gb2312下中文乱码问题</a></p>
</blockquote>
<p>jQuery.handleError is not a function 原因是：</p>
<p>1.handlerError只在jquery-1.4.2之前的版本中存在，jquery-1.6 和1.7中都没有这个函数了。</p>
<p>2.如果返回的dataType: “json”, 是json格式的，则还需要添加httpData方法。</p>
<p>因此在jquery高级版本中将这个函数添加上 ，问题解决。</p>
<p>需要添加的代码：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">; (<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">jQuery.extend(&#123;</span><br><span class="line">    handleError: <span class="function"><span class="keyword">function</span> (<span class="params">s, xhr, status, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.error) &#123;</span><br><span class="line">            s.error.call(s.context || s, xhr, status, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.global) &#123;</span><br><span class="line">            (s.context ? jQuery(s.context) : jQuery.event).trigger(<span class="string">"ajaxError"</span>, [xhr, s, e]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    httpData: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, type, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ct = xhr.getResponseHeader(<span class="string">"content-type"</span>),</span><br><span class="line">xml = type == <span class="string">"xml"</span> || !type &amp;&amp; ct &amp;&amp; ct.indexOf(<span class="string">"xml"</span>) &gt;= <span class="number">0</span>,</span><br><span class="line">data = xml ? xhr.responseXML : xhr.responseText;</span><br><span class="line">        <span class="keyword">if</span> (xml &amp;&amp; data.documentElement.tagName == <span class="string">"parsererror"</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">"parsererror"</span>;</span><br><span class="line">        <span class="keyword">if</span> (s &amp;&amp; s.dataFilter)</span><br><span class="line">            data = s.dataFilter(data, type);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">"string"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">"script"</span>)</span><br><span class="line">                jQuery.globalEval(data);</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">"json"</span>)</span><br><span class="line">                data = <span class="built_in">window</span>[<span class="string">"eval"</span>](<span class="string">"("</span> + data + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>中文乱码问题则是 在gb2312字符编码格式下 需要修改js源码：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.fn.param=<span class="function"><span class="keyword">function</span>(<span class="params"> a </span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> encode=<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;<span class="comment">//如果包含中文就escape,避免重复escape)</span></span><br><span class="line">     <span class="keyword">return</span> <span class="regexp">/[^\x00-\xff]/g</span>.test(v)?<span class="built_in">escape</span>(v):v;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">var</span> s = [];</span><br><span class="line">   <span class="comment">// If an array was passed in, assume that it is an array</span></span><br><span class="line">   <span class="comment">// of form elements</span></span><br><span class="line">   <span class="keyword">if</span> ( a.constructor == <span class="built_in">Array</span> || a.jquery )</span><br><span class="line">    <span class="comment">// Serialize the form elements</span></span><br><span class="line">    jQuery.each( a, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     s.push( encode(<span class="keyword">this</span>.name) + <span class="string">"="</span> + encode( <span class="keyword">this</span>.value ) );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Otherwise, assume that it's an object of key/value pairs</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">    <span class="comment">// Serialize the key/values</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> j <span class="keyword">in</span> a )</span><br><span class="line">     <span class="comment">// If the value is an array then the key names need to be repeated</span></span><br><span class="line">     <span class="keyword">if</span> ( a[j] &amp;&amp; a[j].constructor == <span class="built_in">Array</span> )</span><br><span class="line">      jQuery.each( a[j], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       s.push( encode(j) + <span class="string">"="</span> + encode( <span class="keyword">this</span> ) );</span><br><span class="line">      &#125;);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">      s.push( encode(j) + <span class="string">"="</span> + encode( a[j] ) );</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Return the resulting serialization</span></span><br><span class="line">   <span class="keyword">return</span> s.join(<span class="string">"&amp;"</span>).replace(<span class="regexp">/%20/g</span>, <span class="string">"+"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Spring-Jackson-AjaxFileUpload-没有执行回调函数的解决办法"><a href="#Spring-Jackson-AjaxFileUpload-没有执行回调函数的解决办法" class="headerlink" title="Spring Jackson AjaxFileUpload 没有执行回调函数的解决办法"></a>Spring Jackson AjaxFileUpload 没有执行回调函数的解决办法</h3><blockquote>
<p><a href="http://www.iteye.com/topic/1118960" rel="external nofollow noopener noreferrer" target="_blank">Spring Jackson AjaxFileUpload 没有执行回调函数的解决办法</a></p>
</blockquote>
<p>修改ajaxfileupload的源码<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( type == <span class="string">"json"</span> )</span><br><span class="line">  <span class="built_in">eval</span>( <span class="string">"data = "</span> + data );</span><br></pre></td></tr></table></figure></p>
<p>这一句修改为<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( type == <span class="string">"json"</span> )</span><br><span class="line">  data=<span class="built_in">eval</span>(<span class="string">"("</span>+data.replace(<span class="string">"&lt;pre&gt;"</span>,<span class="string">""</span>).replace(<span class="string">"&lt;/pre&gt;"</span>,<span class="string">""</span>)+<span class="string">")"</span>);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="ajaxFileUpload-plugin上传文件-chrome、Firefox中出现SyntaxError-unexpected-token-lt"><a href="#ajaxFileUpload-plugin上传文件-chrome、Firefox中出现SyntaxError-unexpected-token-lt" class="headerlink" title="ajaxFileUpload plugin上传文件 chrome、Firefox中出现SyntaxError:unexpected token &lt;"></a>ajaxFileUpload plugin上传文件 chrome、Firefox中出现<code>SyntaxError:unexpected token &lt;</code></h3><blockquote>
<p><a href="http://liwx2000.iteye.com/blog/1540321" rel="external nofollow noopener noreferrer" target="_blank">ajaxFileUpload plugin上传文件 chrome、Firefox中出现<code>SyntaxError:unexpected token &lt;</code></a></p>
</blockquote>
<p>因为Server端的Response上加上了<code>contentType=&quot;application/json&quot;</code>。但有时后端这么做是必须的，所以修改ajaxFileUpload源码，将<code>&lt;pre&gt;&lt;/pre&gt;</code>标签去掉<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">uploadHttpData: <span class="function"><span class="keyword">function</span>(<span class="params"> r, type </span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> data = !type;  </span><br><span class="line">  data = type == <span class="string">"xml"</span> || data ? r.responseXML : r.responseText;  </span><br><span class="line">  <span class="comment">// If the type is "script", eval it in global context  </span></span><br><span class="line">  <span class="keyword">if</span> ( type == <span class="string">"script"</span> )  </span><br><span class="line">      jQuery.globalEval( data );  </span><br><span class="line">  <span class="comment">// Get the JavaScript object, if JSON is used.  </span></span><br><span class="line">  <span class="keyword">if</span> ( type == <span class="string">"json"</span> ) &#123;  </span><br><span class="line">        <span class="comment">////////////以下为新增代码///////////////  </span></span><br><span class="line">        data = r.responseText;  </span><br><span class="line">        <span class="keyword">var</span> start = data.indexOf(<span class="string">"&gt;"</span>);  </span><br><span class="line">        <span class="keyword">if</span>(start != <span class="number">-1</span>) &#123;  </span><br><span class="line">          <span class="keyword">var</span> end = data.indexOf(<span class="string">"&lt;"</span>, start + <span class="number">1</span>);  </span><br><span class="line">          <span class="keyword">if</span>(end != <span class="number">-1</span>) &#123;  </span><br><span class="line">            data = data.substring(start + <span class="number">1</span>, end);  </span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">///////////以上为新增代码///////////////  </span></span><br><span class="line">        <span class="built_in">eval</span>( <span class="string">"data = "</span> + data);  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment">// evaluate scripts within html  </span></span><br><span class="line">  <span class="keyword">if</span> ( type == <span class="string">"html"</span> )  </span><br><span class="line">      jQuery(<span class="string">"&lt;div&gt;"</span>).html(data).evalScripts();  </span><br><span class="line">  <span class="keyword">return</span> data;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ajax</tag>
        <tag>date</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery 部分插件整理</title>
    <url>/jquery-form/</url>
    <content><![CDATA[<p>收集一些jQuery插件使用过程中碰到的问题解决方法。</p>
<a id="more"></a>
<h3 id="jQuery-Form表单部分"><a href="#jQuery-Form表单部分" class="headerlink" title="jQuery Form表单部分"></a>jQuery Form表单部分</h3><h4 id="jquery-提交中文问题"><a href="#jquery-提交中文问题" class="headerlink" title="jquery 提交中文问题"></a>jquery 提交中文问题</h4><blockquote>
<p>来自<a href="http://hi.baidu.com/computercode/item/84fb7b12efa0ab0be75c3602" rel="external nofollow noopener noreferrer" target="_blank">jquery解决提交中文问题两种方法</a></p>
</blockquote>
<ul>
<li><p>方法一</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端页面</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="built_in">encodeURI</span>($(<span class="string">"#name"</span>).val());</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="built_in">String</span> name= <span class="keyword">new</span> <span class="built_in">String</span>(request.getParameter(<span class="string">"name"</span>).getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="built_in">encodeURI</span>(<span class="built_in">encodeURI</span>($(<span class="string">"#name"</span>).val()));</span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="built_in">String</span> name= request.getParameter(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    name= URLDecoder.decode(name,<span class="string">"UTF-8"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="jquery-判断radio是否选中"><a href="#jquery-判断radio是否选中" class="headerlink" title="jquery 判断radio是否选中"></a>jquery 判断radio是否选中</h4><blockquote>
<p><a href="http://www.cnblogs.com/xcj1989/archive/2011/06/29/jquery_radio.html" rel="external nofollow noopener noreferrer" target="_blank">JQuery判断radio是否选中，获取选中值</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> val = $(<span class="string">"input:radio[name='radio']:checked"</span>).val();</span><br><span class="line"><span class="keyword">if</span>(val==<span class="literal">null</span>)&#123;</span><br><span class="line">    alert(<span class="string">"什么也没选中!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="jquery对checkbox的操作"><a href="#jquery对checkbox的操作" class="headerlink" title="jquery对checkbox的操作"></a>jquery对checkbox的操作</h4><blockquote>
<p><a href="http://for-dream.iteye.com/blog/1570434" rel="external nofollow noopener noreferrer" target="_blank">JQuery对CheckBox的一些相关操作</a><br><a href="http://www.jbxue.com/article/12668.html" rel="external nofollow noopener noreferrer" target="_blank">设置checkbox复选框为readonly只读的两种方式</a><br><a href="http://www.cnblogs.com/starweb/archive/2008/10/13/1309670.html" rel="external nofollow noopener noreferrer" target="_blank">jquery判断checkbox是否被选中</a></p>
</blockquote>
<p>获取checkbox选中的值<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">$(<span class="string">"input[name='checkbox_name']:checked"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  arr.push($(<span class="keyword">this</span>).val());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//输出选中的值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">","</span>));</span><br></pre></td></tr></table></figure></p>
<p>设置checkbox为只读<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">onclick</span>=<span class="string">"return false"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>或者使用js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">checkbox.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br></pre></td></tr></table></figure></p>
<p>或者使用jquery的click方法<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#checkbox_id"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.checked = !<span class="keyword">this</span>.checked;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>判断checkbox是否被选中<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($(<span class="string">"#checkbox_id"</span>).is(<span class="string">":checked"</span>))</span><br><span class="line"><span class="keyword">if</span>($(<span class="string">"#checkbox_id"</span>).prop(<span class="string">"checked"</span>))</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="jquery对select操作"><a href="#jquery对select操作" class="headerlink" title="jquery对select操作"></a>jquery对select操作</h4><blockquote>
<p><a href="http://nvry.iteye.com/blog/1556157" rel="external nofollow noopener noreferrer" target="_blank">JQuery设置select控件只读</a><br><a href="http://www.cnblogs.com/QQJnet/archive/2011/12/11/2284174.html" rel="external nofollow noopener noreferrer" target="_blank">jquery获得select option的值 和对select option的操作</a><br><a href="http://bbs.csdn.net/topics/390140793" rel="external nofollow noopener noreferrer" target="_blank">高手指导下 jquery 中 select 控件 ，根据text值来选中项没用</a></p>
</blockquote>
<p>常用操作<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Select选择的Text</span></span><br><span class="line"><span class="keyword">var</span> txt = $(<span class="string">"#select_id"</span>).find(<span class="string">"option:selected"</span>).text();</span><br><span class="line"><span class="comment">//获取Select选择的Value </span></span><br><span class="line"><span class="keyword">var</span> val = $(<span class="string">"#select_id"</span>).val();</span><br><span class="line"><span class="comment">//获取Select选择的索引值 </span></span><br><span class="line"><span class="keyword">var</span> index = $(<span class="string">"#select_id "</span>).get(<span class="number">0</span>).selectedIndex;</span><br><span class="line"><span class="comment">//获取Select最大的索引值 </span></span><br><span class="line"><span class="keyword">var</span> maxIndex=$(<span class="string">"#select_id option:last"</span>).attr(<span class="string">"index"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置Select索引值为1的项选中</span></span><br><span class="line">$(<span class="string">"#select_id "</span>).get(<span class="number">0</span>).selectedIndex=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 设置Select的Value值为1的项选中</span></span><br><span class="line">$(<span class="string">"#select_id "</span>).val(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//设置Select的Text值为jQuery的项选中</span></span><br><span class="line">$(<span class="string">"#select_id option[text='jQuery']"</span>).attr(<span class="string">"selected"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为Select追加一个Option(下拉项)</span></span><br><span class="line">$(<span class="string">"#select_id"</span>).append(<span class="string">"&lt;option value='Value'&gt;Text&lt;/option&gt;"</span>);</span><br><span class="line">/删除Select中索引值最大Option(最后一个) </span><br><span class="line">$(<span class="string">"#select_id option:last"</span>).remove();</span><br><span class="line"><span class="comment">//删除Select中Text='4'的Option </span></span><br><span class="line">$(<span class="string">"#select_id option[text='4']"</span>).remove();</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空选项</span></span><br><span class="line">$(<span class="string">"#select_id"</span>).empty();</span><br></pre></td></tr></table></figure></p>
<p>设置select为只读<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#select_id"</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).attr(<span class="string">'defaultIndex'</span>,$(<span class="keyword">this</span>).attr(<span class="string">'selectedIndex'</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="string">"#select_id"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).attr(<span class="string">'selectedIndex'</span>,$(<span class="keyword">this</span>).attr(<span class="string">'defaultIndex'</span>)); </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="jquery-form插件"><a href="#jquery-form插件" class="headerlink" title="jquery.form插件"></a>jquery.form插件</h4><blockquote>
<p><a href="http://www.cnblogs.com/luluping/archive/2009/04/15/1436177.html" rel="external nofollow noopener noreferrer" target="_blank">jquery表单验证插件 jquery.form.js</a><br><a href="http://blog.csdn.net/zzq58157383/article/details/7718956" rel="external nofollow noopener noreferrer" target="_blank">jQuery插件 – Form表单插件jquery.form.js</a><br><a href="http://www.cnblogs.com/heyuquan/p/form-plug-async-submit.html" rel="external nofollow noopener noreferrer" target="_blank">使用jQuery.form插件，实现完美的表单异步提交</a></p>
</blockquote>
<p>核心方法 – <code>ajaxForm()</code> 和 <code>ajaxSubmit()</code><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#myForm'</span>).ajaxForm(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;     </span><br><span class="line">   $(<span class="string">'#output1'</span>).html(<span class="string">"提交成功！欢迎下次再来！"</span>).show();      </span><br><span class="line">&#125;);    </span><br><span class="line">         </span><br><span class="line">$(<span class="string">'#myForm2'</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">   $(<span class="keyword">this</span>).ajaxSubmit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;     </span><br><span class="line">      $(<span class="string">'#output2'</span>).html(<span class="string">"提交成功！欢迎下次再来！"</span>).show();      </span><br><span class="line">   &#125;);  </span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//阻止表单默认提交  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>ajaxForm() 和 ajaxSubmit() 都能接受0个或1个参数，当为单个参数时，该参数既可以是一个回调函数，也可以是一个options对象，上面的例子就是回调函数，下面介绍options对象，使得它们对表单拥有更多的控制权<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;  </span><br><span class="line">   target: <span class="string">'#output'</span>,          <span class="comment">//把服务器返回的内容放入id为output的元素中      </span></span><br><span class="line">   beforeSubmit: showRequest,  <span class="comment">//提交前的回调函数  </span></span><br><span class="line">   success: showResponse,      <span class="comment">//提交后的回调函数  </span></span><br><span class="line">   <span class="comment">//url: url,                 //默认是form的action， 如果申明，则会覆盖  </span></span><br><span class="line">   <span class="comment">//type: type,               //默认是form的method（get or post），如果申明，则会覆盖  </span></span><br><span class="line">   <span class="comment">//dataType: null,           //html(默认), xml, script, json...接受服务端返回的类型  </span></span><br><span class="line">   <span class="comment">//clearForm: true,          //成功提交后，清除所有表单元素的值  </span></span><br><span class="line">   <span class="comment">//resetForm: true,          //成功提交后，重置所有表单元素的值  </span></span><br><span class="line">   timeout: <span class="number">3000</span>               <span class="comment">//限制请求的时间，当请求大于3秒后，跳出请求  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showRequest</span>(<span class="params">formData, jqForm, options</span>)</span>&#123;  </span><br><span class="line">   <span class="comment">//formData: 数组对象，提交表单时，Form插件会以Ajax方式自动提交这些数据，格式如：[&#123;name:user,value:val &#125;,&#123;name:pwd,value:pwd&#125;]  </span></span><br><span class="line">   <span class="comment">//jqForm:   jQuery对象，封装了表单的元素     </span></span><br><span class="line">   <span class="comment">//options:  options对象  </span></span><br><span class="line">   <span class="keyword">var</span> queryString = $.param(formData);   <span class="comment">//name=1&amp;address=2  </span></span><br><span class="line">   <span class="keyword">var</span> formElement = jqForm[<span class="number">0</span>];              <span class="comment">//将jqForm转换为DOM对象  </span></span><br><span class="line">   <span class="keyword">var</span> address = formElement.address.value;  <span class="comment">//访问jqForm的DOM元素  </span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//只要不返回false，表单都会提交,在这里可以对表单元素进行验证  </span></span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showResponse</span>(<span class="params">responseText, statusText</span>)</span>&#123;  </span><br><span class="line">   <span class="comment">//dataType=xml  </span></span><br><span class="line">   <span class="keyword">var</span> name = $(<span class="string">'name'</span>, responseXML).text();  </span><br><span class="line">   <span class="keyword">var</span> address = $(<span class="string">'address'</span>, responseXML).text();  </span><br><span class="line">   $(<span class="string">"#xmlout"</span>).html(name + <span class="string">"  "</span> + address);  </span><br><span class="line">   <span class="comment">//dataType=json  </span></span><br><span class="line">   $(<span class="string">"#jsonout"</span>).html(data.name + <span class="string">"  "</span> + data.address);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">$(<span class="string">"#myForm"</span>).ajaxForm(options);  </span><br><span class="line">  </span><br><span class="line">$(<span class="string">"#myForm2"</span>).submit(funtion()&#123;  </span><br><span class="line">   $(<span class="keyword">this</span>).ajaxSubmit(options);  </span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//阻止表单默认提交  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>表单提交之前进行验证：  beforeSubmit会在表单提交前被调用，如果beforeSubmit返回false，则会阻止表单提交<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeSubmit: validate  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">formData, jqForm, options</span>) </span>&#123; <span class="comment">//在这里对表单进行验证，如果不符合规则，将返回false来阻止表单提交，直到符合规则为止  </span></span><br><span class="line">   <span class="comment">//方式一：利用formData参数  </span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; formData.length; i++) &#123;  </span><br><span class="line">       <span class="keyword">if</span> (!formData[i].value) &#123;  </span><br><span class="line">            alert(<span class="string">'用户名,地址和自我介绍都不能为空!'</span>);  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;   </span><br><span class="line">  </span><br><span class="line">   <span class="comment">//方式二：利用jqForm对象  </span></span><br><span class="line">   <span class="keyword">var</span> form = jqForm[<span class="number">0</span>]; <span class="comment">//把表单转化为dom对象  </span></span><br><span class="line">      <span class="keyword">if</span> (!form.name.value || !form.address.value) &#123;  </span><br><span class="line">            alert(<span class="string">'用户名和地址不能为空，自我介绍可以为空！'</span>);  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">//方式三：利用fieldValue()方法，fieldValue 是表单插件的一个方法，它能找出表单中的元素的值，返回一个集合。  </span></span><br><span class="line">   <span class="keyword">var</span> usernameValue = $(<span class="string">'input[name=name]'</span>).fieldValue();  </span><br><span class="line">   <span class="keyword">var</span> addressValue = $(<span class="string">'input[name=address]'</span>).fieldValue();  </span><br><span class="line">   <span class="keyword">if</span> (!usernameValue[<span class="number">0</span>] || !addressValue[<span class="number">0</span>]) &#123;  </span><br><span class="line">      alert(<span class="string">'用户名和地址不能为空，自我介绍可以为空！'</span>);  </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> queryString = $.param(formData); <span class="comment">//组装数据  </span></span><br><span class="line">    <span class="comment">//alert(queryString); //类似 ： name=1&amp;add=2    </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="dataTables插件"><a href="#dataTables插件" class="headerlink" title="dataTables插件"></a>dataTables插件</h3><blockquote>
<p><a href="http://blog.csdn.net/mickey_miki/article/details/8240477" rel="external nofollow noopener noreferrer" target="_blank">dataTables-使用详细说明整理</a><br><a href="http://blog.csdn.net/badboyer/article/details/8509484" rel="external nofollow noopener noreferrer" target="_blank">datatables request unknown parameter ‘0’ from data source for row 0</a><br><a href="http://www.cnblogs.com/kezf/p/datatable.html" rel="external nofollow noopener noreferrer" target="_blank">Jquery datatable 配置与应用</a><br><a href="http://datatables.net/forums/discussion/537/fnfilter/p1" rel="external nofollow noopener noreferrer" target="_blank">fnFilter</a><br><a href="http://blog.csdn.net/bill1315/article/details/12577595" rel="external nofollow noopener noreferrer" target="_blank">Jquery DataTables 自定义布局sdom</a><br><a href="http://lyj86.iteye.com/blog/1824787" rel="external nofollow noopener noreferrer" target="_blank">jQuery DataTables插件 单个/批量设置列的显示/隐藏状态</a><br><a href="http://stackoverflow.com/questions/5454805/jquery-datatables-adding-row-selected-class-to-a-row" rel="external nofollow noopener noreferrer" target="_blank">jquery datatables adding row_selected class to a row</a><br><a href="http://bbs.csdn.net/topics/370191615" rel="external nofollow noopener noreferrer" target="_blank">求高手指点jquery 的datatables插件问题</a><br><a href="http://techmytalk.com/2013/08/24/how-to-create-jquery-data-table-using-json-pass-by-servlet/" rel="external nofollow noopener noreferrer" target="_blank">How to create JQuery DataTable using JSON and servlet</a></p>
</blockquote>
<p><a href="http://www.datatables.net" rel="external nofollow noopener noreferrer" target="_blank">datatables</a>是jquery的一款表格插件,接收后端传送过来的json格式的数据把他显示在页面table中，首先对于页面中，必须要有一个空的table，并且保证拥有表头元素:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>head1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>head2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">theand</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里的表头个数必须与后端传过来的数组长度对应，不然会报错。<br>接下来是datatables的部分配置:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#list'</span>).dataTable(&#123;</span><br><span class="line">    <span class="comment">//当载入的时候显示进度条</span></span><br><span class="line">	<span class="string">"bProcessing"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="comment">//从服务端获取数据</span></span><br><span class="line">	<span class="string">"bServerSide"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="comment">//服务端链接</span></span><br><span class="line">	<span class="string">"sAjaxSource"</span>: <span class="string">"list"</span>,</span><br><span class="line">	<span class="comment">//分页显示数组</span></span><br><span class="line">	<span class="comment">//"sPaginationType": "full_numbers",</span></span><br><span class="line">	<span class="comment">//使用jQueryUI主题</span></span><br><span class="line">	<span class="string">"bJQueryUI"</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="comment">//客户端过滤框</span></span><br><span class="line">	<span class="string">"bFilter"</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="string">"bSortClasses"</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="comment">//指定排序的列</span></span><br><span class="line">	<span class="string">"aaSorting"</span>: [[<span class="number">2</span>, <span class="string">'desc'</span>]],</span><br><span class="line">	<span class="comment">//如果后端传入的不是数组而是map，则需要指定列对应的key值</span></span><br><span class="line">    <span class="comment">/*"aoColumns":[&#123;"mDataProp":"name"&#125;,</span></span><br><span class="line"><span class="comment">	             &#123;"mDataProp":"age"&#125;,</span></span><br><span class="line"><span class="comment">				 &#123;"mDataProp":"id"&#125;],*/</span></span><br><span class="line">	<span class="comment">//渲染列，可以指定列是否排序，是否可见，宽度等</span></span><br><span class="line">	<span class="string">"aoColumnDefs"</span>: [&#123;<span class="string">"bSortable"</span>:<span class="literal">false</span>, <span class="string">"aTargets"</span>:[<span class="number">0</span>]&#125;,</span><br><span class="line">	                 &#123;<span class="string">"bVisible"</span>:<span class="literal">false</span>, <span class="string">"aTargets"</span>:[<span class="number">1</span>]&#125;,</span><br><span class="line">	                 &#123;<span class="string">"sWidth"</span>:<span class="string">"160px"</span>, <span class="string">"aTargets"</span>:[<span class="number">2</span>]&#125;],</span><br><span class="line">	<span class="string">"fnRowCallback"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">nRow, aData, iDisplayIndex</span>)</span>&#123;</span><br><span class="line">	    <span class="comment">//这里对行进行渲染操作，可以对行数据进行修改</span></span><br><span class="line">		$(<span class="string">'td:last'</span>,nRow).html(<span class="string">"test"</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"fnServerData"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">sSource, aoData, fnCallback</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//这里是去后端获取数据，可以加入条件查询的参数</span></span><br><span class="line">		$.getJSON(sSource,aoData,<span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123; fnCallback(json); &#125;);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"oLanguage"</span>: &#123;</span><br><span class="line">	    <span class="string">"sProcessing"</span>: <span class="string">"正在加载中......"</span>,</span><br><span class="line">        <span class="string">"sLengthMenu"</span>: <span class="string">"每页显示 _MENU_ 条记录"</span>,</span><br><span class="line">        <span class="string">"sZeroRecords"</span>: <span class="string">"对不起，查询不到相关数据！"</span>,</span><br><span class="line">        <span class="string">"sEmptyTable"</span>: <span class="string">"表中无数据存在！"</span>,</span><br><span class="line">        <span class="string">"sInfo"</span>: <span class="string">"当前显示 _START_ 到 _END_ 条，共 _TOTAL_ 条记录"</span>,</span><br><span class="line">        <span class="string">"sInfoFiltered"</span>: <span class="string">"数据表中共为 _MAX_ 条记录"</span>,</span><br><span class="line">        <span class="string">"sSearch"</span>: <span class="string">"搜索"</span>,</span><br><span class="line">        <span class="string">"oPaginate"</span>: &#123;</span><br><span class="line">            <span class="string">"sFirst"</span>: <span class="string">"首页"</span>,</span><br><span class="line">            <span class="string">"sPrevious"</span>: <span class="string">"上一页"</span>,</span><br><span class="line">            <span class="string">"sNext"</span>: <span class="string">"下一页"</span>,</span><br><span class="line">            <span class="string">"sLast"</span>: <span class="string">"末页"</span></span><br><span class="line">        &#125;</span><br><span class="line">	    <span class="comment">//支持通过文本链接获取语言支持</span></span><br><span class="line">		<span class="comment">//"sUrl": "resources/datatables/zh_CN.txt"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>使用<code>aTable.fnDraw()</code>方法可以刷新视图,当向后端请求数据时，datatables向后端传入的请求部分参数有<br><code>sEcho</code>:请求标识符，需直接返回<br><code>iSortCol_0</code>: 需排序列的索引,即<code>&quot;aaSorting&quot;: [[2, &#39;desc&#39;]]</code>中的2<br><code>sSortDir_0</code>: 升降序排序标识，为asc/desc<br><code>iDisplayStart</code>: 分页显示开始页面<br><code>iDisplayLength</code>: 分页长度<br>返回的数据为json格式数据，对应参数为<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map m = <span class="keyword">new</span> HashMap();</span><br><span class="line">m.put(<span class="string">"sEcho"</span>, sEcho);</span><br><span class="line"><span class="comment">//总共显示的记录数</span></span><br><span class="line">m.put(<span class="string">"iTotalRecords"</span>, count);</span><br><span class="line"><span class="comment">//条件查询后的记录数</span></span><br><span class="line">m.put(<span class="string">"iTotalDisplayRecords"</span>, filterCount);</span><br><span class="line"><span class="comment">//数据数组</span></span><br><span class="line">m.put(<span class="string">"aaData"</span>, aaData);</span><br><span class="line"><span class="comment">//转换为json格式</span></span><br><span class="line"><span class="keyword">return</span> gson.toJson(m);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>form</tag>
        <tag>jQuery</tag>
        <tag>table</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery UI控件知识点整理</title>
    <url>/jquery-jqueryui/</url>
    <content><![CDATA[<p>收集平时使用jQuery UI控件碰到的一些问题与知识点。</p>
<a id="more"></a>
<h3 id="jQuery-UI-Dialog"><a href="#jQuery-UI-Dialog" class="headerlink" title="jQuery UI Dialog"></a>jQuery UI Dialog</h3><h4 id="修改按钮位置"><a href="#修改按钮位置" class="headerlink" title="修改按钮位置"></a>修改按钮位置</h4><blockquote>
<p><a href="http://stackoverflow.com/questions/17278132/jquery-dialog-button-positions" rel="external nofollow noopener noreferrer" target="_blank">Jquery dialog button - positions</a></p>
</blockquote>
<p>当出现了三个以上的按钮要放在<code>buttons</code>内，可以使用css来修改按钮的位置<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.ui-dialog-buttonset button:first-child &#123;</span><br><span class="line">   right:<span class="number">30</span>px; </span><br><span class="line">   position: absolute;</span><br><span class="line">   top: <span class="number">42</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.ui-dialog-buttonset&#123;</span><br><span class="line">    position:relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="在dialog中载入其他页面"><a href="#在dialog中载入其他页面" class="headerlink" title="在dialog中载入其他页面"></a>在dialog中载入其他页面</h4><blockquote>
<p><a href="http://stackoverflow.com/questions/1608249/how-to-load-a-page-with-jquery-ui-dialog" rel="external nofollow noopener noreferrer" target="_blank">how to load a page with jquery ui dialog</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// initialize dialog</span></span><br><span class="line"><span class="keyword">var</span> dialog1 = $(<span class="string">"#dialog"</span>).dialog(&#123; <span class="attr">autoOpen</span>: <span class="literal">false</span>,</span><br><span class="line">  height: <span class="number">600</span>,</span><br><span class="line">  width: <span class="number">350</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// load content and open dialog</span></span><br><span class="line">dialog1.load(<span class="string">'path/to/otherPage'</span>).dialog(<span class="string">'open'</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="jquery-ui-Dialog-cannot-call-methods-on-dialog-prior-to-initialization"><a href="#jquery-ui-Dialog-cannot-call-methods-on-dialog-prior-to-initialization" class="headerlink" title="jquery ui Dialog: cannot call methods on dialog prior to initialization"></a>jquery ui Dialog: cannot call methods on dialog prior to initialization</h4><blockquote>
<p><a href="http://stackoverflow.com/questions/13520139/jquery-ui-dialog-cannot-call-methods-on-dialog-prior-to-initialization" rel="external nofollow noopener noreferrer" target="_blank">jquery ui Dialog: cannot call methods on dialog prior to initialization</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> theDialog = $(<span class="string">"#divDialog"</span>).dialog(opt);</span><br><span class="line">theDialog.dialog(<span class="string">"open"</span>);</span><br></pre></td></tr></table></figure>
<p>That’s because the dialog is not stored in $(‘#divDialog’), but on a new div that is created on the fly and returned by the .dialog(opt) function.</p>
<hr>
<h4 id="设置按钮不可用"><a href="#设置按钮不可用" class="headerlink" title="设置按钮不可用"></a>设置按钮不可用</h4><blockquote>
<p><a href="http://blog.csdn.net/li_gf/article/details/7594628" rel="external nofollow noopener noreferrer" target="_blank">如何设置Jquery UI dialog 中的button为disable变灰或者更改button样式</a></p>
</blockquote>
<p><code>.ui-dialog-buttonpane</code>为dialog给button加上的样式，通过这个就可以找到相应的button并且对其设置属性了<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//button的value为Yes</span></span><br><span class="line">$(<span class="string">'.ui-dialog-buttonpane'</span>).find(<span class="string">'button:contains("Yes")'</span>).attr(<span class="string">"disabled"</span>, <span class="string">"disabled"</span>);</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="去掉关闭符号"><a href="#去掉关闭符号" class="headerlink" title="去掉关闭符号"></a>去掉关闭符号</h4><blockquote>
<p><a href="http://www.myexception.cn/web/906430.html" rel="external nofollow noopener noreferrer" target="_blank">怎么去掉jquery dialog右下角的“叉”号</a><br><a href="http://www.myexception.cn/web/600923.html" rel="external nofollow noopener noreferrer" target="_blank">Jquery UI dialog 关闭按钮化除</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'a.ui-dialog-titlebar-close'</span>).hide();</span><br></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**去除jquery ui close按钮**/</span></span><br><span class="line"><span class="selector-class">.my-dialog</span> <span class="selector-class">.ui-dialog-titlebar-close</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$( <span class="string">"#login"</span> ).dialog(&#123;</span><br><span class="line">  <span class="comment">/**去除jquery ui close按钮**/</span></span><br><span class="line">  dialogClass: <span class="string">"my-dialog"</span>,</span><br><span class="line">  title:<span class="string">'用户登录'</span>,</span><br><span class="line">  modal:<span class="literal">true</span>,</span><br><span class="line">  ···</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="jQuery-Datepicker"><a href="#jQuery-Datepicker" class="headerlink" title="jQuery Datepicker"></a>jQuery Datepicker</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><blockquote>
<p><a href="http://www.cnblogs.com/lf6112/archive/2011/05/19/2051126.html" rel="external nofollow noopener noreferrer" target="_blank">JQuery datepicker 用法</a></p>
</blockquote>
<p>引入相关的js文件及css文件后直接调用<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"input"</span>).datepicker();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>支持键盘按键有如下功能：<br>page up/down - 上一月、下一月<br>ctrl+page up/down - 上一年、下一年<br>ctrl+home - 当前月或最后一次打开的日期<br>ctrl+left/right - 上一天、下一天<br>ctrl+up/down - 上一周、下一周<br>enter - 确定选择日期<br>ctrl+end - 关闭并清除已选择的日期<br>escape - 关闭并取消选择</p>
<p>相关方法：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.datepicker.setDefaults( settings ) <span class="comment">// 全局设置日期选择插件的参数.</span></span><br><span class="line">$.datepicker.formatDate( format, date, settings ) <span class="comment">// 格式化显示的日期字符串</span></span><br><span class="line">$.datepicker.iso8601Week( date ) <span class="comment">// 给出一个日期，确实他是一年中的第几周</span></span><br><span class="line">$.datepicker.parseDate( format, value, settings ) <span class="comment">// 按照指定格式获取日期字符串</span></span><br></pre></td></tr></table></figure></p>
<p>对应的格式化参数有:<br>d - 每月的第几天 (没有前导零)<br>dd - 每月的第几天 (两位数字)<br>o - 一年中的第几天 (没有前导零)<br>oo - 一年中的第几天 (三位数字)<br>D - day name short<br>DD - day name long<br>m - 月份 (没有前导零)<br>mm - 月份 (两位数字)<br>M - month name short<br>MM - month name long<br>y - 年份 (两位数字)<br>yy - 年份 (四位数字)<br>@ - Unix 时间戳 (从 01/01/1970 开始)<br>‘…’ - 文本<br>‘’ - 单引号<br>ATOM - ‘yy-mm-dd’ (Same as RFC 3339/ISO 8601)<br>COOKIE - ‘D, dd M yy’<br>ISO_8601 - ‘yy-mm-dd’<br>RFC_822 - ‘D, d M y’<br>RFC_850 - ‘DD, dd-M-y’<br>RFC_1036 - ‘D, d M y<br>RFC_1123 - ‘D, d M yy’<br>RFC_2822 - ‘D, d M yy’<br>RSS - ‘D, d M y’<br>TIMESTAMP - ‘@’<br>W3C - ‘yy-mm-dd’</p>
<p><code>datepicker</code>接收的参数有:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">altField : <span class="built_in">String</span> : <span class="string">''</span></span><br><span class="line">  将选择的日期同步到另一个域中，配合altFormat可以显示不同格式的日期字符串。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">altField</span>: <span class="string">'#actualDate'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> altField = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'altField'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'altField'</span>, <span class="string">'#actualDate'</span>);  </span><br><span class="line"></span><br><span class="line">altFormat : <span class="built_in">String</span> : <span class="string">''</span></span><br><span class="line">  当设置了altField的情况下，显示在另一个域中的日期格式。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">altFormat</span>: <span class="string">'yy-mm-dd'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> altFormat = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'altFormat'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'altFormat'</span>, <span class="string">'yy-mm-dd'</span>);  </span><br><span class="line"></span><br><span class="line">appendText : <span class="built_in">String</span> : <span class="string">''</span></span><br><span class="line">  在日期插件的所属域后面添加指定的字符串。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">appendText</span>: <span class="string">'(yyyy-mm-dd)'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> appendText = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'appendText'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'appendText'</span>, <span class="string">'(yyyy-mm-dd)'</span>);  </span><br><span class="line"></span><br><span class="line">buttonImage : <span class="built_in">String</span> : <span class="string">''</span></span><br><span class="line">  设置弹出按钮的图片，如果非空，则按钮的文本将成为alt属性，不直接显示。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">buttonImage</span>: <span class="string">'/images/datepicker.gif'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> buttonImage = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'buttonImage'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'buttonImage'</span>, <span class="string">'/images/datepicker.gif'</span>);  </span><br><span class="line"></span><br><span class="line">buttonImageOnly : <span class="built_in">Boolean</span> : <span class="literal">false</span></span><br><span class="line">  <span class="built_in">Set</span> to <span class="literal">true</span> to place an image after the field to use <span class="keyword">as</span> the trigger without it appearing on a button.</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">buttonImageOnly</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> buttonImageOnly = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'buttonImageOnly'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'buttonImageOnly'</span>, <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line">buttonText : <span class="built_in">String</span> : <span class="string">'...'</span></span><br><span class="line">  设置触发按钮的文本内容。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">buttonText</span>: <span class="string">'Choose'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> buttonText = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'buttonText'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'buttonText'</span>, <span class="string">'Choose'</span>);  </span><br><span class="line"></span><br><span class="line">changeMonth : <span class="built_in">Boolean</span> : <span class="literal">false</span></span><br><span class="line">  设置允许通过下拉框列表选取月份。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">changeMonth</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> changeMonth = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'changeMonth'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'changeMonth'</span>, <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line">changeYear : <span class="built_in">Boolean</span> : <span class="literal">false</span></span><br><span class="line">  设置允许通过下拉框列表选取年份。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">changeYear</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> changeYear = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'changeYear'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'changeYear'</span>, <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line">closeTextType: StringDefault: <span class="string">'Done'</span></span><br><span class="line">  设置关闭按钮的文本内容，此按钮需要通过showButtonPanel参数的设置才显示。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">closeText</span>: <span class="string">'X'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> closeText = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'closeText'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'closeText'</span>, <span class="string">'X'</span>);  </span><br><span class="line"></span><br><span class="line">constrainInput : <span class="built_in">Boolean</span> : <span class="literal">true</span></span><br><span class="line">  如果设置为<span class="literal">true</span>，则约束当前输入的日期格式。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">constrainInput</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> constrainInput = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'constrainInput'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'constrainInput'</span>, <span class="literal">false</span>);  </span><br><span class="line"></span><br><span class="line">currentText : <span class="built_in">String</span> : <span class="string">'Today'</span></span><br><span class="line">  设置当天按钮的文本内容，此按钮需要通过showButtonPanel参数的设置才显示。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">currentText</span>: <span class="string">'Now'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> currentText = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'currentText'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'currentText'</span>, <span class="string">'Now'</span>);  </span><br><span class="line"></span><br><span class="line">dateFormat : <span class="built_in">String</span> : <span class="string">'mm/dd/yy'</span></span><br><span class="line">  设置日期字符串的显示格式。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">dateFormat</span>: <span class="string">'yy-mm-dd'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> dateFormat = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'dateFormat'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'dateFormat'</span>, <span class="string">'yy-mm-dd'</span>);  </span><br><span class="line"></span><br><span class="line">dayNames : <span class="built_in">Array</span> : [<span class="string">'Sunday'</span>, <span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>, <span class="string">'Saturday'</span>]</span><br><span class="line">  设置一星期中每天的名称，从星期天开始。此内容用于dateFormat时显示，以及日历中当鼠标移至行头时显示。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">dayNames</span>: [<span class="string">'Dimanche'</span>, <span class="string">'Lundi'</span>, <span class="string">'Mardi'</span>, <span class="string">'Mercredi'</span>, <span class="string">'Jeudi'</span>, <span class="string">'Vendredi'</span>, <span class="string">'Samedi'</span>] &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> dayNames = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'dayNames'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'dayNames'</span>, [<span class="string">'Dimanche'</span>, <span class="string">'Lundi'</span>, <span class="string">'Mardi'</span>, <span class="string">'Mercredi'</span>, <span class="string">'Jeudi'</span>, <span class="string">'Vendredi'</span>, <span class="string">'Samedi'</span>]);  </span><br><span class="line"></span><br><span class="line">dayNamesMin : <span class="built_in">Array</span> : [<span class="string">'Su'</span>, <span class="string">'Mo'</span>, <span class="string">'Tu'</span>, <span class="string">'We'</span>, <span class="string">'Th'</span>, <span class="string">'Fr'</span>, <span class="string">'Sa'</span>]</span><br><span class="line">  设置一星期中每天的缩语，从星期天开始，此内容用于dateFormat时显示，以前日历中的行头显示。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">dayNamesMin</span>: [<span class="string">'Di'</span>, <span class="string">'Lu'</span>, <span class="string">'Ma'</span>, <span class="string">'Me'</span>, <span class="string">'Je'</span>, <span class="string">'Ve'</span>, <span class="string">'Sa'</span>] &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> dayNamesMin = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'dayNamesMin'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'dayNamesMin'</span>, [<span class="string">'Di'</span>, <span class="string">'Lu'</span>, <span class="string">'Ma'</span>, <span class="string">'Me'</span>, <span class="string">'Je'</span>, <span class="string">'Ve'</span>, <span class="string">'Sa'</span>]);  </span><br><span class="line"></span><br><span class="line">dayNamesShort : <span class="built_in">Array</span> : [<span class="string">'Sun'</span>, <span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>]</span><br><span class="line">  设置一星期中每天的缩语，从星期天开始，此内容用于dateFormat时显示，以前日历中的行头显示。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">dayNamesShort</span>: [<span class="string">'Dim'</span>, <span class="string">'Lun'</span>, <span class="string">'Mar'</span>, <span class="string">'Mer'</span>, <span class="string">'Jeu'</span>, <span class="string">'Ven'</span>, <span class="string">'Sam'</span>] &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> dayNamesShort = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'dayNamesShort'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'dayNamesShort'</span>, [<span class="string">'Dim'</span>, <span class="string">'Lun'</span>, <span class="string">'Mar'</span>, <span class="string">'Mer'</span>, <span class="string">'Jeu'</span>, <span class="string">'Ven'</span>, <span class="string">'Sam'</span>]);  </span><br><span class="line"></span><br><span class="line">defaultDate : <span class="built_in">Date</span>, <span class="built_in">Number</span>, <span class="attr">String</span> : <span class="literal">null</span></span><br><span class="line">  设置默认加载完后第一次显示时选中的日期。可以是<span class="built_in">Date</span>对象，或者是数字（从今天算起，例如+<span class="number">7</span>），或者有效的字符串(<span class="string">'y'</span>代表年, <span class="string">'m'</span>代表月, <span class="string">'w'</span>代表周, <span class="string">'d'</span>代表日, 例如：<span class="string">'+1m +7d'</span>)。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">defaultDate</span>: +<span class="number">7</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> defaultDate = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'defaultDate'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'defaultDate'</span>, +<span class="number">7</span>);  </span><br><span class="line"></span><br><span class="line">duration : <span class="built_in">String</span>, <span class="attr">Number</span> : <span class="string">'normal'</span></span><br><span class="line">  设置日期控件展开动画的显示时间，可选是<span class="string">"slow"</span>, <span class="string">"normal"</span>, <span class="string">"fast"</span>，<span class="string">''</span>代表立刻，数字代表毫秒数。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">duration</span>: <span class="string">'slow'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> duration = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'duration'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'duration'</span>, <span class="string">'slow'</span>);  </span><br><span class="line"></span><br><span class="line">firstDay : <span class="built_in">Number</span> : <span class="number">0</span></span><br><span class="line">  设置一周中的第一天。星期天为<span class="number">0</span>，星期一为<span class="number">1</span>，以此类推。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">firstDay</span>: <span class="number">1</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> firstDay = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'firstDay'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'firstDay'</span>, <span class="number">1</span>);  </span><br><span class="line"></span><br><span class="line">gotoCurrent : <span class="built_in">Boolean</span> : <span class="literal">false</span></span><br><span class="line">  如果设置为<span class="literal">true</span>，则点击当天按钮时，将移至当前已选中的日期，而不是今天。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">gotoCurrent</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> gotoCurrent = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'gotoCurrent'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'gotoCurrent'</span>, <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line">hideIfNoPrevNext : <span class="built_in">Boolean</span> : <span class="literal">false</span></span><br><span class="line">  设置当没有上一个/下一个可选择的情况下，隐藏掉相应的按钮。（默认为不可用）</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">hideIfNoPrevNext</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> hideIfNoPrevNext = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'hideIfNoPrevNext'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'hideIfNoPrevNext'</span>, <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line">isRTL : <span class="built_in">Boolean</span> : <span class="literal">false</span></span><br><span class="line">  如果设置为<span class="literal">true</span>，则所有文字是从右自左。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">isRTL</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> isRTL = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'isRTL'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'isRTL'</span>, <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line">maxDate : <span class="built_in">Date</span>, <span class="built_in">Number</span>, <span class="attr">String</span> : <span class="literal">null</span></span><br><span class="line">  设置一个最大的可选日期。可以是<span class="built_in">Date</span>对象，或者是数字（从今天算起，例如+<span class="number">7</span>），或者有效的字符串(<span class="string">'y'</span>代表年, <span class="string">'m'</span>代表月, <span class="string">'w'</span>代表周, <span class="string">'d'</span>代表日, 例如：<span class="string">'+1m +7d'</span>)。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">maxDate</span>: <span class="string">'+1m +1w'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> maxDate = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'maxDate'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'maxDate'</span>, <span class="string">'+1m +1w'</span>);</span><br><span class="line">       $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'maxDate'</span>, <span class="string">'12/25/2012'</span>);  </span><br><span class="line"></span><br><span class="line">minDate : <span class="built_in">Date</span>, <span class="built_in">Number</span>, <span class="attr">String</span> : <span class="literal">null</span></span><br><span class="line">  设置一个最小的可选日期。可以是<span class="built_in">Date</span>对象，或者是数字（从今天算起，例如+<span class="number">7</span>），或者有效的字符串(<span class="string">'y'</span>代表年, <span class="string">'m'</span>代表月, <span class="string">'w'</span>代表周, <span class="string">'d'</span>代表日, 例如：<span class="string">'+1m +7d'</span>)。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">minDate</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2007</span>, <span class="number">1</span> - <span class="number">1</span>, <span class="number">1</span>) &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> minDate = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'minDate'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'minDate'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2007</span>, <span class="number">1</span> - <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">       $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'minDate'</span>, <span class="string">'12/25/2012'</span>);  </span><br><span class="line"></span><br><span class="line">monthNames : <span class="built_in">Array</span> : [<span class="string">'January'</span>, <span class="string">'February'</span>, <span class="string">'March'</span>, <span class="string">'April'</span>, <span class="string">'May'</span>, <span class="string">'June'</span>, <span class="string">'July'</span>, <span class="string">'August'</span>, <span class="string">'September'</span>, <span class="string">'October'</span>, <span class="string">'November'</span>, <span class="string">'December'</span>]</span><br><span class="line">  设置所有月份的名称。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(｛monthNames:[<span class="string">'Januar'</span>,<span class="string">'Februar'</span>,<span class="string">'Marts'</span>,<span class="string">'April'</span>,<span class="string">'Maj'</span>,<span class="string">'Juni'</span>,<span class="string">'Juli'</span>,<span class="string">'August'</span>,<span class="string">'September'</span>,<span class="string">'Oktober'</span>,<span class="string">'November'</span>,<span class="string">'December'</span>]&#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> monthNames = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'monthNames'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'monthNames'</span>, [<span class="string">'Januar'</span>,<span class="string">'Februar'</span>,<span class="string">'Marts'</span>,<span class="string">'April'</span>,<span class="string">'Maj'</span>,<span class="string">'Juni'</span>,<span class="string">'Juli'</span>,<span class="string">'August'</span>,<span class="string">'September'</span>,<span class="string">'Oktober'</span>,<span class="string">'November'</span>,<span class="string">'December'</span>]);  </span><br><span class="line"></span><br><span class="line">monthNamesShort : <span class="built_in">Array</span> : [<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>, <span class="string">'May'</span>, <span class="string">'Jun'</span>, <span class="string">'Jul'</span>, <span class="string">'Aug'</span>, <span class="string">'Sep'</span>, <span class="string">'Oct'</span>, <span class="string">'Nov'</span>, <span class="string">'Dec'</span>]</span><br><span class="line">  设置所有月份的缩写。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(｛monthNamesShort:[<span class="string">'Jan'</span>,<span class="string">'Feb'</span>,<span class="string">'Mar'</span>,<span class="string">'Apr'</span>,<span class="string">'Maj'</span>,<span class="string">'Jun'</span>,<span class="string">'Jul'</span>,<span class="string">'Aug'</span>,<span class="string">'Sep'</span>,<span class="string">'Okt'</span>,<span class="string">'Nov'</span>,<span class="string">'Dec'</span>]&#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> monthNamesShort = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'monthNamesShort'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'monthNamesShort'</span>, [<span class="string">'Jan'</span>,<span class="string">'Feb'</span>,<span class="string">'Mar'</span>,<span class="string">'Apr'</span>,<span class="string">'Maj'</span>,<span class="string">'Jun'</span>,<span class="string">'Jul'</span>,<span class="string">'Aug'</span>,<span class="string">'Sep'</span>,<span class="string">'Okt'</span>,<span class="string">'Nov'</span>,<span class="string">'Dec'</span>]);  </span><br><span class="line"></span><br><span class="line">navigationAsDateFormat : <span class="built_in">Boolean</span> : <span class="literal">false</span></span><br><span class="line">  如果设置为<span class="literal">true</span>，则formatDate函数将应用到 prevText,nextText和currentText的值中显示，例如显示为月份名称。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">navigationAsDateFormat</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> navigationAsDateFormat = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'navigationAsDateFormat'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'navigationAsDateFormat'</span>, <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line">nextText : <span class="built_in">String</span> : <span class="string">'Next'</span></span><br><span class="line">  设置“下个月”链接的显示文字。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">nextText</span>: <span class="string">'Later'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> nextText = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'nextText'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'nextText'</span>, <span class="string">'Later'</span>);  </span><br><span class="line"></span><br><span class="line">numberOfMonths : <span class="built_in">Number</span>, <span class="attr">Array</span> : <span class="number">1</span></span><br><span class="line">  设置一次要显示多少个月份。如果为整数则是显示月份的数量，如果是数组，则是显示的行与列的数量。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">numberOfMonths</span>: [<span class="number">2</span>, <span class="number">3</span>] &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> numberOfMonths = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'numberOfMonths'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'numberOfMonths'</span>, [<span class="number">2</span>, <span class="number">3</span>]);  </span><br><span class="line"></span><br><span class="line">prevText : <span class="built_in">String</span> : <span class="string">'Prev'</span></span><br><span class="line">  设置“上个月”链接的显示文字。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">prevText</span>: <span class="string">'Earlier'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> prevText = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'prevText'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'prevText'</span>, <span class="string">'Earlier'</span>);  </span><br><span class="line"></span><br><span class="line">shortYearCutoff : <span class="built_in">String</span>, <span class="attr">Number</span> : <span class="string">'+10'</span></span><br><span class="line">  设置截止年份的值。如果是（<span class="number">0</span><span class="number">-99</span>）的数字则以当前年份开始算起，如果为字符串，则相应的转为数字后再与当前年份相加。当超过截止年份时，则被认为是上个世纪。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">shortYearCutoff</span>: <span class="number">50</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> shortYearCutoff = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'shortYearCutoff'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'shortYearCutoff'</span>, <span class="number">50</span>);  </span><br><span class="line"></span><br><span class="line">showAnim : <span class="built_in">String</span> : <span class="string">'show'</span></span><br><span class="line">  设置显示、隐藏日期插件的动画的名称。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">showAnim</span>: <span class="string">'fold'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> showAnim = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showAnim'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showAnim'</span>, <span class="string">'fold'</span>);  </span><br><span class="line"></span><br><span class="line">showButtonPanel : <span class="built_in">Boolean</span> : <span class="literal">false</span></span><br><span class="line">  设置是否在面板上显示相关的按钮。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">showButtonPanel</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> showButtonPanel = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showButtonPanel'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showButtonPanel'</span>, <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line">showCurrentAtPos : <span class="built_in">Number</span> : <span class="number">0</span></span><br><span class="line">  设置当多月份显示的情况下，当前月份显示的位置。自顶部/左边开始第x位。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">showCurrentAtPos</span>: <span class="number">3</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> showCurrentAtPos = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showCurrentAtPos'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showCurrentAtPos'</span>, <span class="number">3</span>);  </span><br><span class="line"></span><br><span class="line">showMonthAfterYear : <span class="built_in">Boolean</span> : <span class="literal">false</span></span><br><span class="line">  是否在面板的头部年份后面显示月份。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">showMonthAfterYear</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> showMonthAfterYear = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showMonthAfterYear'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showMonthAfterYear'</span>, <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line">showOn : <span class="built_in">String</span> : <span class="string">'focus'</span></span><br><span class="line">  设置什么事件触发显示日期插件的面板，可选值：focus, button, both</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">showOn</span>: <span class="string">'both'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> showOn = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showOn'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showOn'</span>, <span class="string">'both'</span>);  </span><br><span class="line"></span><br><span class="line">showOptions : Options : &#123;&#125;</span><br><span class="line">  如果使用showAnim来显示动画效果的话，可以通过此参数来增加一些附加的参数设置。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">showOptions</span>: &#123;<span class="attr">direction</span>: <span class="string">'up'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> showOptions = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showOptions'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showOptions'</span>, &#123;<span class="attr">direction</span>: <span class="string">'up'</span>);  </span><br><span class="line"></span><br><span class="line">showOtherMonths : <span class="built_in">Boolean</span> : <span class="literal">false</span></span><br><span class="line">  是否在当前面板显示上、下两个月的一些日期数（不可选）。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">showOtherMonths</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> showOtherMonths = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showOtherMonths'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'showOtherMonths'</span>, <span class="literal">true</span>);  </span><br><span class="line"></span><br><span class="line">stepMonths : <span class="built_in">Number</span> : <span class="number">1</span></span><br><span class="line">  当点击上/下一月时，一次翻几个月。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">stepMonths</span>: <span class="number">3</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> stepMonths = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'stepMonths'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'stepMonths'</span>, <span class="number">3</span>);  </span><br><span class="line"></span><br><span class="line">yearRange : <span class="built_in">String</span> : <span class="string">'-10:+10'</span></span><br><span class="line">  控制年份的下拉列表中显示的年份数量，可以是相对当前年(-nn:+nn)，也可以是绝对值 (-nnnn:+nnnn)</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">yearRange</span>: <span class="string">'2000:2010'</span> &#125;);</span><br><span class="line">  获取：<span class="keyword">var</span> yearRange = $(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'yearRange'</span>);</span><br><span class="line">  设置：$(<span class="string">'.selector'</span>).datepicker(<span class="string">'option'</span>, <span class="string">'yearRange'</span>, <span class="string">'2000:2010'</span>);</span><br><span class="line">复制代码</span><br><span class="line">beforeShow : <span class="function"><span class="keyword">function</span>(<span class="params">input</span>)</span></span><br><span class="line"><span class="function">  在日期控件显示面板之前，触发此事件，并返回当前触发事件的控件的实例对象。</span></span><br><span class="line"><span class="function">  初始：<span class="title">$</span>(<span class="params"><span class="string">'.selector'</span></span>).<span class="title">datepicker</span>(<span class="params">&#123; beforeShow: function(input</span>) </span>&#123; ... &#125; &#125;);  </span><br><span class="line"></span><br><span class="line">beforeShowDay : <span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span></span><br><span class="line">  在日期控件显示面板之前，每个面板上的日期绑定时都触发此事件，参数为触发事件的日期。调用函数后，必须返回一个数组：[0]此日期是否可选(true/false)，[1]此日期的CSS样式名称(""表示默认)，[2]当鼠标移至上面出现一段提示的内容。</span><br><span class="line">  初始：$(<span class="string">'.selector'</span>).datepicker(&#123; <span class="attr">beforeShowDay</span>: <span class="function"><span class="keyword">function</span>(<span class="params">date</span>) </span>&#123; ... &#125; &#125;);  </span><br><span class="line"></span><br><span class="line">onChangeMonthYear : <span class="function"><span class="keyword">function</span>(<span class="params">year, month, inst</span>)</span></span><br><span class="line"><span class="function">  当年份或月份改变时触发此事件，参数为改变后的年份月份和当前日期插件的实例。</span></span><br><span class="line"><span class="function">  初始：<span class="title">$</span>(<span class="params"><span class="string">'.selector'</span></span>).<span class="title">datepicker</span>(<span class="params">&#123; onChangeMonthYear: function(year, month, inst</span>) </span>&#123; ... &#125; &#125;);  </span><br><span class="line"></span><br><span class="line">onClose : <span class="function"><span class="keyword">function</span>(<span class="params">dateText, inst</span>)</span></span><br><span class="line"><span class="function">  当日期面板关闭后触发此事件（无论是否有选择日期），参数为选择的日期和当前日期插件的实例。</span></span><br><span class="line"><span class="function">  初始：<span class="title">$</span>(<span class="params"><span class="string">'.selector'</span></span>).<span class="title">datepicker</span>(<span class="params">&#123; onClose: function(dateText, inst</span>) </span>&#123; ... &#125; &#125;);</span><br><span class="line">  </span><br><span class="line">onSelect : <span class="function"><span class="keyword">function</span>(<span class="params">dateText, inst</span>)</span></span><br><span class="line"><span class="function">  当在日期面板选中一个日期后触发此事件，参数为选择的日期和当前日期插件的实例。</span></span><br><span class="line"><span class="function">  <span class="title">$</span>(<span class="params"><span class="string">'.selector'</span></span>).<span class="title">datepicker</span>(<span class="params">&#123; onSelect: function(dateText, inst</span>) </span>&#123; ... &#125; &#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="中文显示"><a href="#中文显示" class="headerlink" title="中文显示"></a>中文显示</h4><blockquote>
<p><a href="http://blog.csdn.net/hejinxu/article/details/6085818" rel="external nofollow noopener noreferrer" target="_blank">jQuery UI Datepicker中文显示</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;   </span><br><span class="line">     $.datepicker.regional[<span class="string">'zh-CN'</span>] = &#123;   </span><br><span class="line">        clearText: <span class="string">'清除'</span>,   </span><br><span class="line">        clearStatus: <span class="string">'清除已选日期'</span>,   </span><br><span class="line">        closeText: <span class="string">'关闭'</span>,   </span><br><span class="line">        closeStatus: <span class="string">'不改变当前选择'</span>,   </span><br><span class="line">        prevText: <span class="string">'&lt;上月'</span>,   </span><br><span class="line">        prevStatus: <span class="string">'显示上月'</span>,   </span><br><span class="line">        prevBigText: <span class="string">'&lt;&lt;'</span>,   </span><br><span class="line">        prevBigStatus: <span class="string">'显示上一年'</span>,   </span><br><span class="line">        nextText: <span class="string">'下月&gt;'</span>,   </span><br><span class="line">        nextStatus: <span class="string">'显示下月'</span>,   </span><br><span class="line">        nextBigText: <span class="string">'&gt;&gt;'</span>,   </span><br><span class="line">        nextBigStatus: <span class="string">'显示下一年'</span>,   </span><br><span class="line">        currentText: <span class="string">'今天'</span>,   </span><br><span class="line">        currentStatus: <span class="string">'显示本月'</span>,   </span><br><span class="line">        monthNames: [<span class="string">'一月'</span>,<span class="string">'二月'</span>,<span class="string">'三月'</span>,<span class="string">'四月'</span>,<span class="string">'五月'</span>,<span class="string">'六月'</span>, <span class="string">'七月'</span>,<span class="string">'八月'</span>,<span class="string">'九月'</span>,<span class="string">'十月'</span>,<span class="string">'十一月'</span>,<span class="string">'十二月'</span>],   </span><br><span class="line">        monthNamesShort: [<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>, <span class="string">'七'</span>,<span class="string">'八'</span>,<span class="string">'九'</span>,<span class="string">'十'</span>,<span class="string">'十一'</span>,<span class="string">'十二'</span>],   </span><br><span class="line">        monthStatus: <span class="string">'选择月份'</span>,   </span><br><span class="line">        yearStatus: <span class="string">'选择年份'</span>,   </span><br><span class="line">        weekHeader: <span class="string">'周'</span>,   </span><br><span class="line">        weekStatus: <span class="string">'年内周次'</span>,   </span><br><span class="line">        dayNames: [<span class="string">'星期日'</span>,<span class="string">'星期一'</span>,<span class="string">'星期二'</span>,<span class="string">'星期三'</span>,<span class="string">'星期四'</span>,<span class="string">'星期五'</span>,<span class="string">'星期六'</span>],   </span><br><span class="line">        dayNamesShort: [<span class="string">'周日'</span>,<span class="string">'周一'</span>,<span class="string">'周二'</span>,<span class="string">'周三'</span>,<span class="string">'周四'</span>,<span class="string">'周五'</span>,<span class="string">'周六'</span>],   </span><br><span class="line">        dayNamesMin: [<span class="string">'日'</span>,<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>],   </span><br><span class="line">        dayStatus: <span class="string">'设置 DD 为一周起始'</span>,   </span><br><span class="line">        dateStatus: <span class="string">'选择 m月 d日, DD'</span>,   </span><br><span class="line">        dateFormat: <span class="string">'yy-mm-dd'</span>,   </span><br><span class="line">        firstDay: <span class="number">1</span>,   </span><br><span class="line">        initStatus: <span class="string">'请选择日期'</span>,   </span><br><span class="line">        isRTL: <span class="literal">false</span></span><br><span class="line">    &#125;;   </span><br><span class="line">    $.datepicker.setDefaults($.datepicker.regional[<span class="string">'zh-CN'</span>]);   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意保存时需要把编码方式选为UTF-8.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $.datepicker.setDefaults($.extend(&#123;<span class="attr">showMonthAfterYear</span>: <span class="literal">false</span>&#125;, $.datepicker.regional[<span class="string">''</span>]));  </span><br><span class="line">  $(<span class="string">"#datepicker"</span>).datepicker($.datepicker.regional[<span class="string">'fr'</span>]);</span><br><span class="line">  $(<span class="string">"#locale"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    $(<span class="string">'#datepicker'</span>).datepicker(<span class="string">'option'</span>, $.extend(&#123;<span class="attr">showMonthAfterYear</span>: <span class="literal">false</span>&#125;,  </span><br><span class="line">    $.datepicker.regional[$(<span class="keyword">this</span>).val()]));  </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="改变datepicker大小"><a href="#改变datepicker大小" class="headerlink" title="改变datepicker大小"></a>改变datepicker大小</h4><blockquote>
<p><a href="http://hi.baidu.com/wsy555/item/b48f8b2529573dc1a4275a17" rel="external nofollow noopener noreferrer" target="_blank">jquery datepicker日期插件改变大小</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#ui-datepicker-div"</span>).css(<span class="string">'font-size'</span>,<span class="string">'0.9em'</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Sortable"><a href="#Sortable" class="headerlink" title="Sortable"></a>Sortable</h3><h4 id="jQuery-UI-sortable-table-handle"><a href="#jQuery-UI-sortable-table-handle" class="headerlink" title="jQuery UI sortable table handle"></a>jQuery UI sortable table handle</h4><blockquote>
<p>来自<a href="http://stackoverflow.com/questions/4471520/jquery-ui-sortable-table-handle" rel="external nofollow noopener noreferrer" target="_blank">jQuery UI sortable table handle</a></p>
</blockquote>
<p>点击<code>table</code>的第一格实现拖拉排序功能<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"table tbody"</span>).sortable(&#123;</span><br><span class="line">    handle: <span class="string">'td:first'</span></span><br><span class="line">&#125;).disableSelection();</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="jqueryUI-Sortable-handling-disableSelection-on-form-inputs"><a href="#jqueryUI-Sortable-handling-disableSelection-on-form-inputs" class="headerlink" title="jqueryUI Sortable: handling .disableSelection() on form inputs"></a>jqueryUI Sortable: handling .disableSelection() on form inputs</h4><blockquote>
<p><a href="http://stackoverflow.com/questions/4027158/jqueryui-sortable-handling-disableselection-on-form-inputs" rel="external nofollow noopener noreferrer" target="_blank">jqueryUI Sortable: handling .disableSelection() on form inputs</a></p>
</blockquote>
<p>当拖拉排序之后，如果table中有输入框的话，就无法输入了，可以去掉<code>disableSelection()</code>，也可以做如下修改：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#list"</span>).sortable(&#123;</span><br><span class="line">  stop: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// enable text select on inputs</span></span><br><span class="line">    $(<span class="string">"#list"</span>).find(<span class="string">"input"</span>)</span><br><span class="line">     .bind(<span class="string">'mousedown.ui-disableSelection selectstart.ui-disableSelection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      e.stopImmediatePropagation();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).disableSelection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// enable text select on inputs</span></span><br><span class="line">$(<span class="string">"#list"</span>).find(<span class="string">"input"</span>)</span><br><span class="line"> .bind(<span class="string">'mousedown.ui-disableSelection selectstart.ui-disableSelection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.stopImmediatePropagation();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="设置横向菜单"><a href="#设置横向菜单" class="headerlink" title="设置横向菜单"></a>设置横向菜单</h3><blockquote>
<p><a href="http://www.cnblogs.com/dupeng0811/p/how-to-make-jquery-ui-nav-menu-horizontal.html" rel="external nofollow noopener noreferrer" target="_blank">如何设置Jquery UI Menu 菜单为横向展示</a></p>
</blockquote>
<p>添加如下css<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ui-menu</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ui-menu</span> <span class="selector-class">.ui-menu-item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="jQuery-UI-Tabs获取选中的Tab"><a href="#jQuery-UI-Tabs获取选中的Tab" class="headerlink" title="jQuery UI Tabs获取选中的Tab"></a>jQuery UI Tabs获取选中的Tab</h3><blockquote>
<p><a href="http://www.cnblogs.com/Philoo/archive/2011/09/30/jeasyui_api_tabs.html" rel="external nofollow noopener noreferrer" target="_blank">jQuery EasyUI API 中文文档 - 标签页/选项卡（Tabs）</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pp = $(<span class="string">'#tt'</span>).tabs(<span class="string">'getSelected'</span>);   </span><br><span class="line"><span class="keyword">var</span> tab = pp.panel(<span class="string">'options'</span>).tab;    <span class="comment">// 相应的 tab 对象</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
        <tag>jQueryUI</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 相关知识点整理</title>
    <url>/js-base/</url>
    <content><![CDATA[<p>JavaScript是一门魔性语音，因此收集了不少使用过程中碰到的问题解决方法及相关知识点。</p>
<a id="more"></a>
<h3 id="获取URL中的信息"><a href="#获取URL中的信息" class="headerlink" title="获取URL中的信息"></a>获取URL中的信息</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/1368264/how-to-extract-the-hostname-portion-of-a-url-in-javascript" rel="external nofollow noopener noreferrer" target="_blank">How to extract the hostname portion of a URL in JavaScript</a></p>
</blockquote>
<p><code>http://localhost:8080/webtest1/index.html</code><br><code>window.location.host</code> -&gt; <code>localhost:8080</code><br><code>window.location.hostname</code> -&gt; <code>localhost</code><br><code>window.location.protocol</code> -&gt; <code>http</code><br><code>window.location.port</code> -&gt; <code>8080</code><br><code>window.location.origin</code> -&gt; <code>http://localhost or http://localhost:8080</code></p>
<hr>
<h3 id="格式化日期对象"><a href="#格式化日期对象" class="headerlink" title="格式化日期对象"></a>格式化日期对象</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/3066586/get-string-in-yyyymmdd-format-from-js-date-object" rel="external nofollow noopener noreferrer" target="_blank">Get String in YYYYMMDD format from JS date object?</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.yyyymmdd = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mm = <span class="keyword">this</span>.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> dd = <span class="keyword">this</span>.getDate();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">this</span>.getFullYear(), !mm[<span class="number">1</span>] &amp;&amp; <span class="string">'0'</span>, mm, !dd[<span class="number">1</span>] &amp;&amp; <span class="string">'0'</span>, dd].join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date.yyyymmdd();</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="js中检查对象是否为空"><a href="#js中检查对象是否为空" class="headerlink" title="js中检查对象是否为空"></a>js中检查对象是否为空</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object" rel="external nofollow noopener noreferrer" target="_blank">How do I test for an empty JavaScript object?</a></p>
</blockquote>
<p>ECMA5以后<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span> &amp;&amp; <span class="built_in">JSON</span>.stringify(obj) === <span class="built_in">JSON</span>.stringify(&#123;&#125;);</span><br></pre></td></tr></table></figure></p>
<p>ECMA5之前<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(prop))</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span> &amp;&amp; <span class="built_in">JSON</span>.stringify(obj) === <span class="built_in">JSON</span>.stringify(&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>jQuery:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.isEmptyObject(&#123;&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="apply与call函数"><a href="#apply与call函数" class="headerlink" title="apply与call函数"></a>apply与call函数</h3><blockquote>
<p><a href="http://www.cnblogs.com/delin/archive/2010/06/17/1759695.html" rel="external nofollow noopener noreferrer" target="_blank">js中apply方法的使用</a></p>
</blockquote>
<p>apply方法能劫持另外一个对象的方法，继承另外一个对象的属性。<code>apply(obj, arr)</code>接收两个参数：<br><code>obj</code>: 这个对象将代替Function类里this对象<br><code>arr</code>: 将参数以数组的形式传递到Function中<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">width, height</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.width = width;</span><br><span class="line">	<span class="keyword">this</span>.height = height;</span><br><span class="line">	<span class="keyword">this</span>.area = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="keyword">return</span> <span class="keyword">this</span>.height * <span class="keyword">this</span>.width; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rectangle = <span class="keyword">new</span> Rectangle(<span class="number">6</span>,<span class="number">4</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'rectangle area: '</span> + rectangle.area()); <span class="comment">//rectangle area: 24</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">width</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//Rectangle.call(this, width, width);</span></span><br><span class="line">	Rectangle.call(<span class="keyword">this</span>, [width, width]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> square = <span class="keyword">new</span> Square(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'square area: '</span> + square.area());   <span class="comment">//square area: 16</span></span><br></pre></td></tr></table></figure></p>
<p>这样正方形获取了矩形的求面积方法，便可以计算出面积。<br><code>apply</code>方法还可以用于其他环境，例如找出数组中最大的数字:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]));</span><br></pre></td></tr></table></figure></p>
<p>默认情况下<code>Math.max</code>方法只能接收两个参数，且不能为数组，如果使用上述写法，则可以求出数组中最大的数字来，同理也可以用作<code>Math.min</code>等函数。<br><code>call(obj, arg1, arg2...)</code>方法与<code>apply(obj, arr)</code>方法类似，区别只是参数的不同。<code>call</code>后面跟的参数无限制，以需要获取的函数参数为准，而<code>apply</code>方法传入的是一个参数数组。</p>
<hr>
<h3 id="使用Javascript删除HTML元素"><a href="#使用Javascript删除HTML元素" class="headerlink" title="使用Javascript删除HTML元素"></a>使用Javascript删除HTML元素</h3><blockquote>
<p><a href="http://blog.csdn.net/qingflyer/article/details/4025870" rel="external nofollow noopener noreferrer" target="_blank">用Javascript删除HTML元素 </a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"id"</span>);  </span><br><span class="line">div.style.display = <span class="string">"none"</span>;         <span class="comment">//隐藏而不删除  </span></span><br><span class="line">div.parentNode.removeChild(div);    <span class="comment">//删除</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Javascript替换全部字符"><a href="#Javascript替换全部字符" class="headerlink" title="Javascript替换全部字符"></a>Javascript替换全部字符</h3><blockquote>
<p><a href="http://my.oschina.net/aicoding/blog/68960" rel="external nofollow noopener noreferrer" target="_blank">JavaScript特殊字符替换及替换全部字符串</a><br><a href="http://ys21426.blog.163.com/blog/static/11689204220127335137403/" rel="external nofollow noopener noreferrer" target="_blank">JQuery replace 替换全部</a></p>
</blockquote>
<p>1.替换所有要替换字符<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"$Hello World!$Hello World!$Hello World!"</span>;</span><br><span class="line"><span class="comment">//把所有的“Hello World!”替换为“Welcome you!”。“/g”是替换全部。</span></span><br><span class="line">alert(str.replace(<span class="regexp">/Hello World!/g</span>,<span class="string">"Welcome you!"</span>));</span><br></pre></td></tr></table></figure></p>
<p>2.替换所有要替换的特殊字符<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"$Hello World!$Hello World!$Hello World!"</span>;</span><br><span class="line"><span class="comment">//利用正则表达式把所有的“$”替换为“#”。“$”为特殊字符，所以前面要加“\\”。</span></span><br><span class="line"><span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\$"</span>,<span class="string">"g"</span>);</span><br><span class="line">alert(str.replace(regS,<span class="string">"#"</span>));</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="JavaScript调整图片大小"><a href="#JavaScript调整图片大小" class="headerlink" title="JavaScript调整图片大小"></a>JavaScript调整图片大小</h3><blockquote>
<p><a href="http://www.cnblogs.com/hun_dan/archive/2010/01/05/1639922.html" rel="external nofollow noopener noreferrer" target="_blank">用JavaScript调整图片大小</a></p>
</blockquote>
<p>jquery<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'.post img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxWidth = <span class="number">100</span>; <span class="comment">// 图片最大宽度</span></span><br><span class="line">    <span class="keyword">var</span> maxHeight = <span class="number">100</span>;    <span class="comment">// 图片最大高度</span></span><br><span class="line">    <span class="keyword">var</span> ratio = <span class="number">0</span>;  <span class="comment">// 缩放比例</span></span><br><span class="line">    <span class="keyword">var</span> width = $(<span class="keyword">this</span>).width();    <span class="comment">// 图片实际宽度</span></span><br><span class="line">    <span class="keyword">var</span> height = $(<span class="keyword">this</span>).height();  <span class="comment">// 图片实际高度</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 检查图片是否超宽</span></span><br><span class="line">    <span class="keyword">if</span>(width &gt; maxWidth)&#123;</span><br><span class="line">        ratio = maxWidth / width;   <span class="comment">// 计算缩放比例</span></span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">"width"</span>, maxWidth); <span class="comment">// 设定实际显示宽度</span></span><br><span class="line">        height = height * ratio;    <span class="comment">// 计算等比例缩放后的高度 </span></span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">"height"</span>, height * ratio);  <span class="comment">// 设定等比例缩放后的高度</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 检查图片是否超高</span></span><br><span class="line">    <span class="keyword">if</span>(height &gt; maxHeight)&#123;</span><br><span class="line">        ratio = maxHeight / height; <span class="comment">// 计算缩放比例</span></span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">"height"</span>, maxHeight);   <span class="comment">// 设定实际显示高度</span></span><br><span class="line">        width = width * ratio;    <span class="comment">// 计算等比例缩放后的高度</span></span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">"width"</span>, width * ratio);    <span class="comment">// 设定等比例缩放后的高度</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>javascript<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ResizeImage</span>(<span class="params">image, 插图最大宽度, 插图最大高度</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (image.className == <span class="string">"Thumbnail"</span>)&#123;</span><br><span class="line">        w = image.width;</span><br><span class="line">        h = image.height;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>( w == <span class="number">0</span> || h == <span class="number">0</span> )&#123;</span><br><span class="line">            image.width = maxwidth;</span><br><span class="line">            image.height = maxheight;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (w &gt; h)&#123;</span><br><span class="line">            <span class="keyword">if</span> (w &gt; maxwidth) image.width = maxwidth;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (h &gt; maxheight) image.height = maxheight;</span><br><span class="line">        &#125;</span><br><span class="line">        image.className = <span class="string">"ScaledThumbnail"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>需要手动为图片加上<code>class=&quot;Thumbnail&quot;</code></p>
<hr>
<h3 id="函数多个参数"><a href="#函数多个参数" class="headerlink" title="函数多个参数"></a>函数多个参数</h3><blockquote>
<p><a href="http://www.cnblogs.com/yzx99/archive/2008/08/05/1260561.html" rel="external nofollow noopener noreferrer" target="_blank">javascript返回多个参数</a><br><a href="http://www.cnblogs.com/oec2003/archive/2009/12/11/1621775.html" rel="external nofollow noopener noreferrer" target="_blank">在JS方法中返回多个值的三种方法</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">"hello"</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">"world"</span>;</span><br><span class="line">  <span class="keyword">return</span> [a,b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//json方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="string">"a"</span>:<span class="string">"hello"</span>,<span class="string">"b"</span>:<span class="string">"world"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(f1()[<span class="number">0</span>]+<span class="string">" "</span>+f1()[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(f2()[<span class="string">"a"</span>]+<span class="string">" "</span>+f2()[<span class="string">"b"</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="url参数问题"><a href="#url参数问题" class="headerlink" title="url参数问题"></a>url参数问题</h3><blockquote>
<p><a href="http://www.tuicool.com/articles/VJNbQb" rel="external nofollow noopener noreferrer" target="_blank">Ajax传参之url中特殊字符的处理之血站八方</a><br><a href="http://blog.csdn.net/shikai0302/article/details/12205873" rel="external nofollow noopener noreferrer" target="_blank">Parameters: Character decoding failed解决办法</a><br><a href="http://www.iteye.com/problems/15362" rel="external nofollow noopener noreferrer" target="_blank">url中参数带有双引号怎么办?</a><br><a href="http://y-zjx.iteye.com/blog/1408085" rel="external nofollow noopener noreferrer" target="_blank">url 参数中包含特殊字符</a><br><a href="http://www.w3school.com.cn/jsref/jsref_encodeURIComponent.asp" rel="external nofollow noopener noreferrer" target="_blank">JavaScript encodeURIComponent() 函数</a></p>
</blockquote>
<p>url包含了特殊字符需要转义，否则就会抛出<code>Parameters: Character decoding failed</code>错误。在提交前使用<code>replace</code>方法手动替换<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里将百分号进行转义，/g表示全部替换</span></span><br><span class="line"><span class="keyword">var</span> para = parameter.replace(<span class="regexp">/%/g</span>,<span class="string">"%25"</span>);</span><br></pre></td></tr></table></figure></p>
<p>需转义的部分特殊字符如下</p>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th>代表意义</th>
<th>转码</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>+号表示空格</td>
<td>%2B</td>
</tr>
<tr>
<td>空格</td>
<td>URL中的空格可以用+号</td>
<td>%20</td>
</tr>
<tr>
<td>/</td>
<td>分隔目录和子目录</td>
<td>%2F</td>
</tr>
<tr>
<td>?</td>
<td>分隔实际的 URL 和参数</td>
<td>%3F</td>
</tr>
<tr>
<td>%</td>
<td>指定特殊字符</td>
<td>%25</td>
</tr>
<tr>
<td>#</td>
<td>表示书签</td>
<td>%23</td>
</tr>
<tr>
<td>&amp;</td>
<td>URL 中指定的参数间的分隔符</td>
<td>%26</td>
</tr>
<tr>
<td>=</td>
<td>URL 中指定参数的值</td>
<td>%3D</td>
</tr>
<tr>
<td>!</td>
<td>感叹号</td>
<td>%21</td>
</tr>
<tr>
<td>(</td>
<td>左括号</td>
<td>%28</td>
</tr>
<tr>
<td>)</td>
<td>右括号</td>
<td>%29</td>
</tr>
<tr>
<td>:</td>
<td>冒号</td>
<td>%3a</td>
</tr>
<tr>
<td>@</td>
<td>邮箱连接符</td>
<td>%40</td>
</tr>
<tr>
<td>.</td>
<td>小数点</td>
<td>%2e</td>
</tr>
<tr>
<td>,</td>
<td>逗号</td>
<td>%2c</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="document-forms-0-submit-不提交表单"><a href="#document-forms-0-submit-不提交表单" class="headerlink" title="document.forms[0].submit()不提交表单"></a>document.forms[0].submit()不提交表单</h3><blockquote>
<p><a href="http://zochen.iteye.com/blog/836718" rel="external nofollow noopener noreferrer" target="_blank">document.forms[0].submit()不提交表单</a></p>
</blockquote>
<p>如果确定能够触发<code>submit</code>方法的情况下那就是表单中有标签被命名为<code>submit</code>，改掉即可</p>
<hr>
<h3 id="使用getFullYear-取代getYear-函数"><a href="#使用getFullYear-取代getYear-函数" class="headerlink" title="使用getFullYear()取代getYear()函数"></a>使用<code>getFullYear()</code>取代<code>getYear()</code>函数</h3><blockquote>
<p><a href="http://blog.csdn.net/makuiyu/article/details/7606934" rel="external nofollow noopener noreferrer" target="_blank">JavaScript中getYear()显示错误问题</a></p>
</blockquote>
<p><code>getYear</code>、<code>getFullYear</code>、<code>getUTCFullYear</code>都是Javascript的Date对象的方法函数。其中<code>getYear()</code>方法出生较早，在早期也一直使用OK，可是在2000年后这个方法问题多多，因为在Firefox和Safari等浏览器上，getYear始终返回年份与1900 年之间的差，比如1998年返回98，而2009年则会显示109，如果大家都这么处理也好，要加一起加，微软自己在IE浏览器中把<code>getYear</code>给修正了，可Firefox（最新版本也没修正这个问题）还蒙在鼓里，仍老老实实的按照原有规则解析getYear，本来都可以指望用户自行修正，这样一来都没得用，于是<code>getFullYear</code>、<code>getUTCFullYear</code>就出生了。<br>1、<code>getYear()</code>函数<br>    使用<code>getYear()</code>方法可返回两位或四位数的年份，用<code>getYear()</code>返回的数并不一定是4位的！处于1900年和1999年间的<code>getYear()</code>方法返回的只有两位数。在此之前的或是在此之后的年份返回的都是四位数的，比如2009年，Javascript解析器应该是返回2009的，而浏览器则计算返回109。这应该是早期的约定，而IE埋头改掉了。该函数已经被逐渐废弃并不推荐使用。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getYear());<span class="comment">//IE输出2009，FIREFOX输出109</span></span><br></pre></td></tr></table></figure></p>
<p>2、<code>getFullYea()</code>函数<br>    getFullYea<code>函数则不存在此问题。</code>getFullYear()`方法可返回一个四位数年份，这样大家（IE和FIREFOX等）都不需要运算，直接把解析值输出来即可。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getFullYear());<span class="comment">//IE输出2009，FIREFOX输出2009</span></span><br></pre></td></tr></table></figure></p>
<p>3、getUTCFullYear()函数<br>    <code>getUTCFullYear()</code>函数则是根据UTC时间返回了四位数来代表年份。与<code>getFullYear()</code>方法理论角度是完全不同，虽然在大部分的时间里输出是相同的，但是假如当天日期是12月31日或1月1日，则<code>getUTCFullYear()</code>返回值与<code>getFullYear()</code>返回值就有可能不同，具体取决于当地时区和UTC通用时间之间的关系，也就是差值。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(d.getUTCFullYear());<span class="comment">//IE输出2009，FIREFOX输出2009</span></span><br></pre></td></tr></table></figure></p>
<p>比如在中国大陆、、香港、澳门、蒙古国、台湾、新加坡、马来西亚、菲律宾等地区的本地时间比UTC快8小时，记作UTC+8，意思就是比UTC时间快8小时。减的类似理解，比如UTC-10等。</p>
<hr>
<h3 id="js读取json数据"><a href="#js读取json数据" class="headerlink" title="js读取json数据"></a>js读取json数据</h3><blockquote>
<p><a href="http://www.cnblogs.com/qiantuwuliang/archive/2009/07/21/1527473.html" rel="external nofollow noopener noreferrer" target="_blank">js读取json数据</a></p>
</blockquote>
<p>方法一：函数构造定义法返回<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strJSON = <span class="string">"&#123;name:'json name'&#125;"</span>;<span class="comment">//得到的JSON</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"return"</span> + strJSON)();<span class="comment">//转换后的JSON对象</span></span><br><span class="line">alert(obj.name);<span class="comment">//json name</span></span><br></pre></td></tr></table></figure></p>
<p>方法二：js中著名的eval函数<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strJSON = <span class="string">"&#123;name:'json name'&#125;"</span>;<span class="comment">//得到的JSON</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>( <span class="string">"("</span> + strJSON + <span class="string">")"</span> );<span class="comment">//转换后的JSON对象</span></span><br><span class="line">alert(obj.name);<span class="comment">//json name</span></span><br></pre></td></tr></table></figure></p>
<p><code>eval</code>函数解析的表达式必须加一对括号括住</p>
<hr>
<h3 id="iframe中子父窗口互调的js方法"><a href="#iframe中子父窗口互调的js方法" class="headerlink" title="iframe中子父窗口互调的js方法"></a>iframe中子父窗口互调的js方法</h3><blockquote>
<p><a href="http://www.cnblogs.com/chinafine/archive/2011/09/15/2177746.html" rel="external nofollow noopener noreferrer" target="_blank">iframe中子父窗口互调的js方法</a></p>
</blockquote>
<h4 id="父窗口调用iframe子窗口方法"><a href="#父窗口调用iframe子窗口方法" class="headerlink" title="父窗口调用iframe子窗口方法"></a>父窗口调用iframe子窗口方法</h4><p>HTML语法：<code>&lt;iframe name=&quot;myFrame&quot; src=&quot;child.html&quot;&gt;&lt;/iframe&gt;</code><br>父窗口调用子窗口：<code>myFrame.window.functionName();</code><br>子窗品调用父窗口：<code>parent.functionName();</code><br>简单地说,也就是在子窗口中调用的变量或函数前加个<code>parent.</code>就行</p>
<h4 id="父窗口和子窗口相互的调用方法"><a href="#父窗口和子窗口相互的调用方法" class="headerlink" title="父窗口和子窗口相互的调用方法"></a>父窗口和子窗口相互的调用方法</h4><p>父窗口调用子窗口：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IE</span></span><br><span class="line">iframe_ID.iframe_document_object.object_attribute = attribute_value</span><br><span class="line"><span class="comment">//Firefox</span></span><br><span class="line"><span class="built_in">window</span>.frames[<span class="string">"iframe_ID"</span>].document.getElementById(<span class="string">"iframe_document_object"</span>­).object_attribute = attribute_value</span><br></pre></td></tr></table></figure></p>
<p>子窗口调用父窗口：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IE</span></span><br><span class="line">parent.parent_document_object.object_attribute = attribute_value</span><br><span class="line"><span class="comment">//Firefox</span></span><br><span class="line">parent.document.getElementById(<span class="string">"parent_document_object"</span>).object_attribute = attribute_value</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="动态加载JS文件的三种方法"><a href="#动态加载JS文件的三种方法" class="headerlink" title="动态加载JS文件的三种方法"></a>动态加载JS文件的三种方法</h3><blockquote>
<p><a href="http://www.jb51.net/article/42942.htm" rel="external nofollow noopener noreferrer" target="_blank">动态加载JS文件的三种方法</a></p>
</blockquote>
<p>1.重新生成一个script标签加载js文件<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadJs1</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> head = $(<span class="string">"head"</span>).remove(<span class="string">"script[role='reload']"</span>);</span><br><span class="line">    $(<span class="string">"&lt;script&gt;&lt;/script&gt;"</span>).attr(&#123; <span class="attr">role</span>: <span class="string">'reload'</span>, <span class="attr">src</span>: file, <span class="attr">type</span>: <span class="string">'text/javascript'</span> &#125;).appendTo(head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.需要给script标签定义一个id<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadJs2</span>(<span class="params">id,newJS</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldjs = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> oldjs = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="keyword">if</span>(oldjs) oldjs.parentNode.removeChild(oldjs);</span><br><span class="line">    <span class="keyword">var</span> scriptObj = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    scriptObj.src = newJS;</span><br><span class="line">    scriptObj.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    scriptObj.id = id;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(scriptObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3.使用jquery的<code>getScript</code>方法<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.getScript(<span class="string">'test.js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//可以在这里运行载入的js文件里面的函数</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="javascript回调函数"><a href="#javascript回调函数" class="headerlink" title="javascript回调函数"></a>javascript回调函数</h3><blockquote>
<p><a href="http://www.jb51.net/article/39497.htm" rel="external nofollow noopener noreferrer" target="_blank">JavaScript回调(callback)函数概念自我理解及示例</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"f1"</span>);</span><br><span class="line">  callback();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"c1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"c2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  f1(c1());</span><br><span class="line">  f1(c2());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在以上例子中，<code>f1()</code>中接入的参数为函数时则为回调函数。当f1函数执行完毕后可以执行传入的函数。</p>
<hr>
<h3 id="javascript-闭包"><a href="#javascript-闭包" class="headerlink" title="javascript 闭包"></a>javascript 闭包</h3><blockquote>
<p><a href="http://www.jb51.net/article/24101.htm" rel="external nofollow noopener noreferrer" target="_blank">javascript深入理解js闭包</a></p>
</blockquote>
<h4 id="一、变量的作用域"><a href="#一、变量的作用域" class="headerlink" title="一、变量的作用域"></a>一、变量的作用域</h4><p>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域无非就是两种：<strong>全局变量</strong>和<strong>局部变量</strong>。<br>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　alert(n);</span><br><span class="line">&#125;</span><br><span class="line">f1(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure></p>
<p>另一方面，在函数外部自然无法读取函数内的局部变量。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(n); <span class="comment">// error</span></span><br></pre></td></tr></table></figure></p>
<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　n=<span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line">alert(n); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="二、如何从外部读取局部变量？"><a href="#二、如何从外部读取局部变量？" class="headerlink" title="二、如何从外部读取局部变量？"></a>二、如何从外部读取局部变量？</h4><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。<br>那就是在函数的内部，再定义一个函数。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　n=<span class="number">999</span>;</span><br><span class="line">　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　alert(n); <span class="comment">// 999</span></span><br><span class="line">　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1 就是不可见的。这就是Javascript语言特有的“<strong>链式作用域</strong>”结构（chain scope）: 子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>
<p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　n=<span class="number">999</span>;</span><br><span class="line">　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　alert(n);</span><br><span class="line">　&#125;</span><br><span class="line">  <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=f1();</span><br><span class="line">result(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="三、闭包的概念"><a href="#三、闭包的概念" class="headerlink" title="三、闭包的概念"></a>三、闭包的概念</h4><p>上一节代码中的f2函数，就是闭包。</p>
<p>各种专业文献上的“闭包”（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。<br>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁</p>
<p><strong>官方</strong>的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p>
<p>当内部函数 在定义它的作用域 的外部 被引用时,就创建了该内部函数的闭包 ,如果内部函数引用了位于外部函数的变量,当外部函数调用完毕后,这些变量在内存不会被 释放,因为闭包需要它们. </p>
<hr>
<h4 id="四、闭包的用途"><a href="#四、闭包的用途" class="headerlink" title="四、闭包的用途"></a>四、闭包的用途</h4><p>闭包可以用在许多地方。它的最大用处有两个，<strong>一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中</strong>。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　alert(n);</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">return</span> f2;</span><br><span class="line">　&#125;</span><br><span class="line">　<span class="keyword">var</span> result=f1();</span><br><span class="line">　result(); <span class="comment">// 999</span></span><br><span class="line">　nAdd();</span><br><span class="line">　result(); <span class="comment">// 1000</span></span><br></pre></td></tr></table></figure></p>
<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。<br>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br>这段代码中另一个值得注意的地方，就是<code>nAdd=function(){n+=1}</code>这一行，首先在nAdd前面没有使用var关键字，因此 nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<hr>
<h4 id="五、使用闭包的注意点"><a href="#五、使用闭包的注意点" class="headerlink" title="五、使用闭包的注意点"></a>五、使用闭包的注意点</h4><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。 </p>
<hr>
<h3 id="javascript事件"><a href="#javascript事件" class="headerlink" title="javascript事件"></a>javascript事件</h3><h4 id="input事件"><a href="#input事件" class="headerlink" title="input事件"></a><code>input</code>事件</h4><blockquote>
<p>来自<br><a href="http://blog.sina.com.cn/s/blog_6aaf309f01013o4t.html" rel="external nofollow noopener noreferrer" target="_blank">JavaScript处理input的keyup事件</a><br><a href="http://bbs.blueidea.com/thread-2966314-1-1.html" rel="external nofollow noopener noreferrer" target="_blank">监听输入框值的即时变化onpropertychange、oninput</a></p>
</blockquote>
<p>完整的 key press 过程分为两个部分，按键被按下，然后按键被松开并复位。当按钮被松开时，发生 keyup 事件。它发生在当前获得焦点的元素上。<code>keyup()</code> 方法触发 keyup 事件，或规定当发生 keyup 事件时运行的函数。</p>
<p> IE下，当一个HTML元素的属性改变的时候，都能通过<strong>onpropertychange</strong>来即时捕获。<br>onchange在属性值改变时还必须使得当前元素失去焦点(onblur)才可以激活该事件。在其他浏览器下可以使用<strong>oninput</strong>事件来达到同样的效果。</p>
<hr>
<h4 id="onbeforeunload事件"><a href="#onbeforeunload事件" class="headerlink" title="onbeforeunload事件"></a><code>onbeforeunload</code>事件</h4><blockquote>
<p>来自<br><a href="http://blog.csdn.net/shy_snow/article/details/5408327" rel="external nofollow noopener noreferrer" target="_blank">离开页面前onbeforeunload事件在火狐的兼容并且提交不触发</a><br><a href="http://cssha.com/onbeforeunload-firefox/" rel="external nofollow noopener noreferrer" target="_blank">onbeforeunload 在Firefox中的兼容问题</a><br><a href="http://www.rainweb.cn/article/113.html" rel="external nofollow noopener noreferrer" target="_blank">结合jQuery的unload方法实现JS退出页面弹出对话框</a></p>
</blockquote>
<p><code>onbeforeunload</code>会在网页即将关闭，返回，刷新等条件下触发,可以用于弹出对话框。firefox拥有自己的弹出框，因此需要特殊处理<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onbeforeunload=<span class="function"><span class="keyword">function</span> <span class="title">checkLeave</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//firefox特殊处理</span></span><br><span class="line">  <span class="keyword">var</span> evt = e ? e : (<span class="built_in">window</span>.event ? <span class="built_in">window</span>.event : <span class="literal">null</span>);</span><br><span class="line">  evt.returnValue=<span class="string">'离开会使编写的内容丢失。'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="javascript正则"><a href="#javascript正则" class="headerlink" title="javascript正则"></a>javascript正则</h3><h4 id="只能输入数字及两位小数点"><a href="#只能输入数字及两位小数点" class="headerlink" title="只能输入数字及两位小数点"></a>只能输入数字及两位小数点</h4><blockquote>
<p><a href="http://tianshi-min.blog.163.com/blog/static/35139270201302251859933/?suggestedreading" rel="external nofollow noopener noreferrer" target="_blank">正则表达式实现只能输入.和数字并且只能有两位小数</a><br><a href="http://www.jb51.net/article/17782.htm" rel="external nofollow noopener noreferrer" target="_blank">js 只能输入数字和小数点的文本框改进版</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*判断输入数字*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearNoNum</span>(<span class="params">event, obj</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 响应鼠标事件，允许左右方向键移动</span></span><br><span class="line">	event = <span class="built_in">window</span>.event || event;</span><br><span class="line">	<span class="keyword">if</span> (event.keyCode == <span class="number">37</span> | event.keyCode == <span class="number">39</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">	<span class="comment">// 先把非数字的都替换掉，除了数字和.</span></span><br><span class="line">	obj.value = obj.value.replace(<span class="regexp">/[^\d.]/g</span>, <span class="string">""</span>);</span><br><span class="line">	<span class="comment">// 必须保证第一个为数字而不是.</span></span><br><span class="line">	obj.value = obj.value.replace(<span class="regexp">/^\./g</span>, <span class="string">""</span>);</span><br><span class="line">	<span class="comment">// 保证只有出现一个.而没有多个.</span></span><br><span class="line">	obj.value = obj.value.replace(<span class="regexp">/\.&#123;2,&#125;/g</span>, <span class="string">"."</span>);</span><br><span class="line">	<span class="comment">// 保证.只出现一次，而不能出现两次以上</span></span><br><span class="line">	obj.value = obj.value.replace(<span class="string">"."</span>, <span class="string">"$#$"</span>).replace(<span class="regexp">/\./g</span>, <span class="string">""</span>).replace(<span class="string">"$#$"</span>,<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNum</span>(<span class="params">obj</span>)</span>&#123; </span><br><span class="line">	<span class="comment">// 为了去除最后一个.</span></span><br><span class="line">	obj.value = obj.value.replace(<span class="regexp">/\.$/g</span>,<span class="string">""</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">onkeyup</span>=<span class="string">"clearNoNum(event,this)"</span> <span class="attr">onblur</span>=<span class="string">"checkNum(this)"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="验证身份证号"><a href="#验证身份证号" class="headerlink" title="验证身份证号"></a>验证身份证号</h4><blockquote>
<p><a href="http://snailwong.iteye.com/blog/400298" rel="external nofollow noopener noreferrer" target="_blank">身份证号,出生日期等的js正则表达式验证</a></p>
</blockquote>
<p>简单的正则表达式：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg_match(&quot;/^(\d&#123;18,18&#125;|\d&#123;15,15&#125;|\d&#123;17,17&#125;x)$/&quot;,$id_card) </span><br><span class="line">preg_match(&quot;/^(\d&#123;6&#125;)(18|19|20)?(\d&#123;2&#125;)([01]\d)([0123]\d)(\d&#123;3&#125;)(\d|X)?$/&quot;,$id_card)</span><br><span class="line">reg_match(&quot;/(^\d&#123;15&#125;$/)|(\d&#123;17&#125;(?:\d|x|X)$/),$id_card)</span><br></pre></td></tr></table></figure></p>
<p>严格的验证<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateIdCode</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    num = num.toUpperCase();</span><br><span class="line">	<span class="comment">//身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X。  </span></span><br><span class="line">	<span class="keyword">if</span> (!(<span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;([0-9]|X)$)/</span>.test(num))) &#123;</span><br><span class="line">		alert(<span class="string">'输入的身份证号长度不对，或者号码不符合规定！\n15位号码应全为数字，18位号码末位可以为数字或X。'</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。</span></span><br><span class="line">	<span class="comment">//下面分别分析出生日期和校验位</span></span><br><span class="line">	<span class="keyword">var</span> len, re;</span><br><span class="line">	len = num.length;</span><br><span class="line">	<span class="keyword">if</span> (len == <span class="number">15</span>) &#123;</span><br><span class="line">		re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^(\d&#123;6&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;3&#125;)$/</span>);</span><br><span class="line">		<span class="keyword">var</span> arrSplit = num.match(re);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//检查生日日期是否正确</span></span><br><span class="line">		<span class="keyword">var</span> dtmBirth = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'19'</span> + arrSplit[<span class="number">2</span>] + <span class="string">'/'</span> + arrSplit[<span class="number">3</span>] + <span class="string">'/'</span></span><br><span class="line">				+ arrSplit[<span class="number">4</span>]);</span><br><span class="line">		<span class="keyword">var</span> bGoodDay;</span><br><span class="line">		bGoodDay = (dtmBirth.getYear() == <span class="built_in">Number</span>(arrSplit[<span class="number">2</span>]))</span><br><span class="line">				&amp;&amp; ((dtmBirth.getMonth() + <span class="number">1</span>) == <span class="built_in">Number</span>(arrSplit[<span class="number">3</span>]))</span><br><span class="line">				&amp;&amp; (dtmBirth.getDate() == <span class="built_in">Number</span>(arrSplit[<span class="number">4</span>]));</span><br><span class="line">		<span class="keyword">if</span> (!bGoodDay) &#123;</span><br><span class="line">			alert(<span class="string">'输入的身份证号里出生日期不对！'</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//将15位身份证转成18位</span></span><br><span class="line">			<span class="comment">//校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。</span></span><br><span class="line">			<span class="keyword">var</span> arrInt = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>,</span><br><span class="line">					<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">var</span> arrCh = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'1'</span>, <span class="string">'0'</span>, <span class="string">'X'</span>, <span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'6'</span>, <span class="string">'5'</span>, <span class="string">'4'</span>,</span><br><span class="line">					<span class="string">'3'</span>, <span class="string">'2'</span>);</span><br><span class="line">			<span class="keyword">var</span> nTemp = <span class="number">0</span>, i;</span><br><span class="line">			num = num.substr(<span class="number">0</span>, <span class="number">6</span>) + <span class="string">'19'</span> + num.substr(<span class="number">6</span>, num.length - <span class="number">6</span>);</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">				nTemp += num.substr(i, <span class="number">1</span>) * arrInt[i];</span><br><span class="line">			&#125;</span><br><span class="line">			num += arrCh[nTemp % <span class="number">11</span>];</span><br><span class="line">			<span class="keyword">return</span> num;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (len == <span class="number">18</span>) &#123;</span><br><span class="line">		re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;3&#125;)([0-9]|X)$/</span>);</span><br><span class="line">		<span class="keyword">var</span> arrSplit = num.match(re);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//检查生日日期是否正确</span></span><br><span class="line">		<span class="keyword">var</span> dtmBirth = <span class="keyword">new</span> <span class="built_in">Date</span>(arrSplit[<span class="number">2</span>] + <span class="string">"/"</span> + arrSplit[<span class="number">3</span>] + <span class="string">"/"</span></span><br><span class="line">				+ arrSplit[<span class="number">4</span>]);</span><br><span class="line">		<span class="keyword">var</span> bGoodDay;</span><br><span class="line">		bGoodDay = (dtmBirth.getFullYear() == <span class="built_in">Number</span>(arrSplit[<span class="number">2</span>]))</span><br><span class="line">				&amp;&amp; ((dtmBirth.getMonth() + <span class="number">1</span>) == <span class="built_in">Number</span>(arrSplit[<span class="number">3</span>]))</span><br><span class="line">				&amp;&amp; (dtmBirth.getDate() == <span class="built_in">Number</span>(arrSplit[<span class="number">4</span>]));</span><br><span class="line">		<span class="keyword">if</span> (!bGoodDay) &#123;</span><br><span class="line">			<span class="comment">//alert(dtmBirth.getYear());</span></span><br><span class="line">			<span class="comment">//alert(arrSplit[2]);</span></span><br><span class="line">			alert(<span class="string">'输入的身份证号里出生日期不对！'</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//检验18位身份证的校验码是否正确。</span></span><br><span class="line">			<span class="comment">//校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。</span></span><br><span class="line">			<span class="keyword">var</span> valnum;</span><br><span class="line">			<span class="keyword">var</span> arrInt = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>,</span><br><span class="line">					<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">var</span> arrCh = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'1'</span>, <span class="string">'0'</span>, <span class="string">'X'</span>, <span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'6'</span>, <span class="string">'5'</span>, <span class="string">'4'</span>,</span><br><span class="line">					<span class="string">'3'</span>, <span class="string">'2'</span>);</span><br><span class="line">			<span class="keyword">var</span> nTemp = <span class="number">0</span>, i;</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">				nTemp += num.substr(i, <span class="number">1</span>) * arrInt[i];</span><br><span class="line">			&#125;</span><br><span class="line">			valnum = arrCh[nTemp % <span class="number">11</span>];</span><br><span class="line">			<span class="keyword">if</span> (valnum != num.substr(<span class="number">17</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">				alert(<span class="string">'18位身份证的校验码不正确!'</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> num;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="正则表达式大全"><a href="#正则表达式大全" class="headerlink" title="正则表达式大全"></a>正则表达式大全</h4><blockquote>
<p><a href="http://blog.csdn.net/chaoa888/article/details/7411840" rel="external nofollow noopener noreferrer" target="_blank">正则表达式 ———— 大全</a></p>
</blockquote>
<p>正则表达式及限制字数<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"^\d+$"</span>　　<span class="comment">//非负整数（正整数 + 0）  </span></span><br><span class="line">^(?:<span class="number">0</span>|[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">0</span>,<span class="number">2</span>&#125;)(\.\d)?$(判断数字小于<span class="number">1000</span>,小数位数只能有<span class="number">1</span>位,不是负数的正则表达式)</span><br><span class="line"><span class="string">"^[0-9]*[1-9][0-9]*$"</span>　　<span class="comment">//正整数 </span></span><br><span class="line"><span class="string">"^((-\d+)|(0+))$"</span>　　<span class="comment">//非正整数（负整数 + 0） </span></span><br><span class="line"><span class="string">"^-[0-9]*[1-9][0-9]*$"</span>　　<span class="comment">//负整数 </span></span><br><span class="line"><span class="string">"^-?\d+$"</span>　　　　<span class="comment">//整数 </span></span><br><span class="line"><span class="string">"^\d+(\.\d+)?$"</span>　　<span class="comment">//非负浮点数（正浮点数 + 0） </span></span><br><span class="line"><span class="string">"^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$"</span>　　<span class="comment">//正浮点数 </span></span><br><span class="line"><span class="string">"^((-\d+(\.\d+)?)|(0+(\.0+)?))$"</span>　　<span class="comment">//非正浮点数（负浮点数 + 0） </span></span><br><span class="line"><span class="string">"^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$"</span>　　<span class="comment">//负浮点数 </span></span><br><span class="line"><span class="string">"^(-?\d+)(\.\d+)?$"</span>　　<span class="comment">//浮点数 </span></span><br><span class="line"><span class="string">"^[A-Za-z]+$"</span>　　<span class="comment">//由26个英文字母组成的字符串 </span></span><br><span class="line"><span class="string">"^[A-Z]+$"</span>　　<span class="comment">//由26个英文字母的大写组成的字符串 </span></span><br><span class="line"><span class="string">"^[a-z]+$"</span>　　<span class="comment">//由26个英文字母的小写组成的字符串 </span></span><br><span class="line"><span class="string">"^[A-Za-z0-9]+$"</span>　　<span class="comment">//由数字和26个英文字母组成的字符串 </span></span><br><span class="line"><span class="string">"^\w+$"</span>　　<span class="comment">//由数字、26个英文字母或者下划线组成的字符串 </span></span><br><span class="line"><span class="string">"^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$"</span>　　　　<span class="comment">//email地址 </span></span><br><span class="line"><span class="string">"^[a-zA-z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\S*)?$"</span>　　<span class="comment">//url</span></span><br><span class="line">/^(d&#123;<span class="number">2</span>&#125;|d&#123;<span class="number">4</span>&#125;)-((<span class="number">0</span>([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">1</span>[<span class="number">1</span>|<span class="number">2</span>]))-(([<span class="number">0</span><span class="number">-2</span>]([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">3</span>[<span class="number">0</span>|<span class="number">1</span>]))$/   <span class="comment">// 年-月-日</span></span><br><span class="line">/^((<span class="number">0</span>([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">1</span>[<span class="number">1</span>|<span class="number">2</span>]))/(([<span class="number">0</span><span class="number">-2</span>]([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">3</span>[<span class="number">0</span>|<span class="number">1</span>]))/(d&#123;<span class="number">2</span>&#125;|d&#123;<span class="number">4</span>&#125;)$/   <span class="comment">// 月/日/年</span></span><br><span class="line"><span class="string">"^([w-.]+)@(([[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.)|(([w-]+.)+))([a-zA-Z]&#123;2,4&#125;|[0-9]&#123;1,3&#125;)(]?)$"</span>   <span class="comment">//Emil</span></span><br><span class="line"><span class="string">"(d+-)?(d&#123;4&#125;-?d&#123;7&#125;|d&#123;3&#125;-?d&#123;8&#125;|^d&#123;7,8&#125;)(-d+)?"</span>     <span class="comment">//电话号码</span></span><br><span class="line"><span class="string">"^(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5])$"</span>   <span class="comment">//IP地址</span></span><br></pre></td></tr></table></figure></p>
<p>匹配中文字符的正则表达式： <code>[\u4e00-\u9fa5]</code><br>匹配双字节字符(包括汉字在内)：<code>[^\x00-\xff]</code><br>匹配空行的正则表达式：<code>\n[\s| ]*\r</code><br>匹配HTML标记的正则表达式：<code>/&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;/</code><br>匹配首尾空格的正则表达式：<code>(^\s*)|(\s*$)</code><br>匹配Email地址的正则表达式：<code>\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</code><br>匹配网址URL的正则表达式：<code>^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$</code><br>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code><br>匹配国内电话号码：<code>(\d{3}-|\d{4}-)?(\d{8}|\d{7})?</code><br>匹配腾讯QQ号：<code>^[1-9]*[1-9][0-9]*$</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用正则表达式限制只能输入中文</span></span><br><span class="line">onkeyup=<span class="string">"value=value.replace(/[^u4E00-u9FA5]/g,'')"</span> onbeforepaste=<span class="string">"clipboardData.setData('text',clipboardData.getData('text').replace(/[^u4E00-u9FA5]/g,''))"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用正则表达式限制只能输入全角字符</span></span><br><span class="line">onkeyup=<span class="string">"value=value.replace(/[^uFF00-uFFFF]/g,'')"</span> onbeforepaste=<span class="string">"clipboardData.setData('text',clipboardData.getData('text').replace(/[^uFF00-uFFFF]/g,''))"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用正则表达式限制只能输入数字</span></span><br><span class="line">onkeyup=<span class="string">"value=value.replace(/[^d]/g,'') "</span>onbeforepaste=<span class="string">"clipboardData.setData('text',clipboardData.getData('text').replace(/[^d]/g,''))"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用正则表达式限制只能输入数字和英文</span></span><br><span class="line">onkeyup=<span class="string">"value=value.replace(/[W]/g,'') "</span>onbeforepaste=<span class="string">"clipboardData.setData('text',clipboardData.getData('text').replace(/[^d]/g,''))"</span></span><br></pre></td></tr></table></figure>
<p>元字符及其在正则表达式上下文中的行为：<br><code>\</code> 将下一个字符标记为一个特殊字符、或一个原义字符、或一个后向引用、或一个八进制转义符。<br><code>^</code> 匹配输入字符串的开始位置。如果设置了 RegExp 对象的Multiline 属性，<code>^</code> 也匹配 <code>\n</code> 或 <code>\r</code> 之后的位置。<br><code>$</code> 匹配输入字符串的结束位置。如果设置了 RegExp 对象的Multiline 属性，<code>$</code> 也匹配 <code>\n</code> 或 <code>\r</code> 之前的位置。<br><code>*</code> 匹配前面的子表达式零次或多次。<br><code>+</code> 匹配前面的子表达式一次或多次。<code>+</code> 等价于 <code>{1,}</code>。<br><code>?</code> 匹配前面的子表达式零次或一次。<code>?</code> 等价于 <code>{0,1}</code>。<br><code>{n}</code> n 是一个非负整数，匹配确定的n 次。<br><code>{n,}</code> n 是一个非负整数，至少匹配n 次。<br><code>{n,m}</code> m 和 n 均为非负整数，其中<em>n &lt;= m</em>。最少匹配 n 次且最多匹配 m 次。在逗号和两个数之间不能有空格。<br><code>?</code> 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。<br><code>.</code> 匹配除 <code>\n</code> 之外的任何单个字符。要匹配包括 <code>\n</code> 在内的任何字符，请使用象 <code>[.\n]</code> 的模式.(pattern) 匹配pattern 并获取这一匹配。<br><code>(?:pattern)</code> 匹配pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用<br><code>(?=pattern)</code> 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。<br><code>(?!pattern)</code> 负向预查，与<code>(?=pattern)</code>作用相反<br><code>x|y</code> 匹配 x 或 y<br><code>[xyz]</code> 字符集合<br><code>[^xyz]</code> 负值字符集合<br><code>[a-z]</code> 字符范围，匹配指定范围内的任意字符<br><code>[^a-z]</code> 负值字符范围，匹配任何不在指定范围内的任意字符<br><code>\b</code> 匹配一个单词边界，也就是指单词和空格间的位置<br><code>\B</code> 匹配非单词边界<br><code>\cx</code> 匹配由x指明的控制字符<br><code>\d</code> 匹配一个数字字符。等价于 <code>[0-9]</code><br><code>\D</code> 匹配一个非数字字符。等价于 <code>[^0-9]</code><br><code>\f</code> 匹配一个换页符。等价于 <code>\x0c</code> 和 <code>\cL</code><br><code>\n</code> 匹配一个换行符。等价于 <code>\x0a</code> 和 <code>\cJ</code><br><code>\r</code> 匹配一个回车符。等价于 <code>\x0d</code> 和 <code>\cM</code><br><code>\s</code> 匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[ \f\n\r\t\v]</code><br><code>\S</code> 匹配任何非空白字符。等价于 <code>[^ \f\n\r\t\v]</code><br><code>\t</code> 匹配一个制表符。等价于 <code>\x09</code> 和 <code>\cI</code><br><code>\v</code> 匹配一个垂直制表符。等价于 <code>\x0b</code> 和 <code>\cK</code><br><code>\w</code> 匹配包括下划线的任何单词字符。等价于<code>[A-Za-z0-9_]</code><br><code>\W</code> 匹配任何非单词字符。等价于 <code>[^A-Za-z0-9_]</code><br><code>\xn</code> 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长<br><code>\num</code> 匹配 num，其中num是一个正整数。对所获取的匹配的引用<br><code>\n</code> 标识一个八进制转义值或一个后向引用。如果 <code>\n</code> 之前至少 n 个获取的子表达式，则 n 为后向引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值<br><code>\nm</code> 标识一个八进制转义值或一个后向引用。如果 <code>\nm</code> 之前至少有nm 个获取得子表达式，则 nm 为后向引用。如果 <code>\nm</code> 之前至少有 n 个获取，则 n 为一个后跟文字 m 的后向引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 <code>\nm</code> 将匹配八进制转义值 nm<br><code>\nml</code> 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml<br><code>\un</code> 匹配 n，其中 n 是一个用四个十六进制数字表示的Unicode字符</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>form</tag>
        <tag>date</tag>
        <tag>JavaScript</tag>
        <tag>callback</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>初探istio</title>
    <url>/k8s-istio/</url>
    <content><![CDATA[<p><a href="https://istio.io/" rel="external nofollow noopener noreferrer" target="_blank">istio</a>项目是Service Mesh概念的最新实现，旨在所有主流集群管理平台上提供Service Mesh层，初期以实现Kubernetes上的服务治理层为目标。它由控制平面和数据平面组成：控制平面由Go语言实现，包括pilot、mixer、auth三个组件；数据平面功能由Envoy在pod中以Sidecar的部署形式提供。</p>
<a id="more"></a>
<p>istio由Google与IBM联合创作，看到它的爹都是这么强大的存在，还是赶紧来认识一下它。</p>
<p>这次的实验环境是在Kubernetes平台上，因为就目前来说istio对其支持最好。想想看istio的logo是一艘帆船，而kubernets的logo是舵轮，而docker的logo则是一只鲸鱼，它们之间的关系还真是微妙啊。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>目前使用的<code>istio</code>版本为<code>0.7.1</code>,对环境的要求为<code>Kubernetes &gt;= 1.7.3,minikube &gt;= 0.25</code>,我之前装的Kubernetes及minikube刚好符合这个要求，那就先启动minikube吧:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo minikube start \</span><br><span class="line">--extra-config=controller-manager.ClusterSigningCertFile=<span class="string">"/var/lib/localkube/certs/ca.crt"</span> \</span><br><span class="line">--extra-config=controller-manager.ClusterSigningKeyFile=<span class="string">"/var/lib/localkube/certs/ca.key"</span> \</span><br><span class="line">--extra-config=apiserver.Admission.PluginNames=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota \</span><br><span class="line">--kubernetes-version=v1.9.0 \</span><br><span class="line">--vm-driver=none \</span><br><span class="line">--registry-mirror=<span class="string">"https://registry.docker-cn.com"</span></span><br></pre></td></tr></table></figure></p>
<p>这里对比官网的命令就多加了最后两个选项。<code>--vm-driver</code>表示使用本地<strong>Docker</strong>环境，<code>--registry-mirror</code>指定镜像加速地址。不然等下下载istio的核心服务镜像就可能不成功了。</p>
<p>然后根据官网的命令下载：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://git.io/getLatestIstio | sh -</span><br></pre></td></tr></table></figure></p>
<p>下载好后通过<code>cd</code>命令进入到<code>istio-0.7.1</code>文件目录下，将<code>istioctl</code>客户端加入到环境变量中:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PWD</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p>
<p>在安装istio的核心组件之前，需要修改一下<code>istio.yaml</code>配置文件的<code>istion-ingress</code>服务部分:<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">istio-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">istio-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">istio:</span> <span class="string">ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">32000</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">istio:</span> <span class="string">ingress</span></span><br></pre></td></tr></table></figure></p>
<p>因为我是在<strong>minikube</strong>环境中运行的，按照官网的说法(minikube不支持外部负载均衡)，需要将<code>istio-ingress</code>服务的类型设置为<strong>NodePort</strong>。如果不希望每次运行都随机分配一个端口号，可以通过<code>nodePort</code>属性指定。<br>接下来运行命令安装核心组件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f install/kubernetes/istio.yaml</span><br></pre></td></tr></table></figure></p>
<p>如果想要体验一下<code>istio</code>的自动注入功能，那就需要安装<a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection" rel="external nofollow noopener noreferrer" target="_blank">sidecar injector webhook</a>,(要求<code>Kubernetes &gt;= 1.9.0</code>)。这个功能模块我安装的过程中出了一个问题，就是在执行<code>webhook-create-signed-cert.sh</code>脚本的时候报了一个错：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error: error validating <span class="string">"STDIN"</span>: error validating data: [apiVersion not <span class="built_in">set</span>, kind not <span class="built_in">set</span>]; <span class="keyword">if</span> you choose to ignore these errors, turn validation off with --validate=<span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>然后在<a href="https://github.com/istio/issues/issues/261" rel="external nofollow noopener noreferrer" target="_blank">github issue</a>上边发现也有人讨论类似的问题，解决办法就是将这个脚本的最后一行注释下边的语句替换成:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> create the secret with CA cert and server cert/key</span></span><br><span class="line">echo "apiVersion: v1" &gt; $&#123;tmpdir&#125;/create-secret.yaml</span><br><span class="line">echo "kind: Secret" &gt;&gt; $&#123;tmpdir&#125;/create-secret.yaml</span><br><span class="line">kubectl create secret generic $&#123;secret&#125; \</span><br><span class="line">        --from-file=key.pem=$&#123;tmpdir&#125;/server-key.pem \</span><br><span class="line">        --from-file=cert.pem=$&#123;tmpdir&#125;/server-cert.pem \</span><br><span class="line">        --dry-run -o yaml &gt;&gt; $&#123;tmpdir&#125;/create-secret.yaml</span><br><span class="line">kubectl -n $&#123;namespace&#125; apply -f $&#123;tmpdir&#125;/create-secret.yaml</span><br></pre></td></tr></table></figure></p>
<p>这样这个模块才安装成功。感觉这部分可能是非正式版所以错误还是有的，后边就没有用自动注入的方式而采取的是手动注入的方式。</p>
<p>安装好之后查看一下相关服务及Pod是否已经成功运行了:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc -n istio-system</span><br><span class="line">NAME            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                             AGE</span><br><span class="line">istio-ingress   NodePort    10.104.248.2     &lt;none&gt;        80:32000/TCP,443:31392/TCP                                          2h</span><br><span class="line">istio-mixer     ClusterIP   10.106.203.121   &lt;none&gt;        9091/TCP,15004/TCP,9093/TCP,9094/TCP,9102/TCP,9125/UDP,42422/TCP    2h</span><br><span class="line">istio-pilot     ClusterIP   10.105.143.198   &lt;none&gt;        15003/TCP,15005/TCP,15007/TCP,15010/TCP,8080/TCP,9093/TCP,443/TCP   2h</span><br><span class="line"></span><br><span class="line">$ kubectl get po -n istio-system</span><br><span class="line">NAME                             READY     STATUS    RESTARTS   AGE</span><br><span class="line">istio-ca-86f55cc46f-qqggd        1/1       Running   0          2h</span><br><span class="line">istio-ingress-5bb556fcbf-g2mn5   1/1       Running   0          2h</span><br><span class="line">istio-mixer-86f5df6997-d8gvp     3/3       Running   0          2h</span><br><span class="line">istio-pilot-67d6ddbdf6-6b74h     2/2       Running   0          2h</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果安装了自动注入的模块，还有一个<code>istio-sidecar-injector-*</code>的Pod</p>
</blockquote>
<hr>
<h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><h4 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h4><p>在成功安装好了istio的核心组件之后，就可以开始部署应用了。官网有个十分完整的案例<a href="https://istio.io/docs/guides/bookinfo.html" rel="external nofollow noopener noreferrer" target="_blank">Bookinfo</a>,不过这里我就想着一起复习一下<a href="https://docs.spring.io/spring/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/web-reactive.html" rel="external nofollow noopener noreferrer" target="_blank">spring boot 2 webflux</a>就自己写了一个挺简单的例子。</p>
<p>主要有两个服务:<code>service1</code>及<code>service2</code>。客户端调用<code>service2</code>的服务，然后<code>service2</code>来调用<code>service1</code>的服务，最终将结果返回给客户端。</p>
<p>首先先创建<code>service1</code>的<code>spring boot</code>项目:<br>首先是一个简单的用户类:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> String version;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// getter and setter ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来编写一个<code>Repository</code>类，实现最基本的<em>CRUD</em>：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;Integer, User&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> AtomicInteger ids = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">getUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Mono.justOrEmpty(map.get(id)).switchIfEmpty(Mono.empty());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Flux.fromIterable(map.values());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Integer&gt; <span class="title">createUser</span><span class="params">(<span class="keyword">final</span> Mono&lt;User&gt; user)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> user.doOnNext(u -&gt; &#123;</span><br><span class="line">			Integer id = ids.incrementAndGet();</span><br><span class="line">			u.setId(id);</span><br><span class="line">			map.put(id, u);</span><br><span class="line">		&#125;).flatMap(u -&gt; Mono.just(u.getId()));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">updateUser</span><span class="params">(<span class="keyword">final</span> Mono&lt;User&gt; user)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> user.doOnNext(u -&gt; map.put(u.getId(), u));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">removeUser</span><span class="params">(<span class="keyword">final</span> Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Mono.justOrEmpty(map.remove(id)).switchIfEmpty(Mono.empty());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Mono</code>表示<code>0..1</code>,<code>Flux</code>表示<code>0..n</code>。<code>Reactive Streams</code>已是<code>Rx</code>的标准了。这大概是<code>Spring boot</code>会采用它的原因之一吧。<br>接下来是<code>Service</code>：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserRepository repo;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;SERVICE_VERSION:v1&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String version;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">listUsers</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">		Flux&lt;User&gt; users = repo.getUsers();</span><br><span class="line">		<span class="keyword">return</span> ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(users, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">getUserById</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">		Integer userId = Integer.valueOf(request.pathVariable(<span class="string">"id"</span>));</span><br><span class="line">		Mono&lt;ServerResponse&gt; notFound = ServerResponse.notFound().build();</span><br><span class="line">		Mono&lt;User&gt; user = repo.getUserById(userId);</span><br><span class="line">		<span class="keyword">return</span> user.flatMap(u -&gt; ServerResponse.ok()</span><br><span class="line">					.contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">					.body(BodyInserters.fromObject(u)))</span><br><span class="line">				.switchIfEmpty(notFound);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">addUser</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">		Mono&lt;User&gt; user = request.bodyToMono(User<span class="class">.<span class="keyword">class</span>).<span class="title">doOnNext</span>(<span class="title">u</span>-&gt;<span class="title">u</span>.<span class="title">setVersion</span>(<span class="title">version</span>))</span>;</span><br><span class="line">		<span class="keyword">return</span> repo.createUser(user)</span><br><span class="line">				.flatMap(id -&gt; ServerResponse.ok()</span><br><span class="line">						.contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">						.body(BodyInserters.fromObject(id)))</span><br><span class="line">				.switchIfEmpty(ServerResponse.badRequest().build());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">updateUser</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">		Integer userId = Integer.valueOf(request.pathVariable(<span class="string">"id"</span>));</span><br><span class="line">		Mono&lt;User&gt; user = request.bodyToMono(User<span class="class">.<span class="keyword">class</span>).<span class="title">doOnNext</span>(<span class="title">u</span>-&gt;</span>&#123;</span><br><span class="line">			u.setId(userId);</span><br><span class="line">			u.setVersion(version);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">return</span> repo.updateUser(user)</span><br><span class="line">				.flatMap(u -&gt; ServerResponse.ok()</span><br><span class="line">						.contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">						.body(BodyInserters.fromObject(u)))</span><br><span class="line">				.switchIfEmpty(ServerResponse.badRequest().build());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">deleteUser</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">		Integer userId = Integer.valueOf(request.pathVariable(<span class="string">"id"</span>));</span><br><span class="line">		<span class="keyword">return</span> repo.removeUser(userId).flatMap(user -&gt; ServerResponse.ok()</span><br><span class="line">						.contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">						.body(BodyInserters.fromObject(user)))</span><br><span class="line">				.switchIfEmpty(ServerResponse.badRequest().build());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里的<code>version</code>通过寻找系统变量<code>SERVICE_VERSION</code>来注入，默认值是<code>v1</code>。这个变量在后边创建的<code>Docker</code>镜像中加入。<br>早先接触<code>RxJava</code>的时候就觉得这种链式写法十分爽，调试起来就十分酸爽。<br>然后是<code>Routes</code>文件用来配置路由:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.web.reactive.function.server.RequestPredicates.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.web.reactive.function.server.RouterFunctions.route;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Routes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserHandler userHandler;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">routerFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> route(GET(<span class="string">"/api/users"</span>).and(accept(APPLICATION_JSON)), userHandler::listUsers)</span><br><span class="line">		  .and(route(GET(<span class="string">"/api/users/&#123;id&#125;"</span>).and(accept(APPLICATION_JSON)), userHandler::getUserById))</span><br><span class="line">		  .and(route(POST(<span class="string">"/api/users"</span>).and(contentType(APPLICATION_JSON)), userHandler::addUser))</span><br><span class="line">		  .and(route(PUT(<span class="string">"/api/users/&#123;id&#125;"</span>).and(contentType(APPLICATION_JSON)), userHandler::updateUser))</span><br><span class="line">		  .and(route(DELETE(<span class="string">"/api/users/&#123;id&#125;"</span>).and(accept(APPLICATION_JSON)), userHandler::deleteUser));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种声明式路由最早在<code>RoR</code>中见过，可能比较好管理吧。<br>最后在<code>applicatioin.properties</code>文件中设置<code>server.port=8088</code>指定端口。</p>
<p>然后继续写一个<code>service2</code>项目来调用上边的服务<code>service1</code>，这里用到了<code>webflux</code>的客户端<code>WebClient</code>，最主要的类就是一个<code>Controller</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> WebClient webClient;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@GetMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> webClient.get().uri(<span class="string">"/api/users"</span>).accept(MediaType.APPLICATION_JSON).retrieve().bodyToFlux(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">final</span> Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> webClient.get().uri(<span class="string">"/api/users/&#123;id&#125;"</span>,id).accept(MediaType.APPLICATION_JSON)</span><br><span class="line">				.retrieve().onStatus(HttpStatus::is4xxClientError, res -&gt; Mono.error(<span class="keyword">new</span> Throwable(res.statusCode().getReasonPhrase())))</span><br><span class="line">				.bodyToMono(User<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">				.flatMap(user-&gt;Mono.justOrEmpty("Hello, " + user.getUsername() + " " + user.getVersion()))</span><br><span class="line">				.onErrorReturn(<span class="string">"error"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@PostMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Integer&gt; <span class="title">addUser</span><span class="params">(@RequestBody <span class="keyword">final</span> User user)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> webClient.post().uri(<span class="string">"/api/users"</span>).contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">				.body(BodyInserters.fromObject(user)).retrieve()</span><br><span class="line">				.bodyToMono(Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@PutMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">updateUser</span><span class="params">(@PathVariable <span class="keyword">final</span> Integer id, @RequestBody <span class="keyword">final</span> User user)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> webClient.put().uri(<span class="string">"/api/users/&#123;id&#125;"</span>,id).contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">				.body(BodyInserters.fromObject(user)).retrieve()</span><br><span class="line">				.bodyToMono(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@DeleteMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">deleteUser</span><span class="params">(@PathVariable <span class="keyword">final</span> Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> webClient.delete().uri(<span class="string">"/api/users/&#123;id&#125;"</span>,id).accept(MediaType.APPLICATION_JSON)</span><br><span class="line">				.retrieve().bodyToMono(User<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">				.<span class="title">doOnError</span>(<span class="title">error</span>-&gt;<span class="title">Mono</span>.<span class="title">error</span>(<span class="title">error</span>))</span></span><br><span class="line">				.flatMap(user-&gt;Mono.justOrEmpty("Bye, " + user.getUsername() + " " + user.getVersion()))</span><br><span class="line">				.onErrorReturn(<span class="string">"error"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里需要拷贝一下<code>service1</code>的<code>User.java</code>,然后指定一个配置类注入<code>WebClient</code>：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;service1.url&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String service1Url;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean</span> <span class="function">WebClient <span class="title">webClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> WebClient.create(service1Url);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后需要在<code>application.properties</code>文件中配置端口及调用服务的<code>url</code>：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port=8880</span><br><span class="line">service1.url=http://service1:8088</span><br></pre></td></tr></table></figure></p>
<p>接下来就是通过<code>Maven</code>将各自的项目打包，然后放到不同的文件夹下，准备生成<code>Docker</code>镜像了。</p>
<h4 id="创建Docker镜像"><a href="#创建Docker镜像" class="headerlink" title="创建Docker镜像"></a>创建Docker镜像</h4><p>将打包好的<code>jar</code>放入不同的文件夹下，然后分别生成对应的<code>Dockerfile</code>文件:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM java:8-jdk-alpine</span><br><span class="line"></span><br><span class="line">COPY service1-0.0.1-SNAPSHOT.jar service1.jar</span><br><span class="line"></span><br><span class="line">ARG service_version</span><br><span class="line">ENV SERVICE_VERSION $&#123;service_version:-v1&#125;</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [ &quot;java&quot;, &quot;-Djava.security.egd=file:/dev/./urandom&quot;, &quot;-jar&quot;, &quot;service1.jar&quot; ]</span><br></pre></td></tr></table></figure></p>
<p>这里主要是配置了一个<code>SERVICE_VERSION</code>环境变量，用来标识版本号,然后运行<code>build</code>命令生成镜像:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker build -t service1:v1 --build-arg service_version=v1 .</span><br><span class="line">sudo docker build -t service1:v2 --build-arg service_version=v2 .</span><br></pre></td></tr></table></figure></p>
<p>接下来是生成service2的镜像,跟上边的<code>Dockerfile</code>文件差不多，只不过需要拷贝的jar包不一样:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM java:8-jdk-alpine</span><br><span class="line"></span><br><span class="line">COPY service2-0.0.1-SNAPSHOT.jar service2.jar</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [ &quot;java&quot;, &quot;-Djava.security.egd=file:/dev/./urandom&quot;, &quot;-jar&quot;, &quot;service2.jar&quot; ]</span><br></pre></td></tr></table></figure></p>
<p>然后生成镜像:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker build -t service2:v1 .</span><br></pre></td></tr></table></figure></p>
<h4 id="生成Kubernetes服务"><a href="#生成Kubernetes服务" class="headerlink" title="生成Kubernetes服务"></a>生成Kubernetes服务</h4><p>接着生成相关的<code>Service</code>及<code>Deployment</code>:<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">service1</span>    </span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">service1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service1-v1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">service1</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">service1:v1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8088</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service1-v2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">service1</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v2</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">service1:v2</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8088</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service2</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">service2</span>    </span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8880</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">service2</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">service2</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service2</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">service2:v1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8880</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service2-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">"istio"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/api/users.*</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">service2</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">8880</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p>
<p>这里使用<code>Ingress</code>向集群外暴露服务。这里匹配了如果是<code>/api/users</code>前缀的路径流量都会流转到<code>service2</code>服务中。</p>
<p>接下来就是通过手动注入<code>istio</code>的方式部署应用了：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create -f &lt;(istioctl kube-inject -f service1.yaml)</span><br></pre></td></tr></table></figure></p>
<p>然后通过命令查看一下是否部署成功：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                           READY     STATUS    RESTARTS   AGE</span><br><span class="line">service1-v1-6bcd8675b9-qgrdh   2/2       Running   1          3h</span><br><span class="line">service1-v2-759bc48449-zwk4p   2/2       Running   1          3h</span><br><span class="line">service2-6df4cd875c-jvzj6      2/2       Running   0          3h</span><br></pre></td></tr></table></figure></p>
<p>这里每个<code>Pod</code>的数量都是2,说明istio已经成功将组件服务注入到对应的<code>Pod</code>中了。</p>
<p>由于服务是运行在minikube中的，<code>Ingress</code>并没有外部<code>IP</code>访问，所以需要通过以下命令来获取访问地址:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export TEST_URL=$(kubectl get po -l istio=ingress -n istio-system -o &apos;jsonpath=&#123;.items[0].status.hostIP&#125;&apos;):$(kubectl get svc istio-ingress -n istio-system -o &apos;jsonpath=&#123;.spec.ports[0].nodePort&#125;&apos;)</span><br></pre></td></tr></table></figure></p>
<p>然后通过<code>curl</code>命令增加一条数据：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X POST -d <span class="string">'&#123;"username":"a"&#125;'</span> http://<span class="variable">$TEST_URL</span>/api/users</span><br></pre></td></tr></table></figure></p>
<p>由于<code>service1</code>服务有<code>v1</code>及<code>v2</code>版本，以上命令需要运行两次，这样两个版本都可以添加到相同的数据。</p>
<p>接下来编写一个脚本用来批量访问服务:<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in &#123;1..10&#125;</span><br><span class="line">do</span><br><span class="line">  curl http://$TEST_URL/api/users/1;</span><br><span class="line">  echo "";</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果运行脚本提示没有权限就先用chmod u+x 命令给予权限</p>
</blockquote>
<p>运行脚本，查看输出可以看到流量十分均匀的分布至<code>v1</code>及<code>v2</code>上。</p>
<hr>
<h3 id="流量管理"><a href="#流量管理" class="headerlink" title="流量管理"></a>流量管理</h3><h4 id="流量切分"><a href="#流量切分" class="headerlink" title="流量切分"></a>流量切分</h4><p>编写一个路由规则文件，指定80%的流量访问<code>v1</code>，而20%的流量访问到<code>v2</code>上:<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">config.istio.io/v1alpha2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RouteRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service1-v1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">destination:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">  <span class="attr">precedence:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">route:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v2</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<p><code>weight</code>属性来指定流量的权重，需要注意的是最终权重相加一定要等于100。<br><code>precedence</code>表示优先度。</p>
<p>通过<code>istioctl create</code>命令生成流量规则:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istio create -f service1-routerule-v1.yaml</span><br></pre></td></tr></table></figure></p>
<p>成功生成之后，可以通过命令<code>istioctl get routerule -o yaml</code>方式来查看所有的流量规则。</p>
<p>之后等待一会儿运行一下脚本查看一下结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./request.sh </span><br><span class="line">Hello, a v1</span><br><span class="line">Hello, a v1</span><br><span class="line">Hello, a v2</span><br><span class="line">Hello, a v1</span><br><span class="line">Hello, a v1</span><br><span class="line">Hello, a v1</span><br><span class="line">Hello, a v2</span><br><span class="line">Hello, a v1</span><br><span class="line">Hello, a v1</span><br><span class="line">Hello, a v1</span><br></pre></td></tr></table></figure></p>
<p>流量大部分都是访问到<code>v1</code>版本的<code>service1</code>中。规则成功生效。<br>试验成功之后可以删除这个规则:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istioctl delete -f service1-routerule-v1.yaml</span><br></pre></td></tr></table></figure></p>
<p>当然也可以通过流量规则名来删除:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istioctl delete routerule service1-v1</span><br></pre></td></tr></table></figure></p>
<h4 id="错误注入"><a href="#错误注入" class="headerlink" title="错误注入"></a>错误注入</h4><p>这里通过<code>httpFault</code>属性来注入一些故障。比如设置一个延迟时间为2s,然后50%的流量会返回400错误:<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">config.istio.io/v1alpha2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RouteRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service1-delay-abort</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">destination:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">  <span class="attr">route:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">httpFault:</span></span><br><span class="line">    <span class="attr">delay:</span></span><br><span class="line">      <span class="attr">fixedDelay:</span> <span class="string">2s</span></span><br><span class="line">    <span class="attr">abort:</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">50</span></span><br><span class="line">      <span class="attr">httpStatus:</span> <span class="number">400</span></span><br></pre></td></tr></table></figure></p>
<p>通过<code>istio create</code>生成规则，然后等待一段时间运行脚本查看结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./request.sh</span><br><span class="line">error</span><br><span class="line">error</span><br><span class="line">Hello, a v1</span><br><span class="line">error</span><br><span class="line">Hello, a v1</span><br><span class="line">Hello, a v1</span><br><span class="line">error</span><br><span class="line">error</span><br><span class="line">error</span><br><span class="line">error</span><br></pre></td></tr></table></figure></p>
<p>最后记得清除规则。</p>
<h4 id="请求超时"><a href="#请求超时" class="headerlink" title="请求超时"></a>请求超时</h4><p>在这里将<code>service1</code>的服务调用延时2s，然后设置<code>service2</code>的请求超时时间为1s：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">config.istio.io/v1alpha2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RouteRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service1-delay-timeout</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">destination:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">  <span class="attr">route:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">httpFault:</span></span><br><span class="line">    <span class="attr">delay:</span></span><br><span class="line">      <span class="attr">percent:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">fixedDelay:</span> <span class="string">2s</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">config.istio.io/v1alpha2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RouteRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">service2-timeout</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">destination:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service2</span></span><br><span class="line">  <span class="attr">route:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">httpReqTimeout:</span></span><br><span class="line">    <span class="attr">simpleTimeout:</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">1s</span></span><br></pre></td></tr></table></figure></p>
<p>然后通过<code>istioctl</code>创建规则，等待一段时间运行脚本：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./request.sh</span><br><span class="line">upstream request timeout</span><br><span class="line">upstream request timeout</span><br><span class="line">upstream request timeout</span><br><span class="line">upstream request timeout</span><br><span class="line">upstream request timeout</span><br><span class="line">upstream request timeout</span><br><span class="line">upstream request timeout</span><br><span class="line">upstream request timeout</span><br><span class="line">upstream request timeout</span><br><span class="line">upstream request timeout</span><br></pre></td></tr></table></figure></p>
<p>基本上都出现了超时错误。试验完毕删除规则。</p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>istio还有其他各种强大的流量管理功能比如熔断等等, 不知道是不是运行在minikube中实在是不稳定，经常性的服务访问不到，其他的功能就没试了。目前官网的流量管理规则已经有<code>v1alpha3</code>版本了，已经有挺大的变化，<code>RouteRule</code>变成了<code>VirtualService</code>，<code>Ingress</code>还强烈推荐用<code>Gateway</code>替代，不过<strong>Github</strong>上边的<code>v1alpha3</code>的路由规则在我现在使用的这个版本(0.7.1)中是会出错的，而官网文档的这部分跟<strong>Github</strong>上边也不一致，最终还是用回了<code>v1alpha2</code>的版本。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>istio运行下来觉得毕竟还没有到正式版，<code>api</code>改动还挺大，而且运行过程中经常服务访问不到，流量规则有时候没有效果，可能是运行环境的问题，还是等到正式版出来再看看效果。</p>
<p>最后如果需要删除istio的组件的话进入到istio的文件夹下运行命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl delete -f install/kubernetes/istio.yaml</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>istio</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes初体验：部署无状态服务Redis</title>
    <url>/k8s-redis/</url>
    <content><![CDATA[<p>最近看微服务相关的文章得知下一代微服务的王牌项目貌似是<a href="https://istio.io/" rel="external nofollow noopener noreferrer" target="_blank">istio</a>，而它现阶段又是构建于<a href="https://kubernetes.io/" rel="external nofollow noopener noreferrer" target="_blank">Kubernetes</a>上的，那就想着来简单体验一下Kubernetes。</p>
<a id="more"></a>
<p><strong>Kubernetes</strong>又称<strong>k8s</strong>，根据官网的介绍，”<strong>Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.</strong>“。这里主要使用官网提供的minikube及kubectl工具在<strong>Ubuntu16.04</strong>上部署一个Kubernetes集群，然后实现官网给出的例子<a href="https://github.com/kubernetes/kubernetes/tree/master/examples/storage/redis" rel="external nofollow noopener noreferrer" target="_blank">Reliable, Scalable Redis on Kubernetes</a></p>
<h3 id="安装Kubernetes工具"><a href="#安装Kubernetes工具" class="headerlink" title="安装Kubernetes工具"></a>安装Kubernetes工具</h3><p>首先先安装相关工具<code>kubectl</code>，执行<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>提供的命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl &amp;&amp; chmod +x ./kubectl &amp;&amp; sudo mv ./kubectl /usr/<span class="built_in">local</span>/bin/kubectl</span><br></pre></td></tr></table></figure></p>
<p>当然还有<strong>MacOS</strong>及<strong>Windows</strong>下的安装方法，可以去<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>查看。</p>
<p>接下来是安装<code>minikube</code>，执行以下命令:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.2/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure></p>
<p>需要<strong>MacOS/Windows</strong>版的可以找一下<a href="https://github.com/kubernetes/minikube/releases" rel="external nofollow noopener noreferrer" target="_blank">latest release</a></p>
<p><code>minikube</code>在<strong>Linux</strong>平台上支持<code>--vm-driver=none</code>选项，这个选项可以运行Kubernetes组件在主机的Docker上而不是VM中。</p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>接下来就是启动<code>minikube</code>了：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo minikube start --vm-driver=none</span><br></pre></td></tr></table></figure></p>
<p>如果是运行在VM中就不需要后边的选项了。最初运行的时候他会去自动下载所需镜像，等到下载完毕了出现下边的输出则说明启动成功了：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Starting <span class="built_in">local</span> Kubernetes v1.9.4 cluster...</span><br><span class="line">Starting VM...</span><br><span class="line">Getting VM IP address...</span><br><span class="line">Moving files into cluster...</span><br><span class="line">Setting up certs...</span><br><span class="line">Connecting to cluster...</span><br><span class="line">Setting up kubeconfig...</span><br><span class="line">Starting cluster components...</span><br><span class="line">Kubectl is now configured to use the cluster.</span><br><span class="line">===================</span><br><span class="line">WARNING: IT IS RECOMMENDED NOT TO RUN THE NONE DRIVER ON PERSONAL WORKSTATIONS</span><br><span class="line">	The <span class="string">'none'</span> driver will run an insecure kubernetes apiserver as root that may leave the host vulnerable to CSRF attacks</span><br><span class="line"></span><br><span class="line">When using the none driver, the kubectl config and credentials generated will be root owned and will appear <span class="keyword">in</span> the root home directory.</span><br><span class="line">You will need to move the files to the appropriate location and <span class="keyword">then</span> <span class="built_in">set</span> the correct permissions.  An example of this is below:</span><br><span class="line"></span><br><span class="line">	sudo mv /root/.kube <span class="variable">$HOME</span>/.kube <span class="comment"># this will write over any previous configuration</span></span><br><span class="line">	sudo chown -R <span class="variable">$USER</span> <span class="variable">$HOME</span>/.kube</span><br><span class="line">	sudo chgrp -R <span class="variable">$USER</span> <span class="variable">$HOME</span>/.kube</span><br><span class="line">	</span><br><span class="line">	sudo mv /root/.minikube <span class="variable">$HOME</span>/.minikube <span class="comment"># this will write over any previous configuration</span></span><br><span class="line">	sudo chown -R <span class="variable">$USER</span> <span class="variable">$HOME</span>/.minikube</span><br><span class="line">	sudo chgrp -R <span class="variable">$USER</span> <span class="variable">$HOME</span>/.minikube </span><br><span class="line"></span><br><span class="line">This can also be <span class="keyword">done</span> automatically by setting the env var CHANGE_MINIKUBE_NONE_USER=<span class="literal">true</span></span><br><span class="line">Loading cached images from config file.</span><br></pre></td></tr></table></figure></p>
<p>它给出的命令可以运行一下，影响的结果就是以后如果要执行<code>kubectl</code>的相关命令就无需在前边加<code>sudo</code>了。</p>
<blockquote>
<p>如果<strong>minikube</strong>是运行在<strong>VM</strong>中的话可以在开始的时候添加一个选项<code>--registry-mirror=&quot;https://registry.docker-cn.com&quot;</code>用来设置<strong>Docker</strong>的镜像加速地址,这里使用的是<a href="https://www.docker-cn.com/registry-mirror" rel="external nofollow noopener noreferrer" target="_blank">Docker中国镜像加速</a>。</p>
</blockquote>
<h4 id="发布一个应用"><a href="#发布一个应用" class="headerlink" title="发布一个应用"></a>发布一个应用</h4><p>接下来通过<a href="http://docs.kubernetes.org.cn/468.html" rel="external nofollow noopener noreferrer" target="_blank">run命令</a>来生成一个<a href="http://docs.kubernetes.org.cn/317.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl run nginx --image=&quot;index.tenxcloud.com/docker_library/nginx&quot; --port=80</span><br></pre></td></tr></table></figure></p>
<p>运行成功将会生成一个<code>Deployment</code>，并且自动生成了对应的<a href="http://docs.kubernetes.org.cn/312.html" rel="external nofollow noopener noreferrer" target="_blank">Pod</a>。接下来运行命令可以查看到<code>Pod</code>的状态：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line">NAME                    READY     STATUS              RESTARTS   AGE</span><br><span class="line">nginx-b5f754bc5-gnkls   0/1       ContainerCreating   0          1m</span><br></pre></td></tr></table></figure></p>
<p>如果过了一会儿<code>Pod</code>的状态还是<code>ContainerCreating</code>，那八成是出问题了。由于没有创建成功，自然无法用<code>kubectl logs [POD_NAME]</code>命令查看，这时只能查看<code>minikube</code>日志:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo minikube logs</span><br></pre></td></tr></table></figure></p>
<p>日志很长，不过其中如果可以看到<code>failed pulling image &quot;gcr.io/google_containers/pause-amd64:3.0&quot;</code>这类的信息那就是需要从官网拉取这依赖镜像失败所致。<em>由于<code>Kubernetes</code>的公司是一家在我这连主页都打不开的公司</em>，自然想要拉取镜像是得用点非常手段了。在这里可以通过<a href="https://dev.aliyun.com/search.html" rel="external nofollow noopener noreferrer" target="_blank">阿里云开发者平台</a>来获取对应的镜像，然后打标签为<code>gcr.io</code>:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0 &amp;&amp; sudo docker tag registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0 gcr.io/google_containers/pause-amd64:3.0</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果是运行在<strong>VirtualBox</strong>中，可以通过<code>minikube ssh</code>命令进入到<strong>minikue</strong>内部运行上边的命令</p>
</blockquote>
<p>接下来删除原有的<code>Deployment</code>再重新执行上边的命令等一会儿查看一下<code>Pod</code>状态:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete deployment nginx</span><br><span class="line">kubectl run nginx --image=<span class="string">"index.tenxcloud.com/docker_library/nginx"</span> --port=80</span><br><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line">NAME                    READY     STATUS    RESTARTS   AGE</span><br><span class="line">nginx-b5f754bc5-gnkls   1/1       Running   0          16m</span><br></pre></td></tr></table></figure></p>
<p>这下它已经成功运行起来了。</p>
<p>接下来需要通过<a href="http://docs.kubernetes.org.cn/475.html" rel="external nofollow noopener noreferrer" target="_blank">expose命令</a>将创建好的<code>Deployment</code>暴露一个新的<a href="http://docs.kubernetes.org.cn/703.html" rel="external nofollow noopener noreferrer" target="_blank">服务</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment nginx --name=nginx --<span class="built_in">type</span>=NodePort</span><br></pre></td></tr></table></figure></p>
<p>然后通过命令查看服务：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get services</span><br><span class="line"></span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        40m</span><br><span class="line">nginx        NodePort    10.105.80.209   &lt;none&gt;        80:31156/TCP   5s</span><br></pre></td></tr></table></figure></p>
<p>由于<code>TYPE</code>为<code>NodePort</code>，系统会随机分配一个端口给这项服务，这里分配的是31156，在终端可以使用<code>curl</code>工具来访问:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl $(sudo minikube ip):31156</span><br></pre></td></tr></table></figure></p>
<p>如果能显示出nginx的首页源码则证明服务成功运行。</p>
<hr>
<h3 id="部署redis"><a href="#部署redis" class="headerlink" title="部署redis"></a>部署redis</h3><p>这里主要是使用了官网提供的例子<a href="https://github.com/kubernetes/kubernetes/tree/master/examples/storage/redis" rel="external nofollow noopener noreferrer" target="_blank">Reliable, Scalable Redis on Kubernetes</a>。官网给出的例子用的是<a href="http://docs.kubernetes.org.cn/437.html" rel="external nofollow noopener noreferrer" target="_blank">Replication Controller</a>,而现在使用的则是<a href="http://docs.kubernetes.org.cn/317.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a>。</p>
<blockquote>
<p>如果是运行在<strong>VirtualBox</strong>中，默认给<strong>minikube</strong>分配了一个共享文件夹为<code>C:\Users</code>，在<strong>minikube</strong>内部的文件路径为<code>/c/Users</code>。如果是在主机上下载了这些文件，可以放到共享文件夹中。<a href="https://kubernetes.io/docs/getting-started-guides/minikube/" rel="external nofollow noopener noreferrer" target="_blank">官网参考</a></p>
</blockquote>
<h4 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h4><p>首先需要构建镜像，利用官网给出的<code>image</code>资源，先修改了<code>Dockerfile</code>文件:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/acs/alpine</span><br><span class="line"></span><br><span class="line">RUN apk update</span><br><span class="line">RUN apk upgrade</span><br><span class="line">RUN apk add --no-cache redis sed bash</span><br><span class="line"></span><br><span class="line">COPY redis-master.conf /redis-master/redis.conf</span><br><span class="line">COPY redis-slave.conf /redis-slave/redis.conf</span><br><span class="line">COPY run.sh /run.sh</span><br><span class="line"></span><br><span class="line">RUN chmod +x /run.sh</span><br><span class="line"></span><br><span class="line">CMD [ &quot;/run.sh&quot; ]</span><br><span class="line">ENTRYPOINT [ &quot;bash&quot;, &quot;-c&quot; ]</span><br></pre></td></tr></table></figure></p>
<p><code>Dockerfile</code>文件主要用来创建<strong>Docker</strong>镜像的，部分标签含义如下：</p>
<ul>
<li><code>FROM</code>标签表示创建的镜像，这里用的是<code>alpine</code>，一个容量很小的<code>Linux</code>发行版。</li>
<li><code>RUN</code>标签用于执行的命令。这里是在<code>alpine</code>里安装<code>redis</code>。</li>
<li><code>CMD</code>标签用来指定容器启动时执行的命令，这里是需要运行<code>run.sh</code>脚本。</li>
<li><code>ENTRYPOINT</code>标签用来配置容器启动后执行的命令。</li>
</ul>
<p>这里跟官方例子不同的地方最主要的是加了这句:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RUN chmod +x /run.sh</span><br></pre></td></tr></table></figure></p>
<p>可能是由于我拉取的这个版本的<code>alpine</code>用户权限发生了变化，如果不加这句的话创建出来的容器都活不过三秒。<code>Pod</code>的状态也一直是<code>CrashLoopBackOff</code>。后来使用<code>kubectl logs POD_NAME</code>命令想入容器看一下发现说什么<code>/run.sh permission denied</code>之类的，大概就明白是权限问题了。加了这句就好了。</p>
<p>然后还修改了<code>run.sh</code>脚本的部分：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function launchsentinel() &#123;</span><br><span class="line">  while true; do</span><br><span class="line">    ...</span><br><span class="line">    if [[ -n $&#123;master&#125; ]]; then</span><br><span class="line">      master=&quot;$&#123;master//\&quot;&#125;&quot;</span><br><span class="line">    else</span><br><span class="line">      master=$&#123;REDIS_MASTER_SERVICE_HOST&#125;</span><br><span class="line">    fi</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里主要是在<code>redis</code>哨兵发现主机的判断部分有所修改，我通过将<code>redis-master</code>的服务暴露出来，然后获取到服务地址，通过哨兵的<code>sentinel monitor mymaster ${master} 6379 2</code>配置监听主机。</p>
<p>接下来<code>cd</code>到<code>Dockerfile</code>文件目录下运行<code>docker build</code>命令创建镜像:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker build -t alpine .</span><br></pre></td></tr></table></figure></p>
<p>等创建成功之后可以用<code>docker images</code>查看一下镜像:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REPOSITORY  TAG     IMAGE ID     CREATED      SIZE</span><br><span class="line">alpine      latest  0b73a4ce0ac4 19 hours ago 11.76 MB</span><br></pre></td></tr></table></figure></p>
<p>对比<strong>Ubuntu</strong>之类的镜像可以说是十分迷你了。</p>
<h4 id="生成Kubernetes资源"><a href="#生成Kubernetes资源" class="headerlink" title="生成Kubernetes资源"></a>生成Kubernetes资源</h4><p>接下来是配置生成<code>redis-master</code>的文件:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-master</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      redis-master: &quot;true&quot;</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        redis-master: &quot;true&quot;</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: redis-master</span><br><span class="line">        image: alpine</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br><span class="line">        env:</span><br><span class="line">        - name: MASTER</span><br><span class="line">          value: &quot;true&quot;</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /redis-master-data</span><br><span class="line">          name: data</span><br><span class="line">      volumes:</span><br><span class="line">      - name: data</span><br><span class="line">        emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里生成了一个名为<code>redis-master</code>的<code>Deployment</code>，使用的镜像则是上边生成的<code>alpine</code>，暴露的端口则是<strong>redis</strong>默认的端口6379,这里传入的环境变量为<code>MASTER=true</code>，在<code>run.sh</code>中就会运行<code>launchmaster</code>方法,将<strong>redis</strong>角色设置为主服务器。运行以下命令创建<code>Deployment</code>：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create -f redis-master-deployment.yaml</span><br></pre></td></tr></table></figure></p>
<p>然后查看一下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get deployments</span><br><span class="line">NAME           DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">redis-master   1         1         1            1           5s</span><br></pre></td></tr></table></figure></p>
<p>接下来将它发布成一个新的服务:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment redis-master --name=redis-master --port=6379 --target-port=6379</span><br></pre></td></tr></table></figure></p>
<p><strong>Redis-master</strong>创建成功之后，就可以来创建<strong>redis</strong>哨兵服务了。通过命令创建:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl run redis-sentinel --image=alpine --image-pull-policy=IfNotPresent --port=26379 --expose=<span class="literal">true</span> --replicas=3 --env=<span class="string">"SENTINEL=true"</span></span><br></pre></td></tr></table></figure></p>
<p>通过<a href="http://docs.kubernetes.org.cn/468.html" rel="external nofollow noopener noreferrer" target="_blank">run命令</a>生成一个名为<code>redis-sentinel</code>的<code>Deployment</code>，部分参数含义:</p>
<ul>
<li><code>image</code>：指定镜像（<strong>alpine</strong>）</li>
<li><code>image-pull-policy</code>：镜像拉取策略，<strong>IfNotPresent</strong>表示优先从本地获取</li>
<li><code>env</code>：设置容器中的环境变量，<code>SENTINEL=true</code>则是让<code>alpine</code>的<code>run.sh</code>进入<code>launchsentinel</code>方法将<strong>redis</strong>的角色变为<code>sentinel</code></li>
<li><code>expose</code>：将生成的<code>Deployment</code>自动生成一个服务</li>
<li><code>port</code>: 指定端口,同样用于生成的服务端口。</li>
<li><code>replicas</code>： 生成多少个副本</li>
</ul>
<p>接下来可以查看一下已经生成的服务:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get services</span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">redis-master     ClusterIP   10.98.123.202   &lt;none&gt;        6379/TCP       2h</span><br><span class="line">redis-sentinel   ClusterIP   10.109.167.66   &lt;none&gt;        26379/TCP      2h</span><br></pre></td></tr></table></figure></p>
<p>然后查看一下生成的<code>pod</code>:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line">NAME                              READY     STATUS    RESTARTS   AGE       IP</span><br><span class="line">nginx-b5f754bc5-gnkls             1/1       Running   0          3h        172.17.0.4</span><br><span class="line">redis-master-8485d87c4c-kpbfd     1/1       Running   0          2h        172.17.0.5</span><br><span class="line">redis-sentinel-5655765c58-n455l   1/1       Running   0          2h        172.17.0.8</span><br><span class="line">redis-sentinel-5655765c58-scrgw   1/1       Running   0          2h        172.17.0.7</span><br><span class="line">redis-sentinel-5655765c58-zdqxx   1/1       Running   0          2h        172.17.0.6</span><br></pre></td></tr></table></figure></p>
<p><strong>Kubernetes</strong>的服务发现支持两种方式：环境变量与DNS，这里使用的是环境变量的方式。<br>随机查看一个<strong>redis-sentinel</strong>容器的环境变量:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it redis-sentinel-5655765c58-n455l env|grep REDIS</span><br><span class="line"></span><br><span class="line">REDIS_MASTER_PORT_6379_TCP_ADDR=10.98.123.202</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP_PROTO=tcp</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP_PORT=6379</span><br><span class="line">REDIS_SENTINEL_SERVICE_HOST=10.109.167.66</span><br><span class="line">REDIS_MASTER_SERVICE_PORT=6379</span><br><span class="line">REDIS_SENTINEL_PORT=tcp://10.109.167.66:26379</span><br><span class="line">REDIS_SENTINEL_PORT_26379_TCP=tcp://10.109.167.66:26379</span><br><span class="line">REDIS_MASTER_SERVICE_HOST=10.98.123.202</span><br><span class="line">REDIS_MASTER_PORT_6379_TCP=tcp://10.98.123.202:6379</span><br><span class="line">REDIS_SENTINEL_SERVICE_PORT=26379</span><br><span class="line">REDIS_SENTINEL_PORT_26379_TCP_PROTO=tcp</span><br><span class="line">REDIS_SENTINEL_PORT_26379_TCP_ADDR=10.109.167.66</span><br><span class="line">REDIS_SENTINEL_PORT_26379_TCP_PORT=26379</span><br><span class="line">REDIS_MASTER_PORT=tcp://10.98.123.202:6379</span><br></pre></td></tr></table></figure></p>
<p>在这里我们可以看到生成的<strong>redis-master</strong>及<strong>redis-sentinel</strong>服务的<strong>IP</strong>及端口都已经写入到了容器中的环境变量中，分别是<code>REDIS_MASTER_SERVICE_HOST</code>及<code>REDIS_SENTINEL_SERVICE_HOST</code>。所以在<code>run.sh</code>中需要做对应的修改就明白怎么一回事了：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">launchsentinel</span></span>() &#123;</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    master=$(redis-cli -h <span class="variable">$&#123;REDIS_SENTINEL_SERVICE_HOST&#125;</span> -p <span class="variable">$&#123;REDIS_SENTINEL_SERVICE_PORT&#125;</span> --csv SENTINEL get-master-addr-by-name mymaster | tr <span class="string">','</span> <span class="string">' '</span> | cut -d<span class="string">' '</span> -f1)</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="variable">$&#123;master&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">      master=<span class="string">"<span class="variable">$&#123;master//\"&#125;</span>"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      master=<span class="variable">$&#123;REDIS_MASTER_SERVICE_HOST&#125;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    redis-cli -h <span class="variable">$&#123;master&#125;</span> INFO</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">"$?"</span> == <span class="string">"0"</span> ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Connecting to master failed.  Waiting..."</span></span><br><span class="line">    sleep 10</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  sentinel_conf=sentinel.conf</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"sentinel monitor mymaster <span class="variable">$&#123;master&#125;</span> 6379 2"</span> &gt; <span class="variable">$&#123;sentinel_conf&#125;</span></span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里首先是通过连接<code>REDIS_SENTINEL_SERVICE_HOST</code>的<strong>redis-sentinel</strong>服务来获取对应的<strong>IP</strong>，由于一开始服务并没有运行，所以这里会连接超时。失败了之后就指定<code>REDIS_MASTER_SERVICE_HOST</code>为<strong>主Redis</strong>服务器，接着通过<code>sentinel monitor mymaster ${master} 6379 2</code>配置<strong>redis sentinel</strong>去监听主服务器，判断这个主服务器失效至少需要2个<strong>sentinel</strong>同意。</p>
<blockquote>
<p>这里如果是使用DNS的方式来访问服务可以通过<code>&lt;service name&gt;.&lt;namespace&gt;.svc.cluster.local</code>类似的地址来访问。</p>
</blockquote>
<p>接下来通过<code>logs</code>命令来查看<strong>sentinel</strong>有没有成功运行起来，这里需要等待一会儿:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl logs redis-sentinel-5655765c58-n455l</span><br><span class="line"></span><br><span class="line">···</span><br><span class="line">···<span class="comment"># Sentinel ID is 2e8d3d57dbfe690e242a16397f5bcbcf6e3cfae1</span></span><br><span class="line">···<span class="comment"># +monitor master mymaster 10.98.123.202 6379 quorum 2</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure></p>
<p>如果没有错误日志输出则说明<strong>sentinel</strong>服务已成功运行，接下来就创建<strong>redis slave</strong>服务吧:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl run redis-slave --image=alpine --image-pull-policy=IfNotPresent --port=6379 --replicas=2</span><br></pre></td></tr></table></figure></p>
<p>如果显示创建成功，可以查看一下<code>Pod</code>状态：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line">NAME                              READY     STATUS    RESTARTS   AGE       IP</span><br><span class="line">redis-master-8485d87c4c-kpbfd     1/1       Running   0          2h        172.17.0.5</span><br><span class="line">redis-sentinel-5655765c58-n455l   1/1       Running   0          2h        172.17.0.8</span><br><span class="line">redis-sentinel-5655765c58-scrgw   1/1       Running   0          2h        172.17.0.7</span><br><span class="line">redis-sentinel-5655765c58-zdqxx   1/1       Running   0          2h        172.17.0.6</span><br><span class="line">redis-slave-d888d4974-m97wl       1/1       Running   0          3s        172.17.0.10</span><br><span class="line">redis-slave-d888d4974-nvh9h       1/1       Running   0          3s        172.17.0.9</span><br></pre></td></tr></table></figure></p>
<p>看样子整个<strong>redis sentinel</strong>服务已经建立起来了，接下来就来测试一下能不能成功了。在<code>Ubuntu 16.04</code>中倒是自带了<code>Python</code>环境，就使用它来测试一下。<br>首先需要运行命令<code>pip install redis</code>下载依赖，如果提示没有<code>pip</code>就跟着提示使用<code>apt</code>下载一个吧。然后随便写个测试:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import redis</span><br><span class="line">&gt;&gt;&gt; from redis.sentinel import Sentinel</span><br><span class="line">&gt;&gt;&gt; sentinel = Sentinel([(&quot;10.109.167.66&quot;, 26379)], socket_timeout=0.1)</span><br><span class="line">&gt;&gt;&gt; print sentinel.discover_master(&apos;mymaster&apos;)</span><br><span class="line">(&apos;10.98.123.202&apos;, 6379)</span><br><span class="line">&gt;&gt;&gt; print sentinel.discover_slaves(&apos;mymaster&apos;)</span><br><span class="line">[(&apos;172.17.0.10&apos;, 6379), (&apos;172.17.0.9&apos;, 6379)]</span><br><span class="line">&gt;&gt;&gt; master = sentinel.master_for(&apos;mymaster&apos;, socket_timeout=0.1)</span><br><span class="line">&gt;&gt;&gt; slave = sentinel.slave_for(&apos;mymaster&apos;, socket_timeout=0.1)</span><br><span class="line">&gt;&gt;&gt; master.set(&apos;hello&apos;, &apos;world&apos;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; slave.get(&apos;hello&apos;)</span><br><span class="line">&apos;world&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<p>这里通过<strong>redis-sentinel服务</strong>提供的<strong>IP/端口</strong>连接，然后可以看到<strong>redis</strong>的主从服务器配置。这样看整个<strong>Redis Sentinel主从服务</strong>算是部署成功了吧。</p>
<h4 id="删除资源"><a href="#删除资源" class="headerlink" title="删除资源"></a>删除资源</h4><p>最后如果需要删除上述创建的一切资源可以使用<code>delete</code>命令删除:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl delete services,deployments,pods --all</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Kubernetes控制面板"><a href="#Kubernetes控制面板" class="headerlink" title="Kubernetes控制面板"></a>Kubernetes控制面板</h3><p>如果这家公司的另一个产品<strong>Tensorflow</strong>提供了一个<code>tensorboard</code>，<strong>Kubernetes</strong>也有一个可视化界面。通过以下命令运行:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo minikube dashboard</span><br></pre></td></tr></table></figure></p>
<p>首次运行，我估计十有八九都不会成功，应该都是一直显示<code>Waiting, endpoint for service is not ready yet...</code>这句日志，查看一下日志当然又是跟<code>pause</code>镜像一样的问题<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo minikube logs</span><br></pre></td></tr></table></figure></p>
<p>由于<strong>dashboard</strong>依赖的镜像比较多，可以使用以下命令列举出来:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grep -r &apos;image:&apos; /etc/kubernetes/</span><br><span class="line"></span><br><span class="line">/etc/kubernetes/addons/storage-provisioner.yaml:    image: gcr.io/k8s-minikube/storage-provisioner:v1.8.1</span><br><span class="line">/etc/kubernetes/addons/kube-dns-controller.yaml:        image: k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.5</span><br><span class="line">/etc/kubernetes/addons/kube-dns-controller.yaml:        image: k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span><br><span class="line">/etc/kubernetes/addons/kube-dns-controller.yaml:        image: k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.5</span><br><span class="line">/etc/kubernetes/addons/dashboard-dp.yaml:        image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.1</span><br><span class="line">/etc/kubernetes/manifests/addon-manager.yaml:    image: gcr.io/google-containers/kube-addon-manager:v6.5</span><br></pre></td></tr></table></figure></p>
<p>接下来还是得使用打标签大法将这些镜像自己拉取下来：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-addon-manager:v6.5 &amp;&amp; sudo docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-addon-manager:v6.5 gcr.io/google-containers/kube-addon-manager:v6.5</span><br><span class="line"></span><br><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/storage-provisioner:v1.8.1 &amp;&amp; sudo docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/storage-provisioner:v1.8.1 gcr.io/k8s-minikube/storage-provisioner:v1.8.1</span><br><span class="line"></span><br><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/google-containers/kubernetes-dashboard-amd64:v1.7.1 &amp;&amp; sudo docker tag registry.cn-hangzhou.aliyuncs.com/google-containers/kubernetes-dashboard-amd64:v1.7.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.8.1</span><br><span class="line"></span><br><span class="line">sudo docker pull registry.cn-shenzhen.aliyuncs.com/gcrio/k8s-dns-kube-dns-amd64:latest &amp;&amp; sudo docker tag registry.cn-shenzhen.aliyuncs.com/gcrio/k8s-dns-kube-dns-amd64:latest k8s.gcr.io/k8s-dns-kube-dns-amd64:1.14.5</span><br><span class="line"></span><br><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5 &amp;&amp; sudo docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.5 k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64:1.14.5</span><br><span class="line"></span><br><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:1.14.5 &amp;&amp; sudo docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:1.14.5 k8s.gcr.io/k8s-dns-sidecar-amd64:1.14.5</span><br></pre></td></tr></table></figure></p>
<p>成功拉取下对应的镜像并且打好标签之后重新运行一下<strong>minikube</strong>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo minikube stop</span><br><span class="line">sudo minikube start --vm-driver=none</span><br></pre></td></tr></table></figure></p>
<p>成功运行起来之后再次运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo minikube dashboard</span><br></pre></td></tr></table></figure></p>
<p>如果运气好能够成功弹出浏览器，那就可以去看一下控制面板的内容了。<br>而我偏偏属于运气不好的，控制台还是一直在输出<code>Waiting, endpoint for service is not ready yet...</code>。只好去查看一下这些<strong>Pod</strong>的状态:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get pods --namespace=kube-system</span><br></pre></td></tr></table></figure></p>
<p>发现那些什么<code>dashboard</code>、<code>storage-provisioner</code>的状态都是<code>CrashLoopBackOff</code>(已经见到它好几次了)，通过日志才发现估计是<code>secret</code>的问题，删除让系统自动生成就好了<a href="https://github.com/kubernetes/minikube/issues/288" rel="external nofollow noopener noreferrer" target="_blank">github issue</a>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl delete secrets --namespace=kube-system --all</span><br><span class="line">kubectl delete pods --namespace=kube-system --all</span><br></pre></td></tr></table></figure></p>
<p>然后通过命令重启一下<code>minikube</code>，这个时候首先看一下<strong>dashboard</strong>的那几个<strong>pod</strong>的状态:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get pods --namespace=kube-system</span><br><span class="line"></span><br><span class="line">NAME                                    READY     STATUS    RESTARTS   AGE</span><br><span class="line">kube-addon-manager-ezio-virtualbox      1/1       Running   1          5h</span><br><span class="line">kube-dns-54cccfbdf8-gzrdg               3/3       Running   0          5h</span><br><span class="line">kubernetes-dashboard-77d8b98585-lgl54   1/1       Running   0          5h</span><br><span class="line">storage-provisioner                     1/1       Running   0          5h</span><br></pre></td></tr></table></figure></p>
<p>看到他们都已经成功运行了，再运行一下<code>sudo minikube dashboard</code>命令，终于算是成功打开浏览器并且访问到<strong>Kubernetes</strong>的控制面板了。</p>
<blockquote>
<p>参考<br><a href="https://qii404.me/2018/01/06/minukube.html" rel="external nofollow noopener noreferrer" target="_blank">使用minikube在本机搭建kubernetes集群</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 相关知识补遗</title>
    <url>/linux-cmd/</url>
    <content><![CDATA[<h3 id="linux-chmod命令"><a href="#linux-chmod命令" class="headerlink" title="linux chmod命令"></a>linux chmod命令</h3><blockquote>
<p><a href="http://www.linuxso.com/command/chmod.html" rel="external nofollow noopener noreferrer" target="_blank">linux chmod命令参数及用法详解–文件文件夹权限设定命令</a></p>
</blockquote>
<p>使用权限 : 所有使用者<br>使用方式 : chmod [-cfvR] [–help] [–version] mode file…<br>说明 : Linux/Unix 的档案存取权限分为三级 : <strong>档案拥有者</strong>、<strong>群组</strong>、<strong>其他</strong>。利用<code>chmod</code>可以藉以控制档案如何被他人所存取。</p>
<p>mode: 权限设定字串，格式如下 : [ugoa…][[+-=][rwxX]…][,…]，其中u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</p>
<ul>
<li>表示增加权限、- 表示取消权限、= 表示唯一设定权限。<br>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。<br>-c : 若该档案权限确实已经更改，才显示其更改动作<br>-f : 若该档案权限无法被更改也不要显示错误讯息<br>-v : 显示权限变更的详细资料<br>-R : 对目前目录下的所有档案与子目录进行相同的权限变更(即以递回的方式逐个变更)<br>–help : 显示辅助说明<br>–version : 显示版本<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//将档案 file1.txt 设为所有人皆可读取 :</span><br><span class="line">chmod ugo+r file1.txt</span><br><span class="line">//将档案 file1.txt 设为所有人皆可读取 :</span><br><span class="line">chmod a+r file1.txt</span><br><span class="line">//将档案 file1.txt 与 file2.txt //设为该档案拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</span><br><span class="line">chmod ug+w,o-w file1.txt file2.txt</span><br><span class="line">//将 ex1.py 设定为只有该档案拥有者可以执行 :</span><br><span class="line">chmod u+x ex1.py</span><br><span class="line">//将目前目录下的所有档案与子目录皆设为任何人可读取 :</span><br><span class="line">chmod -R a+r *</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>此外chmod也可以用数字来表示权限如 chmod 777 file<br>语法为：<code>chmod abc file</code><br>其中a,b,c各为一个数字，分别表示<strong>User</strong>、<strong>Group</strong>、及<strong>Other</strong>的权限。<br>r=4，w=2，x=1<br>若要rwx属性则4+2+1=7；<br>若要rw-属性则4+2=6；<br>若要r-x属性则4+1=7。<br>范例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod a=rwx file</span><br><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure></p>
<p>与下等效<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod ug=rwx,o=x file</span><br><span class="line">chmod 771 file</span><br></pre></td></tr></table></figure></p>
<p>若用<code>chmod 4755 filename</code>可使此程式具有root的权限<br>指令名称 : chown<br>使用权限 : root</p>
<p>使用方式 : <code>chmod [-cfhvR] [--help] [--version] user[:group] file...</code></p>
<p>说明 : Linux/Unix 是多人多工作业系统，所有的档案皆有拥有者。利用 chown 可以将档案的拥有者加以改变。一般来说，这个指令只有是由系统管理者(root)所使用，一般使用者没有权限可以改变别人的档案拥有者，也没有权限可以自己的档案拥有者改设为别人。只有系统管理者(root)才有这样的权限。</p>
<p><strong>user</strong>: 新的档案拥有者的使用者 IDgroup : 新的档案拥有者的使用者群体(group)-c : 若该档案拥有者确实已经更改，才显示其更改动作-f : 若该档案拥有者无法被更改也不要显示错误讯息-h : 只对于连结(link)进行变更，而非该 link 真正指向的档案-v : 显示拥有者变更的详细资料-R : 对目前目录下的所有档案与子目录进行相同的拥有者变更(即以递回的方式逐个变更)–help : 显示辅助说明–version : 显示版本</p>
<p>范例 :<br>//将档案 file1.txt 的拥有者设为 users 群体的使用者 jessie :<br>chown jessie:users file1.txt</p>
<p>将目前目录下的所有档案与子目录的拥有者皆设为 users 群体的使用者 lamport :<br>chmod -R lamport:users *<br>-rw——- (600) – 只有属主有读写权限。</p>
<p>-rw-r–r– (644) – 只有属主有读写权限；而属组用户和其他用户只有读权限。</p>
<p>-rwx—— (700) – 只有属主有读、写、执行权限。</p>
<p>-rwxr-xr-x (755) – 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</p>
<p>-rwx–x–x (711) – 属主有读、写、执行权限；而属组用户和其他用户只有执行权限。</p>
<p>-rw-rw-rw- (666) – 所有用户都有文件读、写权限。这种做法不可取。</p>
<p>-rwxrwxrwx (777) – 所有用户都有读、写、执行权限。更不可取的做法。</p>
<p>以下是对目录的两个普通设定:</p>
<p>drwx—— (700) - 只有属主可在目录中读、写。</p>
<p>drwxr-xr-x (755) - 所有用户可读该目录，但只有属主才能改变目录中的内容<br>suid的代表数字是4，比如4755的结果是-rwsr-xr-x<br>sgid的代表数字是2，比如6755的结果是-rwsr-sr-x<br>sticky位代表数字是1，比如7755的结果是-rwsr-sr-t</p>
<hr>
<h3 id="SUID与SGID的意义"><a href="#SUID与SGID的意义" class="headerlink" title="SUID与SGID的意义"></a>SUID与SGID的意义</h3><blockquote>
<p><a href="http://www.linuxeden.com/html/unix/20071031/36892.html" rel="external nofollow noopener noreferrer" target="_blank">关于UNIX和Linux系统下SUID、SGID的解析</a></p>
</blockquote>
<h4 id="一、UNIX下关于文件权限的表示方法和解析"><a href="#一、UNIX下关于文件权限的表示方法和解析" class="headerlink" title="一、UNIX下关于文件权限的表示方法和解析"></a>一、UNIX下关于文件权限的表示方法和解析</h4><p><code>SUID</code> 是<em>Set User ID</em>, <code>SGID</code> 是<em>Set Group ID</em>的意思。<br>UNIX下可以用ls -l 命令来看到文件的权限。用ls命令所得到的表示法的格式是类似这样的：<code>-rwxr-xr-x</code> 。下面解析一下格式所表示的意思。这种表示方法一共有十位：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9 8 7 6 5 4 3 2 1 0</span><br><span class="line">- r w x r - x r - x</span><br></pre></td></tr></table></figure></p>
<p>第9位表示文件类型,可以为p、d、l、s、c、b和-：<br>p表示命名管道文件<br>d表示目录文件<br>l表示符号连接文件<br>-表示普通文件<br>s表示socket文件<br>c表示字符设备文件<br>b表示块设备文件</p>
<p>第8-6位、5-3位、2-0位分别表示文件所有者的权限，同组用户的权限，其他用户的权限，其形式为<code>rwx</code>：<br>r表示可读，可以读出文件的内容<br>w表示可写，可以修改文件的内容<br>x表示可执行，可运行这个程序<br>没有权限的位置用-表示<br>例子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l myfile显示为：</span><br><span class="line">-rwxr-x--- 1 foo staff 7734 Apr 05 17:07 myfile</span><br></pre></td></tr></table></figure></p>
<p>表示文件myfile是普通文件，文件的所有者是foo用户，而foo用户属于staff组，文件只有1个硬连接，长度是7734个字节，最后修改时间4月5日17:07。<br>所有者foo对文件有读写执行权限，staff组的成员对文件有读和执行权限，其他的用户对这个文件没有权限。<br>如果一个文件被设置了SUID或SGID位，会分别表现在所有者或同组用户的权限的可执行位上。例如：<br>1、-rwsr-xr-x 表示SUID和所有者权限中可执行位被设置<br>2、-rwSr–r– 表示SUID被设置，但所有者权限中可执行位没有被设置<br>3、-rwxr-sr-x 表示SGID和同组用户权限中可执行位被设置<br>4、-rw-r-Sr– 表示SGID被设置，但同组用户权限中可执行位没有被社</p>
<p>其实在UNIX的实现中，文件权限用12个二进制位表示，如果该位置上的值是<br>1，表示有相应的权限：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">11 10 9 8 7 6 5 4 3 2 1 0</span><br><span class="line">S G T r w x r w x r w x</span><br></pre></td></tr></table></figure></p>
<p>第11位为SUID位，第10位为SGID位，第9位为sticky位，第8-0位对应于上面的三组rwx位。<br>11 10 9 8 7 6 5 4 3 2 1 0<br>上面的-rwsr-xr-x的值为： 1 0 0 1 1 1 1 0 1 1 0 1<br>-rw-r-Sr–的值为： 0 1 0 1 1 0 1 0 0 1 0 0</p>
<p>给文件加SUID和SUID的命令如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod u+s filename 设置SUID位</span><br><span class="line">chmod u<span class="_">-s</span> filename 去掉SUID设置</span><br><span class="line">chmod g+s filename 设置SGID位</span><br><span class="line">chmod g<span class="_">-s</span> filename 去掉SGID设置</span><br></pre></td></tr></table></figure></p>
<p>另外一种方法是chmod命令用八进制表示方法的设置。如果明白了前面的12位权限表示法也很简单。</p>
<h4 id="二、SUID和SGID的详细解析"><a href="#二、SUID和SGID的详细解析" class="headerlink" title="二、SUID和SGID的详细解析"></a>二、SUID和SGID的详细解析</h4><p>由于SUID和SGID是在执行程序（程序的可执行位被设置）时起作用，而可执行位只对普通文件和目录文件有意义，所以设置其他种类文件的SUID和SGID位是没有多大意义的。</p>
<p>首先讲普通文件的SUID和SGID的作用。例子：<br>如果普通文件myfile是属于foo用户的，是可执行的，现在没设SUID位，ls命令显示如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-rwxr-xr-x 1 foo staff 7734 Apr 05 17:07</span><br></pre></td></tr></table></figure></p>
<p>myfile任何用户都可以执行这个程序。UNIX的内核是根据什么来确定一个进程对资源的访问权限的呢？是这个进程的运行用户的（有效）ID，包括user id和group id。用户可以用id命令来查到自己的或其他用户的user id和group id。<br>除了一般的user id 和group id外，还有两个称之为effective 的id，就是有效id，上面的四个id表示为：<code>uid，gid，euid，egid</code>。内核主要是根据euid和egid来确定进程对资源的访问权限。<br>一个进程如果没有SUID或SGID位，则euid=uid egid=gid，分别是运行这个程序的用户的uid和gid。例如kevin用户的uid和gid分别为204和202，foo用户的uid和gid为200，201，kevin运行myfile程序形成的进程的euid=uid=204，egid=gid=202，内核根据这些值来判断进程对资源访问的限制，其实就是kevin用户对资源访问的权限，和foo没关系。<br>如果一个程序设置了SUID，则euid和egid变成被运行的程序的所有者的uid和gid，例如kevin用户运行myfile，euid=200，egid=201，uid=204，gid=202，则这个进程具有它的属主foo的资源访问权限。</p>
<p>SUID的作用就是这样：让本来没有相应权限的用户运行这个程序时，可以访问他没有权限访问的资源。passwd就是一个很鲜明的例子。<br>SUID的优先级比SGID高，当一个可执行程序设置了SUID，则SGID会自动变成相应的egid。</p>
<p>下面讨论一个例子：<br>UNIX系统有一个/dev/kmem的设备文件，是一个字符设备文件，里面存储了核心程序要访问的数据，包括用户的口令。所以这个文件不能给一般的用户读写，权限设为：<code>cr--r----- 1 root system 2, 1 May 25 1998 kmem</code></p>
<p>但ps等程序要读这个文件，而ps的权限设置如下：<br><code>-r-xr-sr-x 1 bin system 59346 Apr 05 1998 ps</code><br>这是一个设置了SGID的程序，而ps的用户是bin，不是root，所以不能设置SUID来访问kmem，但大家注意了，bin和root都属于system组，而且ps设置了SGID，一般用户执行ps，就会获得system组用户的权限，而文件kmem的同组用户的权限是可读，所以一般用户执行ps就没问题了。但有些人说，为什么不把ps程序设置为root用户的程序，然后设置SUID位，不也行吗？这的确可以解决问题，但实际中为什么不这样做呢？因为SGID的风险比SUID小得多，所以出于系统安全的考虑，应该尽量用SGID代替SUID的程序，如果可能的话。下面来说明一下SGID对目录的影响。SUID对目录没有影响。如果一个目录设置了SGID位，那么如果任何一个用户对这个目录有写权限的话，他在这个目录所建立的文件的组都会自动转为这个目录的属主所在的组，而文件所有者不变，还是属于建立这个文件的用户。</p>
<h4 id="三、关于SUID和SGID的编程"><a href="#三、关于SUID和SGID的编程" class="headerlink" title="三、关于SUID和SGID的编程"></a>三、关于SUID和SGID的编程</h4><p>和SUID和SGID编程比较密切相关的有以下的头文件和函数：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br><span class="line"><span class="function"><span class="keyword">uid_t</span> <span class="title">getuid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uid_t</span> <span class="title">geteuid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">gid_t</span> <span class="title">getgid</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">gid_t</span> <span class="title">getegid</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setuid</span> <span class="params">(<span class="keyword">uid_t</span> UID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setruid</span> <span class="params">(<span class="keyword">uid_t</span> RUID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">seteuid</span> <span class="params">(<span class="keyword">uid_t</span> EUID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setreuid</span> <span class="params">(<span class="keyword">uid_t</span> RUID,<span class="keyword">uid_t</span> EUID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setgid</span> <span class="params">(<span class="keyword">gid_t</span> GID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setrgid</span> <span class="params">(<span class="keyword">gid_t</span> RGID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setegid</span> <span class="params">(<span class="keyword">git_t</span> EGID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setregid</span> <span class="params">(<span class="keyword">gid_t</span> RGID, <span class="keyword">gid_t</span> EGID)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>具体这些函数的说明在这里就不详细列出来了,要用到的可以用man查。<br>SUID/SGID :</p>
<p>假如你有文件a.txt<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ls -l a.txt</span></span><br><span class="line">-rwxrwxrwx</span><br><span class="line"><span class="comment">#chmod 4777 a.txt</span></span><br><span class="line">-rwsrwxrwx ======&gt;注意s位置</span><br><span class="line"><span class="comment">#chmod 2777 a.txt</span></span><br><span class="line">-rwxrwsrwx ======&gt;注意s位置</span><br><span class="line"><span class="comment">#chmod 7777 a.txt</span></span><br><span class="line">-rwsrwxswt ======&gt;出现了t,t的作用在内存中尽量保存a.txt,节省系统再加载的时间.</span><br></pre></td></tr></table></figure></p>
<p>现在再看前面设置 SUID/SGID作用:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cd /sbin</span></span><br><span class="line"><span class="comment">#./lsusb</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#su aaa(普通用户)</span></span><br><span class="line">$./lsusb</span><br><span class="line">...</span><br><span class="line">是不是现在显示出错？</span><br><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="comment">#chmod 4755 lsusb</span></span><br><span class="line"><span class="comment">#su aaa</span></span><br><span class="line">$./lsusb</span><br></pre></td></tr></table></figure></p>
<p>… 现在明白了吗？本来是只有root用户才能执行的命令，加了SUID后,普通用户就可以像root一样的用，权限提升了。上面是对于文件来说的，对于目录也差不多！</p>
<p>目录的S属性使得在该目录下创建的任何文件及子目录属于该目录所拥有的组，目录的T属性使得该目录的所有者及root才能删除该目录。还有对于s与S，设置SUID/SGID需要有运行权限，否则用ls -l后就会看到S,证明你所设置的SUID/SGID没有起作用。</p>
<p>Why we need suid,how do we use suid?</p>
<p>r – 读访问<br>w – 写访问<br>x – 执行许可<br>s – SUID/SGID<br>t – sticky位</p>
<p>那么 suid/sgid是做什么的？ 为什么会有suid位呢？</p>
<p>要想明白这个，先让我们看个问题：如果让每个用户更改自己的密码？<br>用户修改密码，是通过运行命令<code>passwd</code>来实现的。最终必须要修改/etc/passwd文件，而passwd的文件的属性是：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ls -l /etc/passwd</span></span><br><span class="line">-rw-r--r-- 1 root root 2520 Jul 12 18:25 passwd</span><br></pre></td></tr></table></figure></p>
<p>我们可以看到passwd文件只有对于root用户是可写的，而对于所有的他用户来说都是没有写权限的。 那么一个普通的用户如何能够通过运行passwd命令修改这个passwd文件呢？<br>为了解决这个问题，SUID/SGID便应运而生。而且AT&amp;T对它申请了专利。 呵呵。</p>
<p>SUID和SGID是如何解决这个问题呢？<br>首先，我们要知道一点：进程在运行的时候，有一些属性，其中包括 实际用户ID,实际组ID,有效用户ID,有效组ID等。 实际用户ID和实际组ID标识我们是谁，谁在运行这个程序,一般这2个字段在登陆时决定，在一个登陆会话期间， 这些值基本上不改变。<br>而有效用户ID和有效组ID则决定了进程在运行时的权限。内核在决定进程是否有文件存取权限时，是采用了进程的有效用户ID来进行判断的。</p>
<p>知道了这点，我们来看看SUID的解决途径：<br>当一个程序设置了为SUID位时，内核就知道了运行这个程序的时候，应该认为是文件的所有者在运行这个程序。即该程序运行的时候，有效用户ID是该程序的所有者。举个例子：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sgrid5 bin]<span class="comment"># ls -l passwd</span></span><br><span class="line">-r<span class="_">-s</span>--s--x 1 root root 16336 Feb 14 2003 passwd</span><br></pre></td></tr></table></figure></p>
<p>虽然你以test登陆系统，但是当你输入passwd命令来更改密码的时候，由于passwd设置了SUID位，因此虽然进程的实际用户ID是test对应的ID，但是进程的有效用户ID则是passwd文件的所有者root的ID,因此可以修改/etc/passwd文件。</p>
<p>让我们看另外一个例子。<br><code>ping</code>命令应用广泛，可以测试网络是否连接正常。ping在运行中是采用了ICMP协议，需要发送ICMP报文。但是只有root用户才能建立ICMP报文，如何解决这个问题呢？同样，也是通过SUID位来解决。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sgrid5 bin]<span class="comment"># ls -l /bin/ping</span></span><br><span class="line">-rwsr-sr-x 1 root root 28628 Jan 25 2003 /bin/ping</span><br></pre></td></tr></table></figure></p>
<p>我们可以测试一下，如果去掉ping的SUID位，再用普通用户去运行命令，看会怎么样。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sgrid5 bin]<span class="comment">#chmod u-s /bin/ping</span></span><br><span class="line">[root@sgrid5 bin]<span class="comment"># ls -l ping</span></span><br><span class="line">-rwxr-xr-x 1 root root 28628 Jan 25 2003 ping</span><br><span class="line">[root@sgrid5 bin]<span class="comment">#su test</span></span><br><span class="line">[<span class="built_in">test</span>@sgrid5 bin]$ ping byhh.net</span><br><span class="line">ping: icmp open socket: Operation not permitted</span><br></pre></td></tr></table></figure></p>
<p>SUID虽然很好了解决了一些问题，但是同时也会带来一些安全隐患。<br>因为设置了 SUID 位的程序如果被攻击(通过缓冲区溢出等方面),那么hacker就可以拿到root权限。<br>因此在安全方面特别要注意那些设置了SUID的程序。<br>通过以下的命令可以找到系统上所有的设置了suid的文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sgrid5 /]<span class="comment"># find / -perm -04000 -type f -ls</span></span><br></pre></td></tr></table></figure></p>
<p>对于这里为什么是4000，大家可以看一下前面的st_mode的各bit的意义就明白了。<br>在这些设置了suid的程序里，如果用不上的，就最好取消该程序的suid位。</p>
<hr>
<h3 id="linux下的部分文件夹命令"><a href="#linux下的部分文件夹命令" class="headerlink" title="linux下的部分文件夹命令"></a>linux下的部分文件夹命令</h3><blockquote>
<p><a href="http://blog.csdn.net/numbibi/article/details/8026841" rel="external nofollow noopener noreferrer" target="_blank">linux下文件夹的创建、复制、剪切、重命名、清空和删除命令</a></p>
</blockquote>
<ul>
<li>创建目录： <code>mkdir /home/test</code>, 在home目录下创建一个test文件夹</li>
<li>复制目录: <code>cp -rf /home/test1 /home/test2</code>,将test1文件夹复制到test2中，即将test1变成test2的子目录</li>
<li>复制目录及文件: <code>cp -rf /home/test1/* /home/test2</code>,将test1及其目录下所有文件都复制到test2中</li>
<li>移动/重命名目录及文件： <code>mv /home/test1 /home/test2</code>,如果test2存在则将test1移动至test2中，如果不存在则将test1重命名为test2</li>
<li>删除目录: <code>rm -rf /home/test1</code>，删除test1目录，<code>-r</code>为向下递归，即目录下所有子目录及文件；<code>-f</code>为不显示提示。</li>
</ul>
<hr>
<h3 id="Ubuntu下安装tar-gz文件"><a href="#Ubuntu下安装tar-gz文件" class="headerlink" title="Ubuntu下安装tar.gz文件"></a>Ubuntu下安装tar.gz文件</h3><blockquote>
<p><a href="http://blog.csdn.net/wuxinke_blog/article/details/8658605" rel="external nofollow noopener noreferrer" target="_blank">ubuntu如何安装 tar,gz tar.gz2</a></p>
</blockquote>
<ul>
<li><code>tar.gz</code>文件解压命令: <code>sudo tar zxvf file.tar.gz</code></li>
<li><code>bz2</code>文件解压命令: <code>sudo tar jxvf file.tar.bz2</code>或者<code>sudo bzip2 -de file.tar.bz2|tar xvf file.tar.bz2</code></li>
<li><code>tar.Z</code>文件解压命令: <code>sudo uncompress file.tar.Z</code></li>
</ul>
<p>解压后编译:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./configure --prefix=/路径</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p>
<p>又如<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./configure --<span class="built_in">enable</span>-static-link \</span><br><span class="line">--prefix=<span class="variable">$XXX</span>/static --with-curses &amp;&amp;</span><br><span class="line">make &amp;&amp;</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p>
<p><code>--enable-static-link</code>: 这个配置命令使bash被静态链接。<br><code>--prefix=$XXX/static</code>: 这个配置命令把Bash的所有文件安装到<code>$XXX/static</code>目录下，这个目录在chroot环境下或在最终的XXX系统中将成为<code>/static</code>目录。(XXX为用户）<br><code>--with-curses</code>: 将bash链接到某一个库，正如LFS系统将它指向static这一个库。<br><code>&amp;&amp;</code>: 使后一个命令仅在前一个命令返回值为0(表示正确执行)的情况下才执行。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB简单使用</title>
    <url>/mongodb-crud/</url>
    <content><![CDATA[<h3 id="MongoDB增删查改"><a href="#MongoDB增删查改" class="headerlink" title="MongoDB增删查改"></a>MongoDB增删查改</h3><blockquote>
<p><a href="http://www.cnblogs.com/huangxincheng/archive/2012/02/19/2357846.html" rel="external nofollow noopener noreferrer" target="_blank">8天学通MongoDB——第二天 细说增删查改</a><br><a href="http://blog.csdn.net/mcpang/article/details/7752736" rel="external nofollow noopener noreferrer" target="_blank">mongodb_修改器（<code>$inc/$set/$unset/$push/$pop/upsert</code>）</a><br><a href="http://www.cnblogs.com/xusir/archive/2012/12/24/2830957.html" rel="external nofollow noopener noreferrer" target="_blank">MongoDB基本命令用</a></p>
</blockquote>
<h4 id="insert操作"><a href="#insert操作" class="headerlink" title="insert操作"></a><code>insert</code>操作</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个集合</span></span><br><span class="line">db.createCollection(<span class="string">"students"</span>);</span><br><span class="line"><span class="keyword">var</span> student = &#123;<span class="string">"sno"</span>:<span class="number">1</span>,<span class="string">"sname"</span>:<span class="string">"s1"</span>,<span class="attr">age</span>:<span class="number">12</span>,<span class="string">"course"</span>:[<span class="string">"chinese"</span>,<span class="string">"math"</span>]&#125;;</span><br><span class="line">db.students.insert(student);</span><br><span class="line"></span><br><span class="line">student.sno=<span class="number">2</span>;</span><br><span class="line">student.sname=<span class="string">"s2"</span>;</span><br><span class="line">student.age=<span class="number">14</span>;</span><br><span class="line">student.course=[<span class="string">"math"</span>,<span class="string">"english"</span>];</span><br><span class="line"></span><br><span class="line">db.students.insert(student);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询所有记录</span></span><br><span class="line">db.students.find();</span><br></pre></td></tr></table></figure>
<p>这里已经成功的写入了2条记录</p>
<p>如果需要批量插入，可以使用<code>for</code>循环语句来插入<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除所有记录</span></span><br><span class="line">db.students.remove(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> student = &#123;<span class="string">"sno"</span>:i,<span class="string">"sname"</span>:<span class="string">"s"</span>+i,<span class="attr">age</span>:i,<span class="string">"course"</span>:[<span class="string">"chinese"</span>,<span class="string">"math"</span>]&#125;;</span><br><span class="line">  db.students.insert(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.students.find();</span><br></pre></td></tr></table></figure></p>
<p><code>save()</code>函数可以添加数据，添加的列随意指定，如果调用了集合中默认的主键<code>_id</code>，则会进行更新操作<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入新数据</span></span><br><span class="line">db.students.save(&#123;<span class="attr">sno</span>:<span class="number">123</span>,<span class="attr">sname</span>:<span class="string">"ss"</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;);</span><br><span class="line"><span class="comment">//更新数据</span></span><br><span class="line"><span class="keyword">var</span> student = db.students.findOne();</span><br><span class="line">student.age = <span class="number">11</span>;</span><br><span class="line">db.students.save(student);</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="select操作"><a href="#select操作" class="headerlink" title="select操作"></a><code>select</code>操作</h4><p>操作符对应 <code>&gt;</code>为<code>$gt</code>,<code>&gt;=</code>为<code>$gte</code>,<code>&lt;</code>为<code>$lt</code>,<code>&lt;=</code>为<code>$lte</code>,<code>!=</code>为<code>$ne</code><br>关系连接符对应 <code>or</code>为<code>$or</code>, <code>in</code>为<code>$in</code>, <code>not in</code>为<code>$nin</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认每页显示20条记录，如果需要下一页使用it命令</span></span><br><span class="line">db.studens.find();</span><br><span class="line">select * <span class="keyword">from</span> students</span><br><span class="line"></span><br><span class="line">db.students.find(&#123;<span class="string">"age"</span>:<span class="number">1</span>,<span class="string">"sname"</span>:<span class="string">"s1"</span>&#125;);</span><br><span class="line">select * <span class="keyword">from</span> students where age = <span class="number">1</span> and sname = <span class="string">"s1"</span></span><br><span class="line"></span><br><span class="line">db.students.find(&#123;<span class="string">"sno"</span>:&#123;<span class="attr">$gt</span>:<span class="number">5</span>&#125;, <span class="string">"course"</span>: &#123;<span class="attr">$in</span>:[<span class="string">"math"</span>] &#125; &#125;);</span><br><span class="line">select * <span class="keyword">from</span> students where sno &gt; <span class="number">5</span> and course <span class="keyword">in</span> (<span class="string">"math"</span>)</span><br><span class="line"></span><br><span class="line">db.students.find(&#123;<span class="attr">$or</span>: [&#123;<span class="string">"sname"</span>:<span class="string">"s2"</span>&#125;,&#123;<span class="string">"age"</span>:<span class="number">5</span>&#125;]&#125;);</span><br><span class="line">select * <span class="keyword">from</span> students where sname = <span class="string">"s2"</span> or age = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询指定属性</span></span><br><span class="line">db.students.find(&#123;&#125;,&#123;<span class="attr">sname</span>:<span class="number">1</span>&#125;);</span><br><span class="line">select sname <span class="keyword">from</span> students</span><br><span class="line"><span class="comment">//sname也可以用true或false,当用ture的情况下和sname:1效果一样，</span></span><br><span class="line"><span class="comment">//如果用false就是排除sname，显示sname以外的列信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过正则表达式实现模糊查询</span></span><br><span class="line">db.students.find(&#123;<span class="string">"sname"</span>:<span class="regexp">/6/</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">1</span>&#125;)</span><br><span class="line">select age <span class="keyword">from</span> students where sname like <span class="string">'%6%'</span></span><br><span class="line">db.students.find(&#123;<span class="string">"sname"</span>:<span class="regexp">/^s/</span>,<span class="string">"sname"</span>:<span class="regexp">/5$/</span>&#125;);</span><br><span class="line">select * <span class="keyword">from</span> students where sname like <span class="string">'s%'</span> and sname like <span class="string">'%s'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用where方法来实现条件查询</span></span><br><span class="line">db.students.find(&#123;<span class="attr">$where</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.sno==<span class="number">7</span> || <span class="keyword">this</span>.age==<span class="number">8</span> &#125;&#125;);</span><br><span class="line">select * <span class="keyword">from</span> students where sno = <span class="number">7</span> or age = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//排序,1为升序，-1为降序</span></span><br><span class="line">db.students.find().sort(&#123;<span class="attr">sno</span>:<span class="number">-1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//limit用于查询限定数之前的记录，skip用于查询限定数之后的记录</span></span><br><span class="line"><span class="comment">//两者组合可以用于分页，limit是pageSize,skip为页数*pageSize</span></span><br><span class="line">db.students.find().limit(<span class="number">10</span>).skip(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询第一条记录，可以跟条件查询</span></span><br><span class="line">db.students.findOne();</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计行数</span></span><br><span class="line">db.students.count();</span><br><span class="line">select count(*) <span class="keyword">from</span> students</span><br><span class="line">db.students.find(&#123;<span class="attr">sno</span>: &#123;<span class="attr">$exists</span>: <span class="literal">true</span>&#125;&#125;).count();</span><br><span class="line">select count(sno) <span class="keyword">from</span> students</span><br><span class="line">db.students.count(&#123;<span class="attr">age</span>:<span class="number">1</span>&#125;);</span><br><span class="line">select count age <span class="keyword">from</span> students where age = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤重复数据</span></span><br><span class="line">db.students.distinct(<span class="string">"age"</span>);</span><br><span class="line">select distinct age <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="group操作"><a href="#group操作" class="headerlink" title="group操作"></a><code>group</code>操作</h4><p><code>group</code>主要的参数:<br><code>key</code>: 需要分组的属性<br><code>initial</code>: 每组都分享一个”初始化函数“，特别注意：是每一组，比如这个的age=20的value的list分享一个<strong>?</strong><br><code>$reduce</code>: 这个函数的第一个参数是当前的文档对象，第二个参数是上一次function操作的累计对象，第一次为<code>initial</code>中的{“students”：[]}。有多少个文档， <code>$reduce</code>就会调用多少次<code>initial</code>函数，age=22同样也分享一个<code>initial</code>函数<br><code>condition</code>: 过滤条件<br><code>finalize</code>: 这是个函数，每一组文档执行完后，多会触发此方法，那么在每组集合里面加上count也就是它的活了<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.students.group(&#123;</span><br><span class="line">  <span class="string">"key"</span>: &#123;<span class="string">"age"</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">  <span class="string">"initial"</span>: &#123;<span class="string">"students"</span>:[]&#125;,</span><br><span class="line">  <span class="string">"$reduce"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">cur,prev</span>)</span>&#123;</span><br><span class="line">    prev.students.push(cur.sname);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"condition"</span>: &#123;<span class="string">"age"</span>:&#123;<span class="attr">$gte</span>:<span class="number">10</span>&#125;&#125;,</span><br><span class="line">  <span class="string">"finalize"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">out</span>)</span>&#123;</span><br><span class="line">    out.count = out.students.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>执行的部分结果为：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="attr">"age"</span> : <span class="number">11</span>,</span><br><span class="line">                <span class="attr">"students"</span> : [</span><br><span class="line">                        <span class="string">"s1"</span>,</span><br><span class="line">                        <span class="string">"s2"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"count"</span> : <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="attr">"age"</span> : <span class="number">12</span>,</span><br><span class="line">                <span class="attr">"students"</span> : [</span><br><span class="line">                        <span class="string">"s5"</span>,</span><br><span class="line">                        <span class="string">"s3"</span>,</span><br><span class="line">                        <span class="string">"s4"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"count"</span> : <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="attr">"age"</span> : <span class="number">14</span>,</span><br><span class="line">                <span class="attr">"students"</span> : [</span><br><span class="line">                        <span class="string">"s9"</span>,</span><br><span class="line">                        <span class="string">"s10"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"count"</span> : <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="attr">"age"</span> : <span class="number">15</span>,</span><br><span class="line">                <span class="attr">"students"</span> : [</span><br><span class="line">                        <span class="string">"ss"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"count"</span> : <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="Map-Reduce操作"><a href="#Map-Reduce操作" class="headerlink" title="Map-Reduce操作"></a><code>Map-Reduce</code>操作</h4><p><a href="http://docs.mongodb.org/manual/core/map-reduce/" rel="external nofollow noopener noreferrer" target="_blank">官网示例</a></p>
<p><code>mapReduce</code>其实是一种编程模型，用在分布式计算中，其中有一个<code>map</code>函数，这个称为映射函数，里面会调用<code>emit(key,value)</code>，集合会按照你指定的key进行映射分组。<br><code>reduce</code>函数为简化函数，会对map分组后的数据进行分组简化，注意：在<code>reduce(key,value)</code>中的key就是emit中的key，vlaue为emit分组后的emit(value)的集合，这里也就是很多{“count”:1}的数组<br><code>mapReduce</code>则为最后的执行函数<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.students.mapReduce(</span><br><span class="line">  <span class="comment">//map</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   emit(<span class="keyword">this</span>.age, &#123;<span class="attr">count</span>:<span class="number">1</span>&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//reduce</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;value.length; i++)&#123;</span><br><span class="line">      result.count += value[i].count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;<span class="string">"sname"</span>:<span class="regexp">/^s/</span>&#125;,</span><br><span class="line">    <span class="string">"out"</span>: <span class="string">"collection"</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">db.collection.find();</span><br></pre></td></tr></table></figure></p>
<p>执行结果为<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"result"</span> : <span class="string">"collection"</span>,    <span class="comment">//存放的集合名</span></span><br><span class="line">        <span class="attr">"timeMillis"</span> : <span class="number">514</span>,</span><br><span class="line">        <span class="attr">"counts"</span> : &#123;</span><br><span class="line">                <span class="attr">"input"</span> : <span class="number">11</span>,       <span class="comment">//传入文档的个数</span></span><br><span class="line">                <span class="attr">"emit"</span> : <span class="number">11</span>,        <span class="comment">//此函数被调用的次数</span></span><br><span class="line">                <span class="attr">"reduce"</span> : <span class="number">3</span>,       <span class="comment">//此函数被调用的次数?</span></span><br><span class="line">                <span class="attr">"output"</span> : <span class="number">7</span>        <span class="comment">//最后返回文档的个数</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"ok"</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&gt; db.collection.find();</span><br><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">6</span>, <span class="attr">"value"</span> : &#123; <span class="attr">"count"</span> : <span class="number">1</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">7</span>, <span class="attr">"value"</span> : &#123; <span class="attr">"count"</span> : <span class="number">1</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">8</span>, <span class="attr">"value"</span> : &#123; <span class="attr">"count"</span> : <span class="number">1</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">11</span>, <span class="attr">"value"</span> : &#123; <span class="attr">"count"</span> : <span class="number">2</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">12</span>, <span class="attr">"value"</span> : &#123; <span class="attr">"count"</span> : <span class="number">3</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">14</span>, <span class="attr">"value"</span> : &#123; <span class="attr">"count"</span> : <span class="number">2</span> &#125; &#125;</span><br><span class="line">&#123; <span class="attr">"_id"</span> : <span class="number">15</span>, <span class="attr">"value"</span> : &#123; <span class="attr">"count"</span> : <span class="number">1</span> &#125; &#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="游标查询"><a href="#游标查询" class="headerlink" title="游标查询"></a>游标查询</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cursor = db.students.find();</span><br><span class="line"><span class="comment">//循环输出完毕，游标自动销毁，再次输入cursor则为空</span></span><br><span class="line"><span class="keyword">while</span>(cursor.hasNext())&#123;</span><br><span class="line">  <span class="comment">//输出json格式</span></span><br><span class="line">  printjson(cursor.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用forEach进行迭代</span></span><br><span class="line"><span class="keyword">var</span> cursor = db.students.find().sort(&#123;<span class="string">"age"</span>:<span class="number">-1</span>&#125;).limit(<span class="number">10</span>).skip(<span class="number">5</span>);</span><br><span class="line">cursor.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  print(x.sname);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过数组形式来访问游标数据</span></span><br><span class="line"><span class="keyword">var</span> cursor = db.students.find();</span><br><span class="line">cursor[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将游标转换成数组</span></span><br><span class="line"><span class="keyword">var</span> arr = db.students.find().toArray();</span><br><span class="line">print(arr.length);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建索引</span></span><br><span class="line">db.students.ensureIndex(&#123;<span class="attr">sname</span>:<span class="number">1</span>,<span class="attr">age</span>:<span class="number">-1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//唯一索引</span></span><br><span class="line">db.students.ensureIndex(&#123;<span class="attr">sname</span>:<span class="number">1</span>,&#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看当前集合的索引</span></span><br><span class="line">db.students.getIndexes();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有索引记录大小</span></span><br><span class="line">db.students.totalIndexSize();</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取当前集合的所有index信息</span></span><br><span class="line">db.students.reIndex();</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定索引</span></span><br><span class="line">db.students.dropIndex(<span class="string">"sname_1_age_-1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除所有索引</span></span><br><span class="line">db.students.dropIndexes();</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="update操作"><a href="#update操作" class="headerlink" title="update操作"></a><code>update</code>操作</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$set即可对指定属性进行修改</span></span><br><span class="line">db.students.update(&#123;<span class="attr">sno</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">age</span>:<span class="number">11</span>&#125;&#125;);</span><br><span class="line">update students <span class="keyword">set</span> age=11 where sno=2;</span><br><span class="line">//如果属性不存在则会创建该属性</span><br><span class="line">db.students.update(&#123;sno:<span class="number">2</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">teacher</span>:<span class="string">"t2"</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$unset用来删除指定属性</span></span><br><span class="line">db.students.update(&#123;<span class="attr">sno</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">$unset</span>:&#123;<span class="attr">teacher</span>:<span class="number">1</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$inc可以对数字型属性进行加法操作</span></span><br><span class="line">db.students.update(&#123;<span class="attr">sno</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">$inc</span>: &#123;<span class="attr">age</span>: <span class="number">-9</span>&#125;&#125;);</span><br><span class="line">update students <span class="keyword">set</span> age=age-9 where sno=2;</span><br><span class="line"></span><br><span class="line">//$push向文档的某个数组类型的键添加一个数组元素，</span><br><span class="line">//不过滤重复的数据。添加时键存在，要求键值类型必须是数组；</span><br><span class="line">//键不存在，则创建数组类型的键</span><br><span class="line">db.students.update(&#123;sno:<span class="number">2</span>&#125;,&#123;<span class="attr">$push</span>: &#123;<span class="attr">course</span>:<span class="string">"english"</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$addToSet可以避免插入重复的数据</span></span><br><span class="line">db.students.update(&#123;<span class="attr">sno</span>:<span class="number">3</span>&#125;,&#123;<span class="attr">$addToSet</span>: &#123;<span class="attr">course</span>:<span class="string">"english"</span>&#125;&#125;);</span><br><span class="line">db.students.update(&#123;<span class="attr">sno</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">$addToSet</span>: &#123;<span class="attr">course</span>:<span class="string">"english"</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$pop类似栈的pop操作，可以从数组头部(-1),尾部(1|0)来取出元素，即从数组中删除元素</span></span><br><span class="line">db.students.update(&#123;<span class="attr">sno</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">$pop</span>: &#123;<span class="attr">course</span>:<span class="number">1</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$pull从数组中删除指定元素</span></span><br><span class="line">db.students.update(&#123;<span class="attr">sno</span>:<span class="number">3</span>&#125;,&#123;<span class="attr">$pull</span>:&#123;<span class="attr">course</span>:<span class="string">"math"</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用$或者数组下标可以定位到数组元素进行修改</span></span><br><span class="line">db.students.update(&#123;<span class="attr">sno</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">"course.0"</span>:<span class="string">"chinese"</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//upsert是insert or update的结合体，有则更新，无则新增，</span></span><br><span class="line"><span class="comment">//只要指定update的第三个参数为true即可</span></span><br><span class="line"><span class="comment">//update还有第四个参数,如果指定true,如果匹配多条则全部更新，默认只更新第一条</span></span><br><span class="line">db.students.update(&#123;<span class="attr">sno</span>:<span class="number">4</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">teacher</span>:<span class="string">"t5"</span>&#125;&#125;,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><p><code>explain</code>函数可以用来性能分析<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt; db.students.find().explain();</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"cursor"</span> : <span class="string">"BasicCursor"</span>,</span><br><span class="line">        <span class="string">"isMultiKey"</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"n"</span> : <span class="number">11</span>,</span><br><span class="line">        <span class="string">"nscannedObjects"</span> : <span class="number">11</span>,</span><br><span class="line">        <span class="string">"nscanned"</span> : <span class="number">11</span>,</span><br><span class="line">        <span class="string">"nscannedObjectsAllPlans"</span> : <span class="number">11</span>,</span><br><span class="line">        <span class="string">"nscannedAllPlans"</span> : <span class="number">11</span>,</span><br><span class="line">        <span class="string">"scanAndOrder"</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"indexOnly"</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"nYields"</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="string">"nChunkSkips"</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="string">"millis"</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="string">"server"</span> : <span class="string">"Ezio-Hu:27017"</span>,</span><br><span class="line">        <span class="string">"filterSet"</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>部分参数说明<br><code>cursor</code>: <code>BasicCursor</code>这里的查找采用的是“表扫描”，也就是顺序查找<br><code>nscanned</code>: 数据库浏览的文档数目<br><code>n</code>: 最终返回的文档数<br><code>millis</code>: 查询耗时</p>
<p><code>tojson</code>: 将一个对象转换成json格式的对象<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tojson(<span class="keyword">new</span> <span class="built_in">Object</span>(<span class="string">'student'</span>))</span><br></pre></td></tr></table></figure></p>
<p><code>printjson</code>: 将获取的对象输出json格式</p>
]]></content>
      <categories>
        <category>Database</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>nosql</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB配置及部分命令</title>
    <url>/mongodb-new/</url>
    <content><![CDATA[<h3 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h3><blockquote>
<p><a href="http://www.cnblogs.com/mecity/archive/2011/06/11/2078527.html" rel="external nofollow noopener noreferrer" target="_blank">第一节 MongoDB介绍及下载与安装</a></p>
</blockquote>
<p>至官网下载了压缩包后解压至任意目录，然后在目录下建立data文件夹，并在data文件夹下建立db与log两个文件夹，db文件夹用来存放数据存储文件,log文件夹用来存放日志文件。在log文件夹下建立默认的日志危机，如MongoDB.log。<br>这里采用注册为系统服务的方式安装。在命令行cmd中cd到mongodb目录下，运行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --dbpath <span class="string">"C:\mongodb\data\db"</span> --logpath <span class="string">"C:\mongodb\data\log\MongoDB.log"</span> --install --serviceName <span class="string">"MongoDB"</span></span><br></pre></td></tr></table></figure></p>
<p>命令即可注册名为<code>MongoDB</code>的服务，如果成功，可以通过<code>net start MongoDB</code>启动服务。<br>点击bin目录下的mongo.exe打开数据库可以测试一下有无成功</p>
<p>还可以直接通过相关程序来运行，在命令行中输入以下命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod -dbpath <span class="string">"C:\mongodb\data\db"</span></span><br></pre></td></tr></table></figure></p>
<p>执行此命令即将mongodb的数据库文件创建到<code>C:\mongodb\data\db</code>目录,关闭的华可以直接双机mongod.exe</p>
<p>–fork 以守护进程方式运行MongoDB，创建服务器进程<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --port 10220 --fork  --dbpath <span class="string">"C:\mongodb\data\db"</span> --logpath <span class="string">"C:\mongodb\data\log\MongoDB.log"</span></span><br></pre></td></tr></table></figure></p>
<p>如果需要停止mongodb,直接关闭的话可能会造成数据丢失，稳妥的方式为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user admin</span><br><span class="line">db.shutdownServer();</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="MongoDB相关命令"><a href="#MongoDB相关命令" class="headerlink" title="MongoDB相关命令"></a>MongoDB相关命令</h3><blockquote>
<p><a href="http://www.cnblogs.com/xusir/archive/2012/12/24/2830957.html" rel="external nofollow noopener noreferrer" target="_blank">MongoDB基本命令用</a></p>
</blockquote>
<p><code>help</code>: 显示帮助命令<br><code>show dbs</code>: 显示所有数据库<br><code>show collections</code>: 显示当前数据库所有集合(类似表)<br><code>show users</code>: 显示所有用户<br><code>show logs</code>: 显示所有日志名<br><code>show log [name]</code>: 根据日志名输出日志到控制台</p>
<p><code>use &lt;db_name&gt;</code>: 切换数据库<br><code>db.foo.find()</code>: 查询集合foo的所有数据<br><code>db.cloneDatabase(&quot;127.0.0.1&quot;)</code>: 将指定机器上的数据库的数据克隆到当前数据库<br><code>db.copyDatabase(&quot;mydb&quot;, &quot;temp&quot;, &quot;127.0.0.1&quot;)</code>: 将本机的mydb的数据复制到temp数据库中<br><code>db.repairDatabase()</code>: 修复当前数据库<br><code>db.getName()</code>: 查看当前使用的数据库<br><code>db.stats()</code>: 查看当前数据库状态<br><code>db.version()</code>: 查看当前数据库版本<br><code>db.getMongo()</code>: 查看当前db的主机地址</p>
<p><code>db.auth(&quot;username&quot;,&quot;password&quot;)</code>: 数据库安全认证<br><code>db.addUser(&quot;username&quot;)</code>: 添加新用户<br><code>db.addUser(&quot;username&quot;, &quot;password&quot;, true)</code>: 最后一个参数为只读选项<br><code>db.removeUser(&quot;username&quot;)</code>: 删除用户</p>
<p><code>db.createCollection(&quot;collName&quot;, {size: 20, capped: 5, max: 100})</code>: 创建一个聚集集合<br><code>db.getCollection(&quot;collName&quot;)</code>: 得到指定名称的聚集集合<br><code>db.getCollectionNames()</code>: 得到当前db的所有聚集集合<br><code>db.printCollectionStats()</code>: 显示当前db所有聚集索引的状态<br><code>db.foo.renameCollection(&quot;newCollName&quot;)</code>: 集合重命名<br><code>db.foo.dataSize()</code>: 查看数据空间大小<br><code>db.foo.stats()</code>: 查看集合状态<br><code>db.userInfo.totalSize()</code>: 查看集合总大小<br><code>db.userInfo.storageSize()</code>: 查看集合存储空间大小</p>
<p><code>db.getPrevError()</code>: 查询之前的错误信息<br><code>db.resetError()</code>: 清除错误记录</p>
]]></content>
      <categories>
        <category>Database</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>nosql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL函数命令</title>
    <url>/mysql-func/</url>
    <content><![CDATA[<h3 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h3><h4 id="Every-derived-table-must-have-its-own-alias"><a href="#Every-derived-table-must-have-its-own-alias" class="headerlink" title="Every derived table must have its own alias"></a>Every derived table must have its own alias</h4><blockquote>
<p><a href="http://bbs.9izhan.com/thread-11660-1-1.html" rel="external nofollow noopener noreferrer" target="_blank">关于子查询 Every derived table must have its own alias 的错误</a></p>
</blockquote>
<p>在子查询中必须给查询的结果一个别名，不然会报上述错误<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> table1) <span class="keyword">as</span> t</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="SELECT-INTO-和-INSERT-INTO-SELECT-两种表复制语句"><a href="#SELECT-INTO-和-INSERT-INTO-SELECT-两种表复制语句" class="headerlink" title="SELECT INTO 和 INSERT INTO SELECT 两种表复制语句"></a>SELECT INTO 和 INSERT INTO SELECT 两种表复制语句</h4><blockquote>
<p>来自<a href="http://www.cnblogs.com/freshman0216/archive/2008/08/15/1268316.html" rel="external nofollow noopener noreferrer" target="_blank">SELECT INTO 和 INSERT INTO SELECT 两种表复制语句</a></p>
</blockquote>
<p><code>insert into select</code>要求目标表Table2必须存在，由于目标表Table2已经存在，所以我们除了插入源表Table1的字段外，还可以插入常量。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Table2(field1,field2,...) <span class="keyword">select</span> value1,value2,... <span class="keyword">from</span> Table1</span><br></pre></td></tr></table></figure></p>
<p><code>select into</code>要求目标表Table2不存在，因为在插入时会自动创建表Table2，并将Table1中指定字段数据复制到Table2中。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> vale1, value2 <span class="keyword">into</span> Table2 <span class="keyword">from</span> Table1</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="mysql-update查询结果"><a href="#mysql-update查询结果" class="headerlink" title="mysql update查询结果"></a>mysql update查询结果</h4><blockquote>
<p><a href="http://blog.sina.com.cn/s/blog_3c62c21f01013qch.html" rel="external nofollow noopener noreferrer" target="_blank">mysql update不能直接使用select的结果</a></p>
</blockquote>
<p><strong>SQL Server</strong>中可以直接使用结果集更新<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> table1 <span class="keyword">set</span> a.field = (<span class="keyword">select</span> <span class="keyword">field</span> <span class="keyword">from</span> table2)</span><br></pre></td></tr></table></figure></p>
<p>在<strong>MySQL</strong>中上述语句是行不通的，如果需要完成上述效果，需要使用<code>inner join</code><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> table1 a <span class="keyword">inner</span> <span class="keyword">join</span> table2 b <span class="keyword">set</span> a.field1 = b.field1 <span class="keyword">where</span> a.field2 = b.field2</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="mysql查询区分大小写"><a href="#mysql查询区分大小写" class="headerlink" title="mysql查询区分大小写"></a>mysql查询区分大小写</h4><blockquote>
<p>来自<a href="http://www.cnblogs.com/trying/p/3669101.html" rel="external nofollow noopener noreferrer" target="_blank">mysql查询区分大小写</a></p>
</blockquote>
<p>Mysql默认查询是不分大小写的，可以在SQL语句中加入<code>binary</code>来区分大小写；<br><strong>BINARY</strong>不是函数，是类型转换运算符，它用来强制它后面的字符串为一个二进制字符串，可以理解为在字符串比较的时候区分大小写<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 a <span class="keyword">where</span> a.id = <span class="built_in">BINARY</span> <span class="string">'a'</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="MySQL行转列"><a href="#MySQL行转列" class="headerlink" title="MySQL行转列"></a>MySQL行转列</h4><h5 id="case-when-语句"><a href="#case-when-语句" class="headerlink" title="case when 语句"></a>case when 语句</h5><blockquote>
<p><a href="http://database.51cto.com/art/201010/229082.htm" rel="external nofollow noopener noreferrer" target="_blank">mysql中case when语句的使用示例</a></p>
</blockquote>
<p>基本用法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> filed1,</span><br><span class="line">  <span class="keyword">case</span> </span><br><span class="line">    <span class="keyword">when</span> filed2 = <span class="string">'a'</span> <span class="keyword">then</span> <span class="string">'a'</span></span><br><span class="line">    <span class="keyword">when</span> filed2 = <span class="string">'b'</span> <span class="keyword">then</span> <span class="string">'b'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'c'</span> </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> filed1,</span><br><span class="line">  <span class="keyword">case</span> field2</span><br><span class="line">    <span class="keyword">when</span> <span class="string">'a'</span> <span class="keyword">then</span> <span class="string">'a'</span></span><br><span class="line">    <span class="keyword">when</span> <span class="string">'b'</span> <span class="keyword">then</span> <span class="string">'b'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'c'</span> </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure>
<p>复合?<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> filed1,filed2</span><br><span class="line">  <span class="keyword">case</span> </span><br><span class="line">    <span class="keyword">when</span> filed1 = <span class="string">'a'</span> <span class="keyword">then</span> <span class="string">'a'</span></span><br><span class="line">      <span class="keyword">when</span> filed2 = <span class="string">'b'</span> <span class="keyword">then</span> <span class="string">'b'</span></span><br><span class="line">      <span class="keyword">else</span> <span class="string">'c'</span> </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure></p>
<hr>
<h5 id="if-sum语句"><a href="#if-sum语句" class="headerlink" title="if sum语句"></a>if sum语句</h5><blockquote>
<p><a href="http://blog.csdn.net/cdy102688/article/details/14006515" rel="external nofollow noopener noreferrer" target="_blank">mysql行转列(if + sum) </a></p>
</blockquote>
<p>mysql行转列可以使用<code>sum</code>与<code>if</code>函数配合完成<br>所用数据如下</p>
<table>
<thead>
<tr>
<th>name</th>
<th>type</th>
<th>score</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>chinese</td>
<td>80</td>
</tr>
<tr>
<td>a</td>
<td>math</td>
<td>70</td>
</tr>
<tr>
<td>b</td>
<td>chinese</td>
<td>90</td>
</tr>
<tr>
<td>b</td>
<td>math</td>
<td>100</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, </span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">if</span>(<span class="keyword">type</span>=<span class="string">'chinese'</span>,score,<span class="number">0</span>)) <span class="keyword">as</span> chinese, </span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">if</span>(<span class="keyword">type</span>=<span class="string">'math'</span>,score,<span class="number">0</span>)) <span class="keyword">as</span> math</span><br><span class="line"><span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span></span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<table>
<thead>
<tr>
<th>name</th>
<th>chinese</th>
<th>math</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>80</td>
<td>70</td>
</tr>
<tr>
<td>b</td>
<td>90</td>
<td>100</td>
</tr>
</tbody>
</table>
<p><strong>总结</strong>：if主要是用来创建新列，并将非对应学科的分数写为0，用sum或max配合group by保证取出的值是学科对应的值，这样就可以完成行转列了</p>
<hr>
<h4 id="多行记录合并成一行"><a href="#多行记录合并成一行" class="headerlink" title="多行记录合并成一行"></a>多行记录合并成一行</h4><blockquote>
<p><a href="http://blog.sina.com.cn/s/blog_51a493580101jsaw.html" rel="external nofollow noopener noreferrer" target="_blank">Oracle和Mysql中将多行记录合并为一行</a></p>
</blockquote>
<p>MySQL使用函数<code>group_concat</code><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  field1,</span><br><span class="line">  field2,</span><br><span class="line">  <span class="keyword">group_concat</span>(field3 <span class="keyword">order</span> <span class="keyword">by</span> field3 separator <span class="string">"|"</span>) </span><br><span class="line"><span class="keyword">from</span> table1 </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> field1</span><br></pre></td></tr></table></figure></p>
<p>这里的<code>separator</code>指定分隔符为”|”</p>
<p>Oracle使用函数<code>WMSYS.WM_CONCAT</code><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  field1,</span><br><span class="line">  WMSYS.WM_CONCAT(field2) <span class="keyword">as</span> field2</span><br><span class="line"><span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> field1</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="获取小数点后两位"><a href="#获取小数点后两位" class="headerlink" title="获取小数点后两位"></a>获取小数点后两位</h4><blockquote>
<p><a href="http://www.jb51.net/article/44378.htm" rel="external nofollow noopener noreferrer" target="_blank">mysql格式化小数保留小数点后两位</a><br><a href="http://www.nowamagic.net/librarys/veda/detail/2044" rel="external nofollow noopener noreferrer" target="_blank">MySQL CAST与CONVERT 函数的用法</a><br><a href="http://zhidao.baidu.com/link?url=LePIQDrUswcVQX2PYliFLJ2_5haop43H30D1MDO0Z-LCHDMo9S1NaFJhqoqqengUSNbuzJIsbEekGQM1HyUfWa" rel="external nofollow noopener noreferrer" target="_blank">mysql数据库，结果保留4位小数，小数点后四位</a></p>
</blockquote>
<ul>
<li>使用<code>format</code>函数<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">format</span>(<span class="number">12345.678</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>返回结果为 12,345.68<br>此函数整数部分超过三位的时候以逗号分割，并且返回的结果是string类型的。</p>
<ul>
<li>使用<code>truncate</code>函数<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">truncate</span>(<span class="number">12345.678</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>返回结果为 12345.67<br>此函数并不能达到四舍五入的效果</p>
<ul>
<li>使用<code>convert</code>函数<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">convert</span>(<span class="number">12345.678</span>,<span class="built_in">decimal</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>返回结果为 12346<br>此函数为转换格式，将所选数字转换为浮点数类型，接收参数主要有 <strong>二进制</strong><code>BINARY</code>,<strong>字符型</strong><code>CHAR()</code>,<strong>日期</strong><code>DATE</code>,<strong>时间</strong><code>TIME</code>,<strong>日期时间型</strong><code>DATETIME</code>,<strong>浮点数</strong><code>DECIMAL</code>,<strong>整数</strong><code>SIGNED</code><strong>,无符号整数</strong><code>UNSIGNED</code>.</p>
<ul>
<li>使用<code>round</code>函数<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">12345.678</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>返回结果为 12345.68<br>符合预期</p>
<hr>
<h4 id="NULL与空值的区别"><a href="#NULL与空值的区别" class="headerlink" title="NULL与空值的区别"></a><strong>NULL</strong>与空值的区别</h4><blockquote>
<p><a href="http://my.oschina.net/junn/blog/161769" rel="external nofollow noopener noreferrer" target="_blank">Mysql探究之null与not null</a></p>
</blockquote>
<p>首先，我们要搞清楚“空值” 和 “NULL” 的概念： </p>
<ol>
<li>空值是不占用空间的</li>
<li>mysql中的<strong>NULL</strong>其实是占用空间的</li>
</ol>
<p><strong>NOT NULL</strong>的字段是不能插入“NULL”的，只能插入“空值”(即<code>&#39;&#39;</code>)<br><strong>NULL</strong> 其实并不是空值，而是要占用空间，所以mysql在进行比较的时候，<strong>NULL</strong> 会参与字段比较，所以对效率有一部分影响,而且对表索引时不会存储<strong>NULL</strong>值的，所以如果索引的字段可以为<strong>NULL</strong>，索引的效率会下降很多</p>
<p>判断不为空<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">where</span> field1 &lt;&gt; <span class="string">''</span></span><br></pre></td></tr></table></figure></p>
<p>判断不为<strong>NULL</strong><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">where</span> field1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="IFNULL-NULLIF与ISNULL的区别"><a href="#IFNULL-NULLIF与ISNULL的区别" class="headerlink" title="IFNULL,NULLIF与ISNULL的区别"></a><strong>IFNULL</strong>,<strong>NULLIF</strong>与<strong>ISNULL</strong>的区别</h4><blockquote>
<p><a href="http://www.cnblogs.com/JuneZhang/archive/2010/08/26/1809306.html" rel="external nofollow noopener noreferrer" target="_blank">MySql 里的IFNULL、NULLIF和ISNULL用法</a></p>
</blockquote>
<ul>
<li><code>ifnull(expr1,expr2)</code>: 如果<code>expr1</code>不为<strong>NULL</strong>时，返回<code></code>expr1<code>,否则返回</code>expr2`</li>
<li><code>nullif(expr1,expr2)</code>: 如果<code>expr1=expr2</code>，则返回<strong>NULL</strong>,否则返回<code>expr1</code></li>
<li><code>isnull(expr)</code>: 如果<code>expr</code>为<strong>NULL</strong>，则返回1，否则返回0</li>
</ul>
<hr>
<h4 id="操作字符串函数"><a href="#操作字符串函数" class="headerlink" title="操作字符串函数"></a>操作字符串函数</h4><blockquote>
<p>来自<a href="http://www.jb51.net/article/27458.htm" rel="external nofollow noopener noreferrer" target="_blank">Mysql字符串截取函数SUBSTRING的用法说明</a></p>
</blockquote>
<ul>
<li><code>left(被截取字符串，截取长度)</code>： 从左开始截取字符串</li>
<li><code>right(被截取字符串，截取长度)</code>: 从右开始截取字符串</li>
<li><code>substring(被截取字段，[从第几位开始截取]，截取长度)</code>: 截取字符串，中括号内的参数为可选，如果为负数则是从字符串右边开始计数</li>
<li><code>substring_index(被截取字段，关键字，关键字出现的次数)</code>: 按关键字截取字符串,如果关键字出现的次数为负数，则是从字符串右边开始计数</li>
</ul>
<hr>
<h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><blockquote>
<p>来自<br><a href="http://www.cnblogs.com/zeroone/archive/2010/05/05/1727659.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL日期时间函数大全</a><br><a href="http://blog.sina.com.cn/s/blog_68f4b9f201013vql.html" rel="external nofollow noopener noreferrer" target="_blank">mysql相似于oracle的to_char() to_date()方法</a><br><a href="http://blog.163.com/i_yuhan/blog/static/19834210020124174495366/" rel="external nofollow noopener noreferrer" target="_blank">MYSQL如何计算两个日期间隔天数</a></p>
</blockquote>
<ul>
<li><code>DAYOFWEEK(date)</code>: 返回日期date是星期几(1=星期天···7=星期六,ODBC标准)</li>
<li><code>WEEKDAY(date)</code>: 返回日期date是星期几(0=星期一···6= 星期天)</li>
<li><code>DAYOFMONTH(date)</code>: 返回date是一月中的第几日(在1到31范围内) </li>
<li><code>DAYOFYEAR(date)</code>: 返回date是一年中的第几日(在1到366范围内)</li>
<li><code>DAYNAME(date)</code>: 返回date是星期几(按英文名返回)</li>
<li><code>MONTHNAME(date)</code>: 返回date是几月(按英文名返回)</li>
<li><code>QUARTER(date)</code>: 返回date是一年的第几个季度</li>
<li><code>WEEK(date,first)</code>: 返回date是一年的第几周(first默认值0,first取值1表示周一是周的开始,0从周日开始)</li>
<li><code>YEAR(date)</code>: 返回date的年份</li>
<li><code>MONTH(date)</code>: 返回date中的月份</li>
<li><code>HOUR(time)</code>: 返回time的小时数(范围是0到23)</li>
<li><code>MINUTE(time)</code>: 返回time的分钟数(范围是0到59)</li>
<li><code>SECOND(time)</code>: 返回time的秒数(范围是0到59)</li>
<li><code>PERIOD_ADD(P,N)</code>: 增加N个月到时期P并返回(P的格式YYMM或YYYYMM)</li>
<li><code>PERIOD_DIFF(P1,P2)</code>: 返回在时期P1和P2之间月数(P1和P2的格式YYMM或YYYYMM) (<code>P1&lt;P2为负数</code>)</li>
<li><code>DATE_ADD(date,INTERVAL expr type)</code>,<br><code>DATE_SUB(date,INTERVAL expr type)</code>,<br><code>ADDDATE(date,INTERVAL expr type)</code>,<br><code>SUBDATE(date,INTERVAL expr type)</code>: 对日期时间进行加减法运算。<code>ADDDATE()</code>和<code>SUBDATE()</code>是<code>DATE_ADD()</code>和<code>DATE_SUB()</code>的同义词,date是一个DATETIME或DATE值,expr对date进行加减法的一个表达式字符串,type指明表达式expr应该如何被解释，例如<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="string">'2015-05-04'</span>, <span class="built_in">INTERVAL</span> <span class="number">-1</span> <span class="keyword">DAY</span>)</span><br><span class="line"><span class="comment">--返回结果2015-05-03</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="string">'2015-05-04'</span>, <span class="built_in">INTERVAL</span> <span class="string">'1 2:3:4'</span> DAY_SECOND)</span><br><span class="line"><span class="comment">--返回结果2015-05-05 02:03:04</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="string">'2015-05-04'</span>, <span class="built_in">INTERVAL</span> <span class="string">'2:3'</span> MINUTE_SECOND)</span><br><span class="line"><span class="comment">--返回结果2015-05-04 00:02:03</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="string">'2015-05-04'</span>, <span class="built_in">INTERVAL</span> <span class="string">'-1 10'</span> DAY_HOUR)</span><br><span class="line"><span class="comment">--返回结果2015-05-02 14:00:00</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<table>
<thead>
<tr>
<th>type</th>
<th>意义</th>
<th>expr</th>
</tr>
</thead>
<tbody>
<tr>
<td>SECOND</td>
<td>秒</td>
<td>SECONDS</td>
</tr>
<tr>
<td>MINUTE</td>
<td>分</td>
<td>MINUTES</td>
</tr>
<tr>
<td>HOUR</td>
<td>时</td>
<td>HOURS</td>
</tr>
<tr>
<td>DAY</td>
<td>天</td>
<td>DAYS</td>
</tr>
<tr>
<td>MONTH</td>
<td>月</td>
<td>MONTHS</td>
</tr>
<tr>
<td>YEAR</td>
<td>年</td>
<td>YEARS</td>
</tr>
<tr>
<td>MINUTE_SECOND</td>
<td>分钟:秒</td>
<td>“MINUTES:SECONDS”</td>
</tr>
<tr>
<td>HOUR_MINUTE</td>
<td>小时:分钟</td>
<td>“HOURS:MINUTES”</td>
</tr>
<tr>
<td>DAY_HOUR</td>
<td>天和小时</td>
<td>“DAYS HOURS”</td>
</tr>
<tr>
<td>YEAR_MONTH</td>
<td>年和月</td>
<td>“YEARS-MONTHS”</td>
</tr>
<tr>
<td>HOUR_SECOND</td>
<td>小时, 分钟</td>
<td>“HOURS:MINUTES:SECONDS”</td>
</tr>
<tr>
<td>DAY_MINUTE</td>
<td>天, 小时, 分钟</td>
<td>“DAYS HOURS:MINUTES”</td>
</tr>
<tr>
<td>DAY_SECOND</td>
<td>天, 小时, 分钟, 秒</td>
<td>“DAYS HOURS:MINUTES:SECONDS”</td>
</tr>
</tbody>
</table>
<p><code>expr</code>中允许任何标点做分隔符,如果所有是<code>DATE</code>值时结果是一个<code>DATE</code>值,否则结果是一个<code>DATETIME</code>值<br>如果type关键词不完整,则MySQL从右端取值,<code>DAY_SECOND</code>因为缺少小时分钟等于<code>MINUTE_SECOND</code><br>如果增加<code>MONTH</code>、<code>YEAR_MONTH</code>或<code>YEAR</code>,天数大于结果月份的最大天数则使用最大天数</p>
<ul>
<li><code>TO_DAYS(date)</code>: 返回日期date是西元0年至今多少天(不计算1582年以前)</li>
<li><code>FROM_DAYS(N)</code>:　给出西元0年至今多少天返回DATE值(不计算1582年以前)</li>
<li><code>STR_TO_DATE(date,format)</code>: 将date字符串转成date格式</li>
<li><code>DATE_FORMAT(date,format)</code>: 根据format字符串格式化date值</li>
</ul>
<table>
<thead>
<tr>
<th>标识符</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%M</td>
<td>月名字(January……December)</td>
</tr>
<tr>
<td>%W</td>
<td>星期名字(Sunday……Saturday)</td>
</tr>
<tr>
<td>%D</td>
<td>有英语前缀的月份的日期(1st, 2nd, 3rd, 等等）</td>
</tr>
<tr>
<td>%Y</td>
<td>年, 数字, 4 位</td>
</tr>
<tr>
<td>%y</td>
<td>年, 数字, 2 位</td>
</tr>
<tr>
<td>%a</td>
<td>缩写的星期名字(Sun···Sat)</td>
</tr>
<tr>
<td>%d</td>
<td>月份中的天数, 数字(00···31)</td>
</tr>
<tr>
<td>%e</td>
<td>月份中的天数, 数字(0……31)</td>
</tr>
<tr>
<td>%m</td>
<td>月, 数字(01……12)</td>
</tr>
<tr>
<td>%c</td>
<td>月, 数字(1……12)</td>
</tr>
<tr>
<td>%b</td>
<td>缩写的月份名字(Jan……Dec)</td>
</tr>
<tr>
<td>%j</td>
<td>一年中的天数(001……366)</td>
</tr>
<tr>
<td>%H</td>
<td>小时(00……23)</td>
</tr>
<tr>
<td>%k</td>
<td>小时(0……23)</td>
</tr>
<tr>
<td>%h</td>
<td>小时(01……12)</td>
</tr>
<tr>
<td>%I</td>
<td>小时(01……12)</td>
</tr>
<tr>
<td>%l</td>
<td>小时(1……12)</td>
</tr>
<tr>
<td>%i</td>
<td>分钟, 数字(00……59)</td>
</tr>
<tr>
<td>%r</td>
<td>时间,12 小时(hh:mm:ss [AP]M)</td>
</tr>
<tr>
<td>%T</td>
<td>时间,24 小时(hh:mm:ss)</td>
</tr>
<tr>
<td>%S</td>
<td>秒(00……59)</td>
</tr>
<tr>
<td>%s</td>
<td>秒(00……59)</td>
</tr>
<tr>
<td>%p</td>
<td>AM或PM</td>
</tr>
<tr>
<td>%w</td>
<td>一个星期中的天数(0=Sunday···6=Saturday）</td>
</tr>
<tr>
<td>%U</td>
<td>星期(0……52), 这里星期天是星期的第一天</td>
</tr>
<tr>
<td>%u</td>
<td>星期(0……52), 这里星期一是星期的第一天</td>
</tr>
<tr>
<td>%%</td>
<td>字符%</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(<span class="string">'2015-05-04 17:13:40'</span>,<span class="string">'%W %M %Y %H:%i:%s'</span>)</span><br><span class="line"><span class="comment">--返回结果 Monday May 2015 17:13:40</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>TIME_FORMAT(time,format)</code>: 和<code>DATE_FORMAT()</code>类似,但<code>TIME_FORMAT</code>只处理小时、分钟和秒(其余符号产生一个NULL值或0)</li>
<li><code>CURDATE()</code>与<code>CURRENT_DATE()</code>: 以’YYYY-MM-DD’或YYYYMMDD格式返回当前日期值(根据返回值所处上下文是字符串或数字) </li>
<li><code>CURTIME()</code>与<code>CURRENT_TIME()</code>:以’HH:MM:SS’或HHMMSS格式返回当前时间值(根据返回值所处上下文是字符串或数字) </li>
<li><code>NOW()</code>,<code>SYSDATE()</code>与<code>CURRENT_TIMESTAMP()</code>: 以’YYYY-MM-DD HH:MM:SS’或YYYYMMDDHHMMSS格式返回当前日期时间(根据返回值所处上下文是字符串或数字) </li>
<li><code>UNIX_TIMESTAMP()</code>与<code>UNIX_TIMESTAMP(date)</code>: 返回一个Unix时间戳(从’1970-01-01 00:00:00’GMT开始的秒数,date默认值为当前时间)</li>
<li><code>FROM_UNIXTIME(unix_timestamp)</code>: 以’YYYY-MM-DD HH:MM:SS’或YYYYMMDDHHMMSS格式返回时间戳的值</li>
<li><code>FROM_UNIXTIME(unix_timestamp,format)</code>: 以format字符串格式返回时间戳的值</li>
<li><code>SEC_TO_TIME(seconds)</code>: 以’HH:MM:SS’或HHMMSS格式返回秒数转成的TIME值</li>
<li><code>TIME_TO_SEC(time)</code>: 返回time值有多少秒</li>
<li><code>datediff(date1,date2)</code>: 计算两个日期之间间隔的天数</li>
</ul>
<hr>
<h4 id="MySQL批量更新数据，有则更新，无则插入"><a href="#MySQL批量更新数据，有则更新，无则插入" class="headerlink" title="MySQL批量更新数据，有则更新，无则插入"></a>MySQL批量更新数据，有则更新，无则插入</h4><blockquote>
<p><a href="http://lobert.iteye.com/blog/1604122" rel="external nofollow noopener noreferrer" target="_blank">ON DUPLICATE KEY UPDATE重复插入时更新</a></p>
</blockquote>
<p><code>insert on duplicate key update</code><br>在<code>INSERT</code>语句中指定了<code>ON DUPLICATE KEY UPDATE</code>，并且插入行后会导致在一个<code>UNIQUE</code>索引或<code>PRIMARY KEY</code>中出现重复值，则执行旧行<code>UPDATE</code><br>您可以在<code>UPDATE</code>子句中使用<code>VALUES(col_name)</code>函数从<code>INSERT...UPDATE</code>语句的INSERT部分引用列值。换句话说，如果没有发生重复关键字冲突，则<code>UPDATE</code>子句中的<code>VALUES(col_name)</code>可以引用被插入的<code>col_name</code>的值。本函数特别适用于多行插入。<code>VALUES()</code>函数只在<code>INSERT...UPDATE</code>语句中有意义，其它时候会返回NULL。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span> (a,b,c) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>) <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> c=<span class="keyword">VALUES</span>(a)+<span class="keyword">VALUES</span>(b);</span><br></pre></td></tr></table></figure></p>
<p><code>replace</code><br>我们在使用数据库时可能会经常遇到这种情况。如果一个表在一个字段上建立了唯一索引，当我们再向这个表中使用已经存在的键值插入一条记录，那将会抛出一个主键冲突的错误。当然，我们可能想用新记录的值来覆盖原来的记录值。如果使用传统的做法，必须先使用DELETE语句删除原先的记录，然后再使用INSERT插入新的记录。而在MySQL中为我们提供了一种新的解决方案，这就是<code>REPLACE</code>语句。<strong>使用REPLACE插入一条记录时，如果不重复，REPLACE就和INSERT的功能一样，如果有重复记录，REPLACE就使用新记录的值来替换原来的记录值。</strong><br>使用REPLACE的最大好处就是可以将DELETE和INSERT合二为一，形成一个原子操作。这样就可以不必考虑在同时使用<strong>DELETE</strong>和<strong>INSERT</strong>时添加事务等复杂操作了。<br>在使用REPLACE时，表中必须有唯一索引，而且这个索引所在的字段不能允许空值，否则REPLACE就和INSERT完全一样的。<br>在执行REPLACE后，系统返回了所影响的行数，如果返回1，说明在表中并没有重复的记录，如果返回2，说明有一条重复记录，系统自动先调用了DELETE删除这条记录，然后再记录用INSERT来插入这条记录。如果返回的值大于2，那说明有多个唯一索引，有多条记录被删除和插入。<br>REPLACE的语法和INSERT非常的相似，如下面的REPLACE语句是插入或更新一条记录。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (<span class="keyword">id</span>,<span class="keyword">name</span>,age) <span class="keyword">VALUES</span>(<span class="number">123</span>, <span class="string">'a'</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></p>
<p>REPLACE也可以使用SET语句<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> <span class="keyword">users</span> <span class="keyword">SET</span> <span class="keyword">id</span> = <span class="number">123</span>, <span class="keyword">name</span> = <span class="string">'a'</span>, age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p>
<hr>
<p>####中文排序</p>
<blockquote>
<p><a href="http://www.jb51.net/article/28876.htm" rel="external nofollow noopener noreferrer" target="_blank">让MySQL支持中文排序的实现方法</a></p>
</blockquote>
<p>使用<code>CONVERT</code>来转换字符集<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mytable <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">CONVERT</span>(chineseColumnName <span class="keyword">USING</span> gbk);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Database</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>date</tag>
        <tag>string</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基本配置</title>
    <url>/mysql-setting/</url>
    <content><![CDATA[<h3 id="MySQL免安装版配置"><a href="#MySQL免安装版配置" class="headerlink" title="MySQL免安装版配置"></a>MySQL免安装版配置</h3><blockquote>
<p><a href="http://blog.csdn.net/zhouqi_2011/article/details/8751636" rel="external nofollow noopener noreferrer" target="_blank">MySQL Win免安装版配置</a><br><a href="http://blog.csdn.net/q98842674/article/details/12094777" rel="external nofollow noopener noreferrer" target="_blank">MySQL-5.6.13免安装版配置方法</a><br><a href="http://www.cnblogs.com/wenthink/p/MySQLInstall.html" rel="external nofollow noopener noreferrer" target="_blank">安装 mysql-5.7.5-m15-winx64</a></p>
</blockquote>
<p>修改文件目录下的<code>my-default.ini</code>为<code>my.ini</code><br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">basedir</span> = D:/mysql</span><br><span class="line"><span class="attr">datadir</span> = D:/mysql/data</span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">server_id</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">log-error</span> = <span class="string">"D:/mysql/log/mysql_error_log.err"</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集</span></span><br><span class="line"><span class="attr">character-set-server</span> = utf8</span><br><span class="line"><span class="comment"># mysql服务器支持的最大并发连接数（用户数）</span></span><br><span class="line"><span class="attr">max_connections</span> = <span class="number">100</span></span><br><span class="line"><span class="comment"># 设置table高速缓存的数量</span></span><br><span class="line"><span class="attr">table_open_cache</span> = <span class="number">256</span></span><br><span class="line"><span class="comment"># 查询缓存大小，用于缓存SELECT查询结果</span></span><br><span class="line"><span class="attr">query_cache_size</span> = <span class="number">1</span>M</span><br><span class="line"><span class="comment"># 内存中的每个临时表允许的最大大小</span></span><br><span class="line"><span class="attr">tmp_table_size</span> = <span class="number">32</span>M</span><br><span class="line"><span class="comment"># 缓存的最大线程数</span></span><br><span class="line"><span class="attr">thread_cache_size</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># InnoDB</span></span><br><span class="line"><span class="attr">innodb_data_home_dir</span> = D:/mysql/data</span><br><span class="line"><span class="comment"># 事务相关参数</span></span><br><span class="line"><span class="comment"># 如果值为1,则InnoDB在每次commit都会将事务日志写入磁盘（磁盘IO消耗较大），这样保证了完全的ACID特性。</span></span><br><span class="line"><span class="comment"># 如果值为0,则表示事务日志写入内存log和内存log写入磁盘的频率都为1次/秒。</span></span><br><span class="line"><span class="comment"># 如果值为2,则表示事务日志在每次commit都写入内存log，但内存log写入磁盘的频率为1次/秒。</span></span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># InnoDB日志数据缓冲大小</span></span><br><span class="line"><span class="attr">innodb_log_buffer_size</span> = <span class="number">2</span>M</span><br><span class="line"><span class="comment"># InnoDB使用缓冲池来缓存索引和行数据。该值设置的越大，则磁盘IO越少。</span></span><br><span class="line"><span class="attr">innodb_buffer_pool_size</span> = <span class="number">128</span>M</span><br><span class="line"><span class="comment"># 每一个InnoDB事务日志的大小</span></span><br><span class="line"><span class="attr">innodb_log_file_size</span> = <span class="number">32</span>M</span><br><span class="line"><span class="comment"># InnoDB内核最大并发线程数</span></span><br><span class="line"><span class="attr">innodb_thread_concurrency</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">join_buffer_size</span> = <span class="number">128</span>M</span><br><span class="line"><span class="attr">sort_buffer_size</span> = <span class="number">2</span>M</span><br><span class="line"><span class="attr">read_rnd_buffer_size</span> = <span class="number">2</span>M</span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">sql-mode</span> = STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure></p>
<p>改后保存，进入命令行工具，定位到mysql目录下的bin目录里，在命令行输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --install MySQL --defaults-file=<span class="string">"D:/mysql/my.ini"</span></span><br></pre></td></tr></table></figure></p>
<p>即可注册MySQL服务为系统服务，然后通过<code>net stary MySQL</code>启动，或者使用<code>service.msc</code>命令启动服务管理界面启动MySQL服务</p>
<ul>
<li>5.7版本之后首先输入命令<code>mysqld --initialize-insecure</code>初始化</li>
</ul>
<hr>
<h3 id="密码设置"><a href="#密码设置" class="headerlink" title="密码设置"></a>密码设置</h3><blockquote>
<p><a href="http://blog.csdn.net/renxianzuo/article/details/6026765" rel="external nofollow noopener noreferrer" target="_blank">Mysql 免安装版 root@localhost 密码设置</a></p>
</blockquote>
<p>使用<code>set password</code>命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br><span class="line">SET PASSWORD FOR <span class="string">'root'</span>@<span class="string">'localhost'</span> = PASSWORD(<span class="string">'newpass'</span>);</span><br></pre></td></tr></table></figure></p>
<p>使用mysqladmin<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password <span class="string">"newpass"</span></span><br></pre></td></tr></table></figure></p>
<p>如果root已经设置过密码，采用如下方法<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password oldpass <span class="string">"newpass"</span></span><br></pre></td></tr></table></figure></p>
<p>编辑user表<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br><span class="line">use mysql;</span><br><span class="line">UPDATE user SET Password = PASSWORD(<span class="string">'newpass'</span>) WHERE user = <span class="string">'root'</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>
<p>5.7之后，上述语句无效，应为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'new_password'</span>;</span><br></pre></td></tr></table></figure></p>
<p>终极办法<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root mysql</span><br><span class="line">UPDATE user SET password=PASSWORD(<span class="string">"new password"</span>) WHERE user=<span class="string">'root'</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><h4 id="全量备份"><a href="#全量备份" class="headerlink" title="全量备份"></a>全量备份</h4><blockquote>
<p><a href="http://blog.csdn.net/younkerjqb/article/details/12193245" rel="external nofollow noopener noreferrer" target="_blank">windows mysql 自动备份的几种方法</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rem *******************************Code Start*****************************</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> <span class="string">"Ymd=%date:~,4%%date:~5,2%%date:~8,2%"</span></span><br><span class="line">C:\MySQL\bin\mysqldump --opt -u root --password=123456 bbs &gt; D:\db_backup\bbs_%Ymd%.sql</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> on</span><br><span class="line">rem *******************************Code End*****************************</span><br></pre></td></tr></table></figure>
<p>将以上脚本代码保存为bat文件<br>然后使用Windows的“计划任务”定时执行该脚本即可<br>注意要备份的路径必须存在<br>通过<code>%date:~5,2%</code>来组合得出当前日期，组合的效果为<strong>yyyymmdd</strong>,date命令得到的日期格式默认为<strong>yyyy-mm-dd</strong>(如果不是此格式可以通过pause命令来暂停命令行窗口看通过<code>%date:~,20%</code>得到的当前计算机日期格式)，所以通<code>过%date:~5,2%</code>即可得到日期中的第五个字符开始的两个字符，例如今天为2015-05-04,通过<code>%date:~5,2%</code>则可以得到05。（日期的字符串的下标是从0开始的）</p>
<hr>
<h4 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h4><blockquote>
<p><a href="http://blog.csdn.net/jueblog/article/details/9909669" rel="external nofollow noopener noreferrer" target="_blank">【SQL】MySQL之使用mysqlbinlog进行增量备份及恢复详解</a></p>
</blockquote>
<p>在<code>my.ini</code>中添加如下语句<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">log-bin</span>=<span class="string">"C:/Program Files/mysql-5.6.22-winx64/logbin/log"</span></span><br><span class="line"><span class="attr">expire_logs_days</span>=<span class="number">7</span></span><br></pre></td></tr></table></figure></p>
<p><code>log-bin</code>为记录日志的文件路径，最后的<code>/log</code>为文件名<br><code>expire_log_days</code>为指定间隔多少日后删除所有的日志文件<br>重启mysql服务后，在指定文件夹logbin下可以发现有log.index,log.000001这样的文件。其中log.index为备份文件的索引，指明有哪些备份文件,其他的为备份文件，存放用户对数据库的所有操作<br>log.index的文件内容如下<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">C:\Program Files\mysql-5.6.22-winx64\logbin\log.000001</span><br><span class="line">C:\Program Files\mysql-5.6.22-winx64\logbin\log.000002</span><br><span class="line">C:\Program Files\mysql-5.6.22-winx64\logbin\log.000003</span><br></pre></td></tr></table></figure></p>
<p>通过<code>mysqlbinlog</code>程序可以看到日志文件的内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog <span class="string">"C:\Program Files\mysql-5.6.22-winx64\logbin\log.000001"</span></span><br></pre></td></tr></table></figure></p>
<p>按时间导出其中的内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog --start-datetime=<span class="string">"2015-05-04 00:00:00"</span> --stop-datetime=<span class="string">"2015-05-04 23:59:59"</span> juelog.000001 -r test.sql</span><br></pre></td></tr></table></figure></p>
<p>这样可以把处于时间段的所有操作记录导入到test.sql文件中，test.sql文件在mysqlbinlog同级目录。<br><code>--start-datetime</code>与<code>--stop-datetime</code>是可选参数</p>
<p><strong>按位置进行恢复</strong><br>清空表后输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog --stop-position=<span class="string">"行数"</span> log.000001 | mysql -u root -p</span><br></pre></td></tr></table></figure></p>
<p>输入密码后即可恢复数据</p>
<p><strong>总结</strong><br>Mysql数据库会以二进制形式，自动把用户对mysql数据库的操作，记录到备份文件中。<br>当用户希望恢复的时候，可以使用备份文件，来进行相应的恢复。<br>备份文件中会记录创建表的语句、删除表的语句、insert语句、delect语句、update语句等，而不会记录select语句。<br>增量备份记录的内容包括：</p>
<ol>
<li>操作语句本身。</li>
<li>操作的时间。</li>
<li>操作的位置。</li>
</ol>
<hr>
<h3 id="MySQL-5-6-中-TIMESTAMP-的变化"><a href="#MySQL-5-6-中-TIMESTAMP-的变化" class="headerlink" title="MySQL 5.6 中 TIMESTAMP 的变化"></a>MySQL 5.6 中 TIMESTAMP 的变化</h3><blockquote>
<p><a href="http://www.williamsang.com/archives/818.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL 5.6 中 TIMESTAMP 的变化</a></p>
</blockquote>
<p>在my.ini中的<code>[mysqld]</code>节点下添加<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">explicit_defaults_for_timestamp</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>重启MySQL后错误消失，这时<strong>TIMESTAMP</strong>的行为如下：</p>
<ul>
<li><strong>TIMESTAMP</strong>如果没有显示声明<strong>NOT NULL</strong>，是允许<strong>NULL</strong>值的，可以直接设置改列为<strong>NULL</strong>，而没有默认填充行为。</li>
<li><strong>TIMESTAMP</strong>不会默认分配<code>DEFAULT CURRENT_TIMESTAMP</code>和<code>ON UPDATE CURRENT_TIMESTAMP</code>属性。</li>
<li>声明为<strong>NOT NULL</strong>且没有默认子句的TIMESTAMP列是没有默认值的。往数据表中插入列，又没有给<strong>TIMESTAMP</strong>列赋值时，如果是严格SQL模式，会抛出一个错误，如果严格SQL模式没有启用，该列会赋值为’0000-00-00 00:00:00′，同时出现一个警告。（这和MySQL处理其他时间类型数据一样，如DATETIME）</li>
</ul>
<hr>
<h3 id="CommunicationsException异常处理"><a href="#CommunicationsException异常处理" class="headerlink" title="CommunicationsException异常处理"></a>CommunicationsException异常处理</h3><blockquote>
<p>来自 <a href="http://flex4.blog.163.com/blog/static/2116401192012113104932833/" rel="external nofollow noopener noreferrer" target="_blank">com.mysql.jdbc.exceptions.jdbc4.CommunicationsException</a></p>
</blockquote>
<p>mysql5将其连接的等待时间(wait_timeout)缺省为8小时.如果在wait_timeout秒期间内，数据库连接(java.sql.Connection)一直处于等待状态，mysql5就将该连接关闭。这时，你的JavaEE应用的连接池仍然合法地持有该连接的引用。当用该连接来进行数据库操作时，就碰到上述错误。<br>解决这个错误需要在my.ini配置文件中<code>[mysqld]</code>节点下配置<code>wait_timeout</code>将超时时间改为自己需要的时间<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">wait_timeout</span>=<span class="number">1814400</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Mac下的MySQL卸载"><a href="#Mac下的MySQL卸载" class="headerlink" title="Mac下的MySQL卸载"></a>Mac下的MySQL卸载</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/1436425/how-do-you-uninstall-mysql-from-mac-os-x" rel="external nofollow noopener noreferrer" target="_blank">How do you uninstall MySQL from Mac OS X?</a><br><a href="https://gist.github.com/vitorbritto/0555879fe4414d18569d" rel="external nofollow noopener noreferrer" target="_blank">Remove MySQL completely from Mac OSX</a></p>
</blockquote>
<p>运行终端，输入下列命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/mysql*</span><br><span class="line">sudo rm -rf /Library/StartupItems/MySQLCOM</span><br><span class="line">sudo rm -rf /Library/PreferencePanes/MySQL*</span><br><span class="line">rm -rf ~/Library/PreferencePanes/MySQL*</span><br><span class="line">sudo rm -rf /Library/Receipts/mysql*</span><br><span class="line">sudo rm -rf /Library/Receipts/MySQL*</span><br><span class="line">sudo rm -rf /var/db/receipts/com.mysql.*</span><br><span class="line">sudo rm -rf /private/var/db/receipts/*mysql*</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Database</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下nginx配置</title>
    <url>/nginx-windows/</url>
    <content><![CDATA[<h3 id="windows下nginx配置"><a href="#windows下nginx配置" class="headerlink" title="windows下nginx配置"></a>windows下nginx配置</h3><blockquote>
<p><a href="http://blog.csdn.net/yetaodiao/article/details/23521411" rel="external nofollow noopener noreferrer" target="_blank">Windows下nginx+tomcat的负载均衡</a><br><a href="http://cxshun.iteye.com/blog/1535188" rel="external nofollow noopener noreferrer" target="_blank">tomcat结合nginx使用小结</a><br><a href="http://koda.iteye.com/blog/601249" rel="external nofollow noopener noreferrer" target="_blank">Nginx - Windows下Nginx基本安装和配置</a><br><a href="http://www.linuxidc.com/Linux/2013-10/92147.htm" rel="external nofollow noopener noreferrer" target="_blank">Nginx之虚拟目录-root与alias的区别</a></p>
</blockquote>
<h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。<br>启动nginx命令:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start nginx</span><br></pre></td></tr></table></figure></p>
<p>如果修改了配置文件只想验证有没有出错可以输入以下命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure></p>
<p>修改了配置文件重启的命令为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></p>
<p>停止的命令为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure></p>
<p>配置文件conf/nginx.conf<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Nginx所用用户和组,window下不指定  </span><br><span class="line">#user  nobody;  </span><br><span class="line">  </span><br><span class="line">#工作的子进程(通常等于CPU数量或者1倍于CPU)  </span><br><span class="line">worker_processes  1;  </span><br><span class="line">  </span><br><span class="line">#错误日志存放路径  </span><br><span class="line">#error_log  logs/error.log;  </span><br><span class="line">#error_log  logs/error.log  notice;  </span><br><span class="line">#error_log  logs/error.log  info;  </span><br><span class="line"></span><br><span class="line">#指定pid存放文件  </span><br><span class="line">#pid        logs/nginx.pid;  </span><br><span class="line">  events &#123;  </span><br><span class="line">    #允许最大连接数  </span><br><span class="line">    worker_connections  1024;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">http &#123;  </span><br><span class="line">    include       mime.types;  </span><br><span class="line">    default_type  application/octet-stream;  </span><br><span class="line">       </span><br><span class="line">     #定义日志格式  </span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;  </span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;  </span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;  </span><br><span class="line">  </span><br><span class="line">    #access_log  logs/access.log  main;  </span><br><span class="line">  </span><br><span class="line">    sendfile        on;  </span><br><span class="line">    #tcp_nopush     on;  </span><br><span class="line">  </span><br><span class="line">    #keepalive_timeout  0;  </span><br><span class="line">    keepalive_timeout  65;  </span><br><span class="line">      </span><br><span class="line">    #客户端上传文件大小控制  </span><br><span class="line">    client_max_body_size 8m;  </span><br><span class="line">      </span><br><span class="line">    #gzip  on;  </span><br><span class="line">      upstream localhost &#123;    </span><br><span class="line">                  server localhost:8080;  </span><br><span class="line">                  server localhost:8000;  </span><br><span class="line">         #根据ip计算将请求分配各那个后端tomcat，许多人误认为可以解决session问题，其实并不能。                 </span><br><span class="line">         #同一机器在多网情况下，路由切换，ip可能不同                  </span><br><span class="line">               ip_hash;    </span><br><span class="line">                   &#125;   </span><br><span class="line">                     </span><br><span class="line">    server &#123;  </span><br><span class="line">        listen       9999;  </span><br><span class="line">        server_name  localhost;  </span><br><span class="line">  </span><br><span class="line">        #charset koi8-r;  </span><br><span class="line">  </span><br><span class="line">        #access_log  logs/host.access.log  main;  </span><br><span class="line">  </span><br><span class="line">        location / &#123;  </span><br><span class="line">            root html;  </span><br><span class="line">            index index.html index.htm;  </span><br><span class="line">            #此处的 http://localhost与upstream localhost对应  </span><br><span class="line">            proxy_pass  http://localhost;  </span><br><span class="line">              </span><br><span class="line">            proxy_redirect off;  </span><br><span class="line">            proxy_set_header Host $host;  </span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;  </span><br><span class="line">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;  </span><br><span class="line">            client_max_body_size   10m;   </span><br><span class="line">            client_body_buffer_size  128k;  </span><br><span class="line">            proxy_connect_timeout  100;  </span><br><span class="line">            proxy_send_timeout   100;  </span><br><span class="line">            proxy_read_timeout 100;  </span><br><span class="line">            proxy_buffer_size 4k;  </span><br><span class="line">            proxy_buffers  4 32k;  </span><br><span class="line">            proxy_busy_buffers_size 64k;  </span><br><span class="line">            proxy_temp_file_write_size  64k;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        #error_page  404              /404.html;  </span><br><span class="line">  </span><br><span class="line">        # redirect server error pages to the static page /50x.html  </span><br><span class="line">        #  </span><br><span class="line">        error_page   500 502 503 504  /50x.html;  </span><br><span class="line">        location = /50x.html &#123;  </span><br><span class="line">            root   html;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p><code>server</code>节点下的配置意义如下:<br><code>listen</code>: 表示当前的代理服务器监听的端口，默认的是监听80端口。注意，如果我们配置了多个server，这个listen要配置不一样，不然就不能确定转到哪里去了<br><code>server_name</code>: 表示监听到之后需要转到哪里去<br><code>location</code>: 表示匹配的路径，这时配置了/表示所有请求都被匹配到这里<br><code>root</code>: 里面配置了root这时表示当匹配这个请求的路径时，将会在这个文件夹内寻找相应的文件，这里对我们之后的静态文件伺服很有用<br><code>index</code>: 当没有指定主页时，默认会选择这个指定的文件，它可以有多个，并按顺序来加载，如果第一个不存在，则找第二个，依此类推<br><code>proxy_pass</code>: 它表示代理路径，相当于转发，而不像之前说的root必须指定一个文件夹<br><code>error_page</code>: 发生错误时显示的页面</p>
<p>如果需要代理多台服务器，则如上述配置文件里的模块<code>upstream</code>中添加相应的服务器访问路径<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream local_tomcat &#123;  </span><br><span class="line">    server localhost:8080;  </span><br><span class="line">    server localhost:9999;  </span><br><span class="line">&#125;</span><br><span class="line">server&#123;  </span><br><span class="line">        location / &#123;  </span><br><span class="line">           proxy_pass http://local_tomcat;  </span><br><span class="line">        &#125;  </span><br><span class="line">        #......其他省略  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在server外添加了一个upstream，而直接在<code>proxy_pass</code>里面直接用<code>http://+upstream</code>的名称来使用。<br>    我们还是直<code>接来http://local</code>host，还是和第一个一样的效果，所有链接都没问题，说明我们配置正确。<br><code>upstream</code>中的<code>server</code>元素必须要注意，不能加<code>http://</code>，但<code>proxy_pass</code>中必须加</p>
<p>但有时我们就不想它挂的时候访问另外一个，而只是希望一个服务器访问的机会比另外一个大，这个可以在<code>server</code>最后加上一个<code>weight=</code>数字来指定，数字越大，表明请求到的机会越大<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream local_tomcat &#123;  </span><br><span class="line">    server localhost:8080 weight=1;  </span><br><span class="line">    server localhost:9999 weight=5;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这时我们给了jetty一个更高的权值，让它更有机会访问到，实际上当我们刷新<code>http://localhost</code>访问的时候发现第二台服务器访问机率大很多，第一台服务器几乎没机会访问，一般情况下，如果我们必须这样用，不要相关太大，以免一个服务器负载太大</p>
<hr>
<h4 id="Nginx之虚拟目录-root与alias的区别"><a href="#Nginx之虚拟目录-root与alias的区别" class="headerlink" title="Nginx之虚拟目录-root与alias的区别"></a>Nginx之虚拟目录-root与alias的区别</h4><p>1、alias后跟的指定目录是准确的,并且末尾必须加“/”，否则找不到文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location /c/ &#123;</span><br><span class="line">      alias /a/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果访问站点<code>http://location/c</code>访问的就是<code>/a/</code>目录下的站点信息</p>
<p>2、root后跟的指定目录是上级目录，并且该上级目录下要含有和location后指定名称的同名目录才行，末尾“/”加不加无所谓。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location /c/ &#123;</span><br><span class="line">      root /a/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果访问站点<code>http://location/c</code>访问的就是<code>/a/c</code>目录下的站点信息。</p>
<p>3、一般情况下，在<code>location /</code>中配置<code>root</code>，在<code>location /other</code>中配置<code>alias</code>是一个好习惯。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js配置</title>
    <url>/nodejs-config/</url>
    <content><![CDATA[<h3 id="Windows下安装Nodejs"><a href="#Windows下安装Nodejs" class="headerlink" title="Windows下安装Nodejs"></a>Windows下安装Nodejs</h3><blockquote>
<p><a href="http://www.cnblogs.com/terrylin/archive/2013/01/26/2877699.html" rel="external nofollow noopener noreferrer" target="_blank">Node.js环境搭建</a><br><a href="http://www.cnblogs.com/picaso/p/3848209.html" rel="external nofollow noopener noreferrer" target="_blank">Windows 系统下设置Nodejs NPM全局路径</a></p>
</blockquote>
<p>在<code>Node.js</code><a href="https://nodejs.org/en/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>默认给出的下载安装包是直接安装的，如果想获取免安装包需要点击下载下面的<strong>Other Downloads</strong>链接，选择<em>Windows Binary (.exe)</em>的文件下载即可。<br>下载了单文件之后放入到任意文件夹中，如<code>D:/nodejs</code>,将此路径加入到系统或用户的环境变量中。<br>打开命令行，输入命令<code>node -v</code>，如果有显示版本号，则说明配置成功。<br>下载<code>nodejs</code>包管理工具<code>npm</code>的<a href="https://github.com/npm/npm" rel="external nofollow noopener noreferrer" target="_blank">源代码</a>,点击<strong>Download ZIP</strong>按钮下载后将文件解压到任意文件夹中，如<code>D:/nodejs/npm</code>,进入命令行输入如下命令安装<code>npm</code>:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node cli.js install -gf</span><br></pre></td></tr></table></figure></p>
<p>待安装完成后输入命令<code>npm -v</code>，如果有显示版本号，则说明配置成功。<br>默认情况下,<code>npm</code>安装包以及缓存的路径在<code>${APPDATA}\npm</code>中,打开<code>node_modules\npm\.npmrc</code>文件，修改为以下内容:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">prefix = D:\nodejs</span><br><span class="line">cache = D:\nodejs\npm_cache</span><br></pre></td></tr></table></figure></p>
<p>其中<code>prefix</code>为npm包的安装路径,<code>cache</code>则为下载包的缓存路径。</p>
<a id="more"></a>
<hr>
<h3 id="npm卸载包"><a href="#npm卸载包" class="headerlink" title="npm卸载包"></a>npm卸载包</h3><blockquote>
<p><a href="http://zhidao.baidu.com/link?url=c6zMFnprbEsKBl0Oid6Mak47dZjlU3zArA8_-8NczkEIkdoM2ecd8QhnZeh2NrcwMY1epEa4mAnNPTmGmENWifCJ0HKzV9rCE8o1UGjh1kC" rel="external nofollow noopener noreferrer" target="_blank">如何删除nodejs express</a></p>
</blockquote>
<p>使用<code>npm</code>安装包的命令为<code>npm install package_name</code>,如果需要全局安装，则加一个参数<code>-g</code>,如果需要给项目安装，则加一个参数<code>--save</code>,它会自动将安装信息加入到项目<code>package.json</code>文件中。</p>
<p>删除包的命令为<code>npm uninstall package_name</code>,参数与安装的一致。</p>
<hr>
<h3 id="Mac-OSX下卸载Nodejs"><a href="#Mac-OSX下卸载Nodejs" class="headerlink" title="Mac OSX下卸载Nodejs"></a>Mac OSX下卸载Nodejs</h3><blockquote>
<p><a href="https://gist.github.com/TonyMtz/d75101d9bdf764c890ef" rel="external nofollow noopener noreferrer" target="_blank">Uninstall nodejs from OSX Yosemite</a></p>
</blockquote>
<p>打开命令行，输入命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/lib/node* /usr/<span class="built_in">local</span>/lib/dtrace/node.d</span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/share/man/man1/node.1</span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/include/node*  /usr/<span class="built_in">local</span>/bin/node /usr/<span class="built_in">local</span>/bin/npm</span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/bin/node_modules</span><br><span class="line">sudo rm -rf ~/.npm sudo rm -rf ~/.node-gyp sudo rm -rf ~/node_modules</span><br><span class="line">sudo rm -rf /var/db/receipts/org.nodejs.*</span><br></pre></td></tr></table></figure></p>
<p>如果全局安装了其他的组件，需要在<code>/usr/local/bin</code>目录下把其他组件的命令删除，可以使用<code>ls -lsa</code>命令显示出链接对应的路径，删除<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">ls -lsa</span><br></pre></td></tr></table></figure></p>
<p>如果安装的组件太多，可以借助强大的命令一次性搞定：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /usr/<span class="built_in">local</span>/bin | grep <span class="string">'/lib/node_modules/'</span> | awk <span class="string">'&#123;print $9&#125;'</span> | xargs rm</span><br></pre></td></tr></table></figure></p>
<p>首先按管道符分解命令:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line">total 65144</span><br><span class="line">lrwxr-xr-x  1 root   wheel        66  4  5  2016 2to3 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.5/bin/2to3</span><br><span class="line">lrwxr-xr-x  1 root   wheel        70  4  5  2016 2to3-3.5 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.5/bin/2to3-3.5</span><br><span class="line">-rwxr-xr-x  1 root   wheel        80  3  5  2016 VBoxAutostart</span><br><span class="line">-rwxr-xr-x  1 root   wheel        82  3  5  2016 VBoxBalloonCtrl</span><br><span class="line">-rwxr-xr-x  1 root   wheel        77  3  5  2016 VBoxDTrace</span><br><span class="line">-rwxr-xr-x  1 root   wheel        79  3  5  2016 VBoxHeadless</span><br><span class="line">-rwxr-xr-x  1 root   wheel        77  3  5  2016 VBoxManage</span><br><span class="line">-rwxr-xr-x  1 root   wheel        79  3  5  2016 VBoxVRDP</span><br><span class="line">-rwxr-xr-x  1 root   wheel        77  3  5  2016 VirtualBox</span><br><span class="line">-rwxr-xr-x  1 admin  admin       656  4  5  2016 brew</span><br><span class="line">lrwxr-xr-x  1 admin  admin        38  5  3  2016 carthage -&gt; ../Cellar/carthage/0.16.2/bin/carthage</span><br><span class="line">lrwxrwxr-x  1 root   admin        78  4  5  2016 easy_install-3.5 -&gt; ../../../Library/Frameworks/Python.framework/Versions/3.5/bin/easy_install-3.5</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p>这里把所有的链接都显示出来了，还有他们的目标文件，需要查找到<code>node</code>相关的组件，就需要借助<code>grep</code>命令来搜寻：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /usr/<span class="built_in">local</span>/bin | grep <span class="string">'/lib/node_modules/'</span></span><br><span class="line"></span><br><span class="line">lrwxr-xr-x  1 root   admin        49 11  8 17:28 node-supervisor -&gt; ../lib/node_modules/supervisor/lib/cli-wrapper.js</span><br><span class="line">lrwxr-xr-x  1 502    staff        38 11  8 17:15 npm -&gt; ../lib/node_modules/npm/bin/npm-cli.js</span><br><span class="line">lrwxr-xr-x  1 root   admin        49 11  8 17:28 supervisor -&gt; ../lib/node_modules/supervisor/lib/cli-wrapper.js</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p>这样已经把我们需要的组件给找出来了，接下来我们只需要获取到组件名字，就需要借助强大的<code>awk</code>命令:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /usr/<span class="built_in">local</span>/bin | grep <span class="string">'/lib/node_modules/'</span> | awk <span class="string">'&#123;print $9&#125;'</span></span><br><span class="line"></span><br><span class="line">node-supervisor</span><br><span class="line">npm</span><br><span class="line">supervisor</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p><code>awk</code>命令默认按照换行符<code>\n</code>来分割记录，使用空格或者<code>Tab</code>来分割域，这里使用<code>{print $9}</code>则是打印出第九列的数据来，刚好是对应的命令链接名。</p>
<p><code>xargs</code>默认将传入的参数中的换行去除，最终显示出来的则是:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /usr/<span class="built_in">local</span>/bin | grep <span class="string">'/lib/node_modules/'</span> | awk <span class="string">'&#123;print $9&#125;'</span> | xargs</span><br><span class="line"></span><br><span class="line">node-supervisor npm supervisor ......</span><br></pre></td></tr></table></figure></p>
<p>最后配上删除命令<code>rm</code>删除即可</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js部分框架知识点整理</title>
    <url>/nodejs-multer/</url>
    <content><![CDATA[<p>使用Express框架及周边的一些框架碰到了一系列的问题，把解决方法整理记录一下。</p>
<a id="more"></a>
<h3 id="解决multer无法识别ng-file-upload批量上传文件"><a href="#解决multer无法识别ng-file-upload批量上传文件" class="headerlink" title="解决multer无法识别ng-file-upload批量上传文件"></a>解决multer无法识别ng-file-upload批量上传文件</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/32917617/multer-not-accepting-files-in-array-format-gives-unexpected-filed-error" rel="external nofollow noopener noreferrer" target="_blank">Multer not accepting files in array format gives ‘Unexpected Filed Error’</a></p>
</blockquote>
<p><code>ng-file-upload</code>上传插件批量上传文件时默认使用<code>files[0]</code>, <code>files[1]</code>, <code>files[2]</code>…这样的数组形式标识上传文件，而<code>multer</code>无法识别同样名字的上传文件。因此需要在<code>ng-file-upload</code>的配置中修改<strong>arrayKey</strong>属性：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Upload.upload(&#123;</span><br><span class="line">  url: <span class="string">'/upload'</span>,</span><br><span class="line">  arrayKey: <span class="string">''</span>, <span class="comment">// default is '[i]'</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    files: files</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Express中替换模板为HTML"><a href="#Express中替换模板为HTML" class="headerlink" title="Express中替换模板为HTML"></a>Express中替换模板为HTML</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/17560760/why-is-express-telling-me-that-my-default-view-engine-is-not-defined" rel="external nofollow noopener noreferrer" target="_blank">Why is express telling me that my default view engine is not defined?</a></p>
</blockquote>
<p><strong>Express4</strong>中的默认模板为<em>Jade</em>，如果要替换为<em>html</em>则需要引入<em>ejs</em>模板再指定模板文件：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>);</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line">app.engine(<span class="string">'html'</span>, ejs.renderFile);</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Mongoose-部分知识点"><a href="#Mongoose-部分知识点" class="headerlink" title="Mongoose 部分知识点"></a>Mongoose 部分知识点</h3><h4 id="加密字段"><a href="#加密字段" class="headerlink" title="加密字段"></a>加密字段</h4><blockquote>
<p><a href="http://stackoverflow.com/questions/14588032/mongoose-password-hashing" rel="external nofollow noopener noreferrer" target="_blank">Mongoose password hashing</a><br><a href="http://stackoverflow.com/questions/18022365/mongoose-validate-email-syntax" rel="external nofollow noopener noreferrer" target="_blank">Mongoose - validate email syntax</a></p>
</blockquote>
<p>存储如用户密码相关字段时，需要对数据进行加密，这里使用最简单的md5加密方法:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">	email: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">trim</span>: <span class="literal">true</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">unique</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">	password:  &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">set</span>: hashPassword &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashPassword</span>(<span class="params">password</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> md5 = crypto.createHash(<span class="string">'md5'</span>);</span><br><span class="line">	md5.update(password);</span><br><span class="line">	<span class="keyword">return</span> md5.digest(<span class="string">'hex'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证密码</span></span><br><span class="line">UserSchema.methods.comparePassword = <span class="function"><span class="keyword">function</span>(<span class="params">candidatePassword</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.password === hashPassword(candidatePassword);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//验证邮箱</span></span><br><span class="line">UserSchema.path(<span class="string">'email'</span>).validate(<span class="function"><span class="keyword">function</span> (<span class="params">email</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> emailRegex = <span class="regexp">/^([\w-\.]+@([\w-]+\.)+[\w-]&#123;2,4&#125;)?$/</span>;</span><br><span class="line">   <span class="keyword">return</span> emailRegex.test(email);</span><br><span class="line">&#125;, <span class="string">'Invalid email address'</span>);</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="关联ID"><a href="#关联ID" class="headerlink" title="关联ID"></a>关联ID</h4><blockquote>
<p><a href="http://stackoverflow.com/questions/16310598/unable-to-use-match-operator-for-mongodb-mongoose-aggregation-with-objectid" rel="external nofollow noopener noreferrer" target="_blank">unable to use $match operator for mongodb/mongoose aggregation with ObjectId</a></p>
</blockquote>
<p>虽然<code>mongodb</code>是<em>nosql</em>类型的数据库，如果想类似与sql类型的数据库对两张表进行关联的话可以使用内置的<code>ObjectId</code>字段关联，在建立表关联的时候需要将字段设置成<code>mongoose.Schema.Types.ObjectId</code>类型，进行<code>$match</code>查询时需要转换为<code>mongoose.Types.ObjectId</code>类型,如:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">	email: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">trim</span>: <span class="literal">true</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">unique</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">	password:  &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">set</span>: hashPassword &#125;,</span><br><span class="line">	bills: [&#123; <span class="attr">type</span>: Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">'Bill'</span> &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//select</span></span><br><span class="line">$matchObject[<span class="string">'host'</span>] = mongoose.Types.ObjectId(hostId);</span><br><span class="line"><span class="keyword">var</span> condition = [&#123; <span class="attr">$match</span>: $matchObject &#125;];</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="转换时区"><a href="#转换时区" class="headerlink" title="转换时区"></a>转换时区</h4><blockquote>
<p><a href="https://gitsea.com/2014/07/26/mongodb-aggregate-timezone-%E9%97%AE%E9%A2%98/" rel="external nofollow noopener noreferrer" target="_blank">Mongodb aggregate timezone 问题</a></p>
</blockquote>
<p><strong>Mongodb</strong>默认存入的时间为UTC时间，因此进行聚合操作的时候需要对时间进行时区转换:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timeOffset = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//The getTimezoneOffset() method returns the time difference between UTC time and local time, in minutes.</span></span><br><span class="line">  <span class="keyword">var</span> offset = <span class="keyword">new</span> <span class="built_in">Date</span>().getTimezoneOffset();</span><br><span class="line">  offset = -offset * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">return</span> offset;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$group: &#123;</span><br><span class="line">  <span class="string">'_id'</span>: &#123;</span><br><span class="line">    <span class="string">'year'</span>: &#123; <span class="attr">$year</span>: &#123; <span class="attr">$add</span>: [<span class="string">'$costDate'</span>, utils.timeOffset] &#125; &#125;,</span><br><span class="line">    <span class="string">'month'</span>: &#123; <span class="attr">$month</span>: &#123; <span class="attr">$add</span>: [<span class="string">'$costDate'</span>, utils.timeOffset] &#125; &#125;,</span><br><span class="line">    <span class="string">'day'</span>: &#123; <span class="attr">$dayOfMonth</span>: &#123; <span class="attr">$add</span>: [<span class="string">'$costDate'</span>, utils.timeOffset] &#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="NodeJs网页爬虫"><a href="#NodeJs网页爬虫" class="headerlink" title="NodeJs网页爬虫"></a>NodeJs网页爬虫</h3><blockquote>
<p><a href="https://github.com/request/request" rel="external nofollow noopener noreferrer" target="_blank">request/request</a><br><a href="https://github.com/cheeriojs/cheerio" rel="external nofollow noopener noreferrer" target="_blank">cheeriojs/cheerio</a><br><a href="http://chenxi.name/60.html" rel="external nofollow noopener noreferrer" target="_blank">NodeJs妹子图爬虫</a><br><a href="https://cnodejs.org/topic/5203a71844e76d216a727d2e" rel="external nofollow noopener noreferrer" target="_blank">通读cheerio API</a></p>
</blockquote>
<p>网页爬虫需要用到两个模块:<code>request</code>与<code>cheerio</code>。<code>request</code>用来请求网页，<code>cheerio</code>用来解析网页。<br><code>cheerio</code>的方法与效果跟<code>jQuery</code>的方法类似<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.gamersky.com/'</span>;</span><br><span class="line">request(url, <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">	  <span class="comment">//请求网址返回的页面</span></span><br><span class="line">	  <span class="comment">//console.log(body);</span></span><br><span class="line">	  <span class="comment">//通过cheerio解析返回的网页</span></span><br><span class="line">	  <span class="keyword">var</span> $ = cheerio.load(body);</span><br><span class="line">	  <span class="comment">//获取新闻列表</span></span><br><span class="line">	  <span class="keyword">var</span> news = [];</span><br><span class="line">	  <span class="comment">//循环遍历新闻列表</span></span><br><span class="line">	  $(<span class="string">'li.li3'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, elem</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//获取列表里面的div</span></span><br><span class="line">		<span class="keyword">var</span> $div = $(<span class="string">'div.txt'</span>, elem);</span><br><span class="line">		<span class="keyword">var</span> link = &#123;&#125;;</span><br><span class="line">		<span class="comment">//装载标题</span></span><br><span class="line">		link[<span class="string">'title'</span>] = $(<span class="string">'a'</span>, $div).text();</span><br><span class="line">		<span class="comment">//装载链接</span></span><br><span class="line">		link[<span class="string">'link'</span>] = $(<span class="string">'a'</span>, $div).attr(<span class="string">'href'</span>);</span><br><span class="line">		<span class="comment">//放入到新闻列表中</span></span><br><span class="line">		news.push(link);</span><br><span class="line">	  &#125;);</span><br><span class="line">	  <span class="built_in">console</span>.log(news);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Node.js</category>
        <category>Express</category>
      </categories>
      <tags>
        <tag>Express</tag>
        <tag>Mongoose</tag>
        <tag>Multer</tag>
        <tag>Cheerio</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise处理异步操作</title>
    <url>/nodejs-promise/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="external nofollow noopener noreferrer" target="_blank">Promise</a><br><a href="http://www.ituring.com.cn/article/54547" rel="external nofollow noopener noreferrer" target="_blank">在Node.js 中用 Q 实现Promise – Callbacks之外的另一种选择</a><br><a href="http://my.oschina.net/tongjh/blog/275378?fromerr=fB9aMhnD" rel="external nofollow noopener noreferrer" target="_blank">nodejs promise for q.js</a><br><a href="http://www.tuicool.com/articles/AjaUjyJ" rel="external nofollow noopener noreferrer" target="_blank">利用q.js实现node 常用api的promise化</a><br><a href="https://github.com/kriskowal/q" rel="external nofollow noopener noreferrer" target="_blank">q</a></p>
</blockquote>
<p><code>javascript</code>中处理异步一般都是使用回调函数<code>callback</code>来解决的。但是这种写法很容易写出金字塔形的代码，可读性差。而是用<code>promise</code>链式的代码无疑更容易维护。</p>
<a id="more"></a>
<p>首先看一下<strong>ES6</strong>中的<code>promise</code>：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>()+<span class="string">' result: '</span>+result);</span><br><span class="line">	<span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">	    <span class="comment">//模拟耗时操作，1秒后响应</span></span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			result = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">1000</span>);</span><br><span class="line">			<span class="keyword">if</span>(result &gt; <span class="number">500</span>)&#123;</span><br><span class="line">			    <span class="comment">//得到返回值</span></span><br><span class="line">				resolve(result);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			    <span class="comment">//抛出异常</span></span><br><span class="line">				reject(result);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="number">1000</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	p.then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>()+<span class="string">' resolve result: '</span>+result);</span><br><span class="line">	&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>()+<span class="string">' reject result: '</span>+result);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也可以使用<code>q.js</code>来实现<code>promise</code>。<br>首先需要安装<code>q.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install q --save</span><br></pre></td></tr></table></figure></p>
<p>然后可以用他来进行改造默认的<code>callback</code>风格函数。例如<code>nodejs</code>中对文件的读取操作：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filename = <span class="string">'test.txt'</span>;</span><br><span class="line"><span class="keyword">var</span> encoding = <span class="string">'utf-8'</span>;</span><br><span class="line"></span><br><span class="line">fs.readFile(filename, encoding, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">	<span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>使用<code>nfcall</code>,<code>nfapply</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//nfcall与nfapply类似，区别则是传入参数的格式不同</span></span><br><span class="line"><span class="comment">//nfcall的传入参数不定</span></span><br><span class="line"><span class="comment">//nfapply的传入参数为数组</span></span><br><span class="line"><span class="keyword">var</span> q_nfcall_test = Q.nfcall(fs.readFile, filename,encoding);</span><br><span class="line"><span class="keyword">var</span> q_nfapply_test = Q.nfapply(fs.readFile, [filename,encoding]);</span><br><span class="line"></span><br><span class="line">q_nfcall_test.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'q_nfcall_test resolve result: '</span>+result);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'q_nfcall_test reject result: '</span>+error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">q_nfapply_test.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'q_nfapply_test resolve result: '</span>+result);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'q_nfapply_test reject result: '</span>+error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>denodeify</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> q_denodeify_test = Q.denodeify(fs.readFile);</span><br><span class="line">q_denodeify_test(filename, encoding).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'q_denodeify_test resolve result: '</span>+result);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'q_denodeify_test reject result: '</span>+error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>makeNodeResolver</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> q_makeNodeResolver_test = <span class="function"><span class="keyword">function</span>(<span class="params">filename, encoding</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> deferred = Q.defer();</span><br><span class="line">	fs.readFile(filename, encoding, deferred.makeNodeResolver());</span><br><span class="line">	<span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">q_makeNodeResolver_test(filename, encoding).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'q_makeNodeResolver_test resolve result: '</span>+result);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'q_makeNodeResolver_test reject result: '</span>+error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>deferd</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q_deferred_test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> deferred = Q.defer();</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		result = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">1000</span>);</span><br><span class="line">		<span class="keyword">if</span>(result &gt; <span class="number">500</span>)&#123;</span><br><span class="line">			deferred.resolve(result);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			deferred.reject(result);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;, <span class="number">1000</span>);</span><br><span class="line">	<span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q_deferred_test().then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>()+<span class="string">' resolve result: '</span>+result);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>()+<span class="string">' reject result: '</span>+error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>可以写出链式操作：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q_delay_test</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Q.delay(value, value * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q_delay_test(<span class="number">1</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>()+<span class="string">' q_delay_test result: '</span>+result);</span><br><span class="line">	<span class="comment">//返回值传入下一个promise中</span></span><br><span class="line">	<span class="keyword">return</span> q_delay_test(result);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>()+<span class="string">' q_delay_test result: '</span>+result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>如果需要并行操作，而返回值各不相干，可以使用<code>all</code>方法:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> q_all_test = Q.all([</span><br><span class="line">	q_delay_test(<span class="number">1</span>),</span><br><span class="line">	q_delay_test(<span class="number">2</span>)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">q_all_test.then(<span class="built_in">console</span>.log,<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure></p>
<p><code>all</code>方法返回的返回值为一个数组，数组的值为<code>all</code>里面各个函数的返回值。如果需要精确的得到返回值，可以使用<code>spread</code>方法：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">q_all_test.spread(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>()+<span class="string">':'</span>+a);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>()+<span class="string">':'</span>+b);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Office组件小技巧</title>
    <url>/office/</url>
    <content><![CDATA[<h3 id="word-2010-自定义页码起始页"><a href="#word-2010-自定义页码起始页" class="headerlink" title="word 2010 自定义页码起始页"></a>word 2010 自定义页码起始页</h3><blockquote>
<p><a href="http://blog.sina.com.cn/s/blog_52f3cd9d0100qcz2.html" rel="external nofollow noopener noreferrer" target="_blank">Word 2010 中自定义页码起始页</a></p>
</blockquote>
<h4 id="从第二页开始编号"><a href="#从第二页开始编号" class="headerlink" title="从第二页开始编号"></a>从第二页开始编号</h4><ol>
<li>双击页码以打开<strong>页眉和页脚工具-&gt;设计</strong>选项卡</li>
<li>选中<strong>设计-&gt;选项-&gt;首页不同</strong>复选框</li>
<li>若要从<strong>1</strong>开始编号，单击<strong>页眉和页脚-&gt;页码-&gt;设置页码格式-&gt;起始编号</strong>,输入<strong>1</strong>。</li>
<li>若要返回至文档正文，单击<strong>页眉和页脚工具-&gt;设计-&gt;关闭页眉和页脚</strong>。</li>
</ol>
<h4 id="在其他页面上开始编号"><a href="#在其他页面上开始编号" class="headerlink" title="在其他页面上开始编号"></a>在其他页面上开始编号</h4><ol>
<li>单击要开始编号的页面的开头; 按<code>Home</code>键可确保光标位于页面开头。</li>
<li>单击<strong>页面布局-&gt;页面设置-&gt;分隔符</strong>,在<strong>分节符</strong>下,单击<strong>下一页</strong>。</li>
<li>双击页码以打开<strong>页眉和页脚工具-&gt;设计</strong>选项卡</li>
<li>单击<strong>页眉和页脚工具-&gt;导航-&gt;链接到前一节</strong>以禁用它。</li>
<li>若要从<strong>1</strong>开始编号，单击<strong>页眉和页脚-&gt;页码-&gt;设置页码格式-&gt;起始编号</strong>,输入<strong>1</strong>。</li>
<li>若要返回至文档正文，单击<strong>页眉和页脚工具-&gt;设计-&gt;关闭页眉和页脚</strong>。</li>
</ol>
<hr>
<h3 id="word-2010-取消拼写检查"><a href="#word-2010-取消拼写检查" class="headerlink" title="word 2010 取消拼写检查"></a>word 2010 取消拼写检查</h3><blockquote>
<p><a href="http://www.360doc.com/content/10/1118/11/3043134_70362694.shtml" rel="external nofollow noopener noreferrer" target="_blank">word2010 取消拼写检查</a></p>
</blockquote>
<p><strong>审阅-&gt;拼写和语法-&gt;全部忽略</strong><br>或者<br><strong>文件-&gt;选项-&gt;校对-&gt;在word中更正拼写和语法时</strong>,取消选中<strong>键入时拼写检查</strong>。</p>
<hr>
<h3 id="去掉word里面的超链接"><a href="#去掉word里面的超链接" class="headerlink" title="去掉word里面的超链接"></a>去掉word里面的超链接</h3><blockquote>
<p><a href="http://zhidao.baidu.com/link?url=NYnxczV0cIVAVuifje_DBIkCkCkjHBE8Epqsu0Bj_bXVfLsF8hk5oCJCrdWyB8UiO2XZWN9E43bCZF3Y0pus_K" rel="external nofollow noopener noreferrer" target="_blank">怎么去掉WORD文档里的所有超链接？</a></p>
</blockquote>
<p>快捷键方法：<code>Ctrl+A</code>全选之后再按<code>Ctrl+Shift+F9</code></p>
<hr>
<h3 id="outlook2003取消记住密码"><a href="#outlook2003取消记住密码" class="headerlink" title="outlook2003取消记住密码"></a>outlook2003取消记住密码</h3><p>在控制面板-&gt;用户账户-&gt;凭据管理器-&gt;管理Windows凭据中，删除相关的存储凭据即可。或者按<code>win+r</code>弹出运行对话框，接着输入<code>control keymgr.dll</code>可以直达凭据管理器</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle函数命令</title>
    <url>/oracle-func/</url>
    <content><![CDATA[<h4 id="查看oracle版本"><a href="#查看oracle版本" class="headerlink" title="查看oracle版本"></a>查看oracle版本</h4><blockquote>
<p><a href="http://blog.csdn.net/cnham/article/details/5388016" rel="external nofollow noopener noreferrer" target="_blank">查看oracle版本命令</a></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v$<span class="keyword">instance</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product_component_version</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h4 id="insert···select···union语句"><a href="#insert···select···union语句" class="headerlink" title="insert···select···union语句"></a>insert···select···union语句</h4><blockquote>
<p><a href="http://zhidao.baidu.com/question/376044972.html" rel="external nofollow noopener noreferrer" target="_blank">oracle能不能使用insert…select…union语句？</a></p>
</blockquote>
<p>如果需要插入常量，则需要使用<code>dual</code>表,例如<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1 </span><br><span class="line"><span class="keyword">select</span> <span class="string">'a'</span> <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'b'</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="merge-into用法"><a href="#merge-into用法" class="headerlink" title="merge into用法"></a>merge into用法</h4><blockquote>
<p><a href="http://blog.csdn.net/edgenhuang/article/details/3587912" rel="external nofollow noopener noreferrer" target="_blank">oracle merge into 用法详解</a></p>
</blockquote>
<p><code>merge</code>命令可以在SQL语句中对一个表同时执行<code>insert</code>和<code>update</code>操作。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">merge</span> <span class="keyword">into</span> table1 a</span><br><span class="line"><span class="keyword">using</span> table2 b</span><br><span class="line"><span class="keyword">on</span> (a.id = b.id)</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">matched</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">update</span></span><br><span class="line"><span class="keyword">set</span> a.name = b.name</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">not</span> <span class="keyword">matched</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">values</span>(b.id,b.name,b.age)</span><br></pre></td></tr></table></figure></p>
<p><code>merge</code>命令给table1插入table2的数据，其中通过<code>on</code>关键字来匹配相关数据，如果相等则更新相关数据，如果不相等则插入新的数据。其中<code>update</code>及<code>insert</code>语句可以追加<code>where</code>子句进行条件筛选。<code>update</code>及<code>insert</code>语句也不是非必需的，同时也允许在<code>update</code>子句包含<code>delete</code>语句进行删除操作，<code>delete</code>语句必须跟<code>where</code>条件。匹配<code>delete where</code>条件但不匹配<code>on</code>条件的行不会被从表中删除<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">merge</span> <span class="keyword">into</span> table1 a</span><br><span class="line"><span class="keyword">using</span> table2 b</span><br><span class="line"><span class="keyword">on</span> (a.id = b.id)</span><br><span class="line"><span class="keyword">when</span> <span class="keyword">matched</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">update</span></span><br><span class="line"><span class="keyword">set</span> a.name = b.name</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">where</span>(a.name!=<span class="string">'a'</span>)</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="按分隔符截取字符串"><a href="#按分隔符截取字符串" class="headerlink" title="按分隔符截取字符串"></a>按分隔符截取字符串</h4><blockquote>
<p><a href="http://bbs.csdn.net/topics/370163558" rel="external nofollow noopener noreferrer" target="_blank">Oracle函数，按分隔符截取字符串</a></p>
</blockquote>
<p>使用<code>regexp_substr</code>函数利用正则表达式截取<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> regexp_substr(<span class="string">'aaa,bb,ccccc,ddd,vvv'</span>,<span class="string">'[^,]+'</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">from</span> dual</span><br><span class="line">;</span><br></pre></td></tr></table></figure></p>
<p>结果为 ‘ccccc’</p>
<hr>
<h4 id="trunc函数"><a href="#trunc函数" class="headerlink" title="trunc函数"></a>trunc函数</h4><blockquote>
<p><a href="http://database.51cto.com/art/201004/197703.htm" rel="external nofollow noopener noreferrer" target="_blank">Oracle TRUNC函数的正确用法</a></p>
</blockquote>
<p><strong>TRUNC(for dates)</strong><br><code>TRUNC(date[,fmt])</code>为指定元素而截去的日期值。<br><code>date</code>: 一个日期值<br><code>fmt</code>: 日期格式，该日期将由指定的元素格式所截去。忽略它则由最近的日期截去<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> TRUNC(<span class="keyword">TO_DATE</span>(’<span class="number">24</span>-Nov<span class="number">-1999</span> <span class="number">08</span>:<span class="number">00</span> pm’,’dd-mon-yyyy hh:mi am’)) <span class="keyword">from</span> dual</span><br><span class="line"><span class="comment">-- result: 24-Nov-1999 12:00:00 am</span></span><br><span class="line"><span class="keyword">select</span> TRUNC(<span class="keyword">TO_DATE</span>(’<span class="number">24</span>-Nov<span class="number">-1999</span> <span class="number">08</span>:<span class="number">37</span> pm’,’dd-mon-yyyy hh:mi am’,’hh’)) <span class="keyword">from</span> dual</span><br><span class="line"><span class="comment">-- result: 24-Nov-1999 08:00:00 am</span></span><br></pre></td></tr></table></figure></p>
<p><code>round (date,&#39;&#39;format&#39;&#39;)</code>未指定format时，如果日期中的时间在中午之前，则将日期中的时间截断为12 A.M.(午夜,一天的开始),否则进到第二天。<br><code>trunc(date,&#39;&#39;format&#39;&#39;)</code>未指定format时，将日期截为12 A.M.，不考虑是否在中午之前的条件。</p>
<p><strong>TRUNC(for number)</strong><br><code>TRUNC(number[,decimals])</code>函数返回处理后的数值，其工作机制与<code>ROUND</code>函数极为类似，只是该函数不对指定小数前或后的部分做相应舍入选择处理，而统统截去。<br><code>number</code> 待做截取处理的数值<br><code>decimals</code> 指明需保留小数点后面的位数。可选项，忽略它则截去所有的小数部分<br>下面是该函数的使用情况：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> TRUNC（<span class="number">89.985</span>，<span class="number">2</span>） <span class="keyword">from</span> dual</span><br><span class="line"><span class="comment">--result: 89.98</span></span><br><span class="line"><span class="keyword">select</span> TRUNC（<span class="number">89.985</span>） <span class="keyword">from</span> dual</span><br><span class="line"><span class="comment">--result: 89</span></span><br><span class="line"><span class="keyword">select</span> TRUNC（<span class="number">89.985</span>，<span class="number">-1</span>） <span class="keyword">from</span> dual</span><br><span class="line"><span class="comment">--result: 80</span></span><br></pre></td></tr></table></figure></p>
<p>注意：第二个参数可以为负数，表示为小数点左边指定位数后面的部分截去，即均以0记</p>
<hr>
<h4 id="trim函数"><a href="#trim函数" class="headerlink" title="trim函数"></a>trim函数</h4><blockquote>
<p><a href="http://blog.csdn.net/indexman/article/details/7748766" rel="external nofollow noopener noreferrer" target="_blank">oracle trim函数用法详解</a></p>
</blockquote>
<p>基本语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TRIM([ &#123; &#123; LEADING | TRAILING | BOTH &#125;</span><br><span class="line">         [ trim_character ]</span><br><span class="line">       | trim_character</span><br><span class="line">       &#125;</span><br><span class="line">       FROM </span><br><span class="line">     ]</span><br><span class="line">     trim_source</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p>
<p>参数解释：<br><code>leading</code>  开头字符<br><code>trailing</code>  结尾字符<br><code>both</code>  开头和结尾字符<br><code>trim_character</code>  去除的字符<br><code>trim_source</code>  修剪源</p>
<p><code>trim</code>函数用来去除一个字符串的开头或结尾（或两者）的字符。函数返回一个varchar2类型值。该值最大的长度等于<code>trim_source</code>的长度。<code>trim_character</code>和<code>trim_source</code>都可以为以下任意一种数据类型：<strong>CHAR</strong>, <strong>VARCHAR2</strong>， <strong>NCHAR</strong>, <strong>NVARCHAR2</strong>， <strong>CLOB</strong>, <strong>NCLOB</strong>。返回值的类型与<code>trim_source</code>的数据类型一致</p>
<p>如果指定<code>leading</code>参数，oracle数据库将去除任何等于<code>trim_character</code>的开头字符<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(<span class="keyword">leading</span> <span class="string">'a'</span> <span class="keyword">from</span> <span class="string">'abc'</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- result: bc</span></span><br></pre></td></tr></table></figure></p>
<p>如果指定<code>traling</code>参数，oracle将去除任何等于<code>trim_character</code>的结尾字符<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(trailing <span class="string">'c'</span> <span class="keyword">from</span> <span class="string">'abc'</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- result: ab</span></span><br></pre></td></tr></table></figure></p>
<p>如果指定了<code>both</code>参数或者三个参数都未指定，oracle将去除任何等于<code>trim_character</code>的开头和结尾字符<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(<span class="keyword">both</span> <span class="string">'a'</span> <span class="keyword">from</span> <span class="string">'abca'</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- result: bc</span></span><br></pre></td></tr></table></figure></p>
<p>如果没有指定<code>trim_character</code>参数，默认去除的值为空格<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(<span class="keyword">both</span> <span class="keyword">from</span> <span class="string">' abc '</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- result: abc</span></span><br></pre></td></tr></table></figure></p>
<p>如果只指定修剪源<code>trim_source</code>，oracle将去除<code>trim_source</code>的开头和结尾的空格<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(<span class="string">' abc '</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- result: abc</span></span><br></pre></td></tr></table></figure></p>
<p>如果<code>trim_source</code>和<code>trim_character</code>有一个为<strong>null</strong>，则trim函数返回<strong>null</strong><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(<span class="keyword">both</span> <span class="literal">null</span> <span class="keyword">from</span> <span class="string">'abca'</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">trim</span>(<span class="keyword">both</span> <span class="string">'a'</span> <span class="keyword">from</span> <span class="literal">null</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">-- result: (null)</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="NULL相关"><a href="#NULL相关" class="headerlink" title="NULL相关"></a>NULL相关</h4><blockquote>
<p><a href="http://jenny-86.iteye.com/blog/465725" rel="external nofollow noopener noreferrer" target="_blank">oracle中的NVL,NVL2,NULLIF,COALESCE几个通用函数</a></p>
</blockquote>
<ul>
<li><code>NVL(expr1,expr2)</code>: 如果<code>expr1</code>为null则返回<code>expr2</code>,否则返回<code>expr1</code></li>
<li><code>NVL2(expr1,expr2, expr3)</code>: 如果<code>expr1</code>为null则返回<code>expr3</code>，否则返回<code>expr2</code></li>
<li><code>NULLIF(exp1,expr2)</code>: 如果<code>expr1</code>与<code>expr2</code>相等则返回null，否则返回<code>expr1</code></li>
<li><code>Coalesce(expr1, expr2, expr3….. exprn)</code>: 返回第一个不为null的参数，全为空则返回null</li>
</ul>
<hr>
<h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><blockquote>
<p><a href="http://blog.csdn.net/wocjj/article/details/7490994" rel="external nofollow noopener noreferrer" target="_blank">oracle_查询date只显示日期不显示时间</a><br><a href="http://blog.csdn.net/meboy88scofiled/article/details/5035045" rel="external nofollow noopener noreferrer" target="_blank">oracle 日期显示英文格式</a><br><a href="http://bbs.csdn.net/topics/360053715" rel="external nofollow noopener noreferrer" target="_blank">日期如何增加一年</a></p>
</blockquote>
<p><code>TO_CHAR(d [, fmt [, &#39;nlsparams&#39;] ])</code>函数用于将日期转换成指定格式的字符串<br><code>d</code>是<code>Date</code>类型的变量，<code>fmt</code>是我们指定的日期时间格式，如果不显式指定就用 Oracle 的默认值。 <code>fmt</code>里常用的跟日期时间有关的占位符如下：<br>MM 用数字表示的月份(例如，07)<br>MON 缩写的月份名称(例如，JUL)<br>MONTH 完整的月份名称(例如，JULY)<br>DD 日期(例如, 24)<br>DY 星期几的缩写(例如，FRI)<br>YYYY 用4位表示的年份(例如, 2008)<br>YY 用2位表示的年份，取年份的后两位(例如，08)<br>RR 跟 YY 类似，但两位表示的年份被近似到 1950 到 2049 这个范围里的年份<br>AM (或 PM) 上下午指示符<br>HH 12进制表示的时间(1-12)<br>HH24 24进制表示的时间(0-23)<br>MI 分钟(0-59)<br>SS 秒(0-59)</p>
<p>如果需要输出英文格式的日期，可以指定<code>nlsparams</code>为<code>nls_date_language=american</code><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'dd-mon-yyyy'</span>,<span class="string">'nls_date_language=american'</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure></p>
<p>也可以使用<code>ALTER SESSION SET NLS_DATE_LANGUAGE=&#39;AMERICAN&#39;</code>来指定当前会话的<code>NLS_DATE_LANGUAGE</code>属性，但是断开此次会话后，数据库会恢复到默认的格式</p>
<p><code>TO_DATE(char [, fmt [, &#39;nlsparams&#39;] ])</code> 将字符串转换成指定格式的日期。<code>char</code> 是表示日期和时间的字符串。<code>fmt</code> 的表示方法和 <code>TO_CHAR</code> 函数一样</p>
<p>如果需要给日期增加一年可以使用<code>add_months</code>函数<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> add_months(<span class="keyword">sysdate</span>,<span class="number">12</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="rank函数"><a href="#rank函数" class="headerlink" title="rank函数"></a>rank函数</h4><blockquote>
<p><a href="http://keke-wanwei.iteye.com/blog/138632" rel="external nofollow noopener noreferrer" target="_blank">oracle rank()函数总结</a></p>
</blockquote>
<p><code>rank</code>是一个给数据确定等级的函数.</p>
<p>以销售为例,有地区,年,月,销售员,销售额,记录这五个字段.我们可以按地区,年,月,销售额对销售员进行排序,这样对销售员来说就相当于有一个等级概念了,第一名就是销售最高的……,如果我们要找出每个地区,年,月,销售额的前三名销售员.SQL如何写?<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> area_code, <span class="keyword">YEAR</span>, <span class="keyword">MONTH</span>, saleroom,saler   </span><br><span class="line">       <span class="keyword">RANK</span> () <span class="keyword">OVER</span> </span><br><span class="line">    (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> area_code,<span class="keyword">year</span>,<span class="keyword">month</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> area_code,<span class="keyword">year</span>,<span class="keyword">month</span>,saleroom ) <span class="keyword">RANK</span>   </span><br><span class="line"><span class="keyword">FROM</span> t_sale</span><br></pre></td></tr></table></figure></p>
<p>现在RANK 就是1,2,3,3,3,6,有了这个字段,就很容易得到前三名的销售员了.<br>新问题:销售额50000块在深圳,2007年5月能排到第几?<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>    </span><br><span class="line">      <span class="keyword">RANK</span>(<span class="string">'SHENZHEN'</span>,<span class="number">2007</span>,<span class="number">5</span>,<span class="number">50000</span>)  <span class="keyword">WITHIN</span> <span class="keyword">GROUP</span>    </span><br><span class="line">      (<span class="keyword">ORDER</span> <span class="keyword">BY</span> area_code,<span class="keyword">year</span>,<span class="keyword">month</span>,saleroom) <span class="keyword">Rank</span>    </span><br><span class="line"><span class="keyword">FROM</span> T_SALE</span><br></pre></td></tr></table></figure></p>
<p>上面这个SQL就可以搞定了.要注意的是,Rank()里的参数必须为常数,或常值表达式,里面参数的个数,类型也要和order by后字段的类型相对应.<br>上面就是Rank函数的两个用法.另外还有一个<code>dense_rank()</code>,它的用法和<code>rank()</code>一样,只是计算等级的方式不同.例如上面的1,2,3,3,3,6.用dense_rank() 就是1,2,3,3,3,4.</p>
<hr>
<h4 id="over函数"><a href="#over函数" class="headerlink" title="over函数"></a>over函数</h4><blockquote>
<p><a href="http://database.51cto.com/art/201005/197847.htm" rel="external nofollow noopener noreferrer" target="_blank">Oracle over() 函数的实际用法</a></p>
</blockquote>
<p><code>over()</code> 函数是对分析函数的一种条件解释，直接点就是 给分析函数加条件吧。</p>
<p>在网上看见比较常用的就是 与 <code>sum()</code>、<code>rank()</code> 函数使用。接下来就用分析下两种函数结合over的用法。</p>
<p>以下测试使用scott用户下的emp表数据。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.empno <span class="keyword">as</span> 员工编号</span><br><span class="line">,a.ename <span class="keyword">as</span> 员工姓名</span><br><span class="line">,a.deptno <span class="keyword">as</span> 部门编号</span><br><span class="line">,a.sal <span class="keyword">as</span> 薪酬</span><br><span class="line">,<span class="keyword">sum</span>(sal) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptno) 按部门求薪酬总和</span><br><span class="line"><span class="keyword">from</span> scott.emp a;</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>部门编号</th>
<th>员工姓名</th>
<th>员工编码</th>
<th>薪酬</th>
<th>按部门求薪酬总和</th>
</tr>
</thead>
<tbody>
<tr>
<td>7934</td>
<td>MILLER</td>
<td>10</td>
<td>1300</td>
<td>8750</td>
</tr>
<tr>
<td>7782</td>
<td>CLARK</td>
<td>10</td>
<td>2450</td>
<td>8750</td>
</tr>
<tr>
<td>7839</td>
<td>KING</td>
<td>10</td>
<td>5000</td>
<td>8750</td>
</tr>
<tr>
<td>7369</td>
<td>SMITH</td>
<td>20</td>
<td>800</td>
<td>10875</td>
</tr>
</tbody>
</table>
<p>可以从结果上看到sum()函数对部门区分进行了求和统计。其中“partition by”官方点的说法叫做”分区”，其实就是统计的范围条件</p>
<hr>
<h4 id="SQL-oracle-取得分组后最大值记录"><a href="#SQL-oracle-取得分组后最大值记录" class="headerlink" title="SQL(oracle) 取得分组后最大值记录"></a>SQL(oracle) 取得分组后最大值记录</h4><blockquote>
<p><a href="http://blog.csdn.net/rfb0204421/article/details/7546724" rel="external nofollow noopener noreferrer" target="_blank">SQL(oracle) 取得分组后最大值记录</a></p>
</blockquote>
<p><code>row_number() OVER (PARTITION BY COL1 ORDER BY COL2)</code>表示根据COL1分组，在分组内部根据 COL2排序，而此函数计算的值就表示每组内部排序后的顺序编号（组内连续的唯一的).<br>与<code>rownum</code>的区别在于：使用<code>rownum</code>进行排序的时候是先对结果集加入伪列<code>rownum</code>然后再进行排序，而此函数在包含排序从句后是先排序再计算行号码</p>
<ul>
<li><code>row_number()</code>和<code>rownum</code>差不多，功能更强一点（可以在各个分组内从1开时排序）．</li>
<li><code>rank()</code>是跳跃排序，有两个第二名时接下来就是第四名（同样是在各个分组内）．</li>
<li><code>dense_rank()</code>是连续排序，有两个第二名时仍然跟着第三名。相比之下<code>row_number</code>是没有重复值的</li>
<li><code>lag（arg1,arg2,arg3)</code>: arg1是从其他行返回的表达式;arg2是希望检索的当前行分区的偏移量。是一个正的偏移量，时一个往回检索以前的行的数目。arg3是在arg2表示的数目超出了分组的范围时返回的值。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> sale/cnt <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">sort</span>, sale/cnt</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="number">-60</span> <span class="keyword">as</span> sale,<span class="number">3</span> <span class="keyword">as</span> cnt <span class="keyword">from</span> dual <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">24</span> <span class="keyword">as</span> sale,<span class="number">6</span> <span class="keyword">as</span> cnt <span class="keyword">from</span> dual <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">50</span> <span class="keyword">as</span> sale,<span class="number">5</span> <span class="keyword">as</span> cnt <span class="keyword">from</span> dual <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">-20</span> <span class="keyword">as</span> sale,<span class="number">2</span> <span class="keyword">as</span> cnt <span class="keyword">from</span> dual <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">40</span> <span class="keyword">as</span> sale,<span class="number">8</span> <span class="keyword">as</span> cnt <span class="keyword">from</span> dual</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>执行结果:</p>
<table>
<thead>
<tr>
<th>SORT</th>
<th>SALE/CNT</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td>-10</td>
</tr>
<tr>
<td>5</td>
<td>-20</td>
</tr>
</tbody>
</table>
<p>查询员工的工资,按部门排序<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal,row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptno <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) <span class="keyword">as</span> sal_order <span class="keyword">from</span> scott.emp;</span><br></pre></td></tr></table></figure></p>
<p>执行结果:</p>
<table>
<thead>
<tr>
<th>ENAME</th>
<th>SAL</th>
<th>SAL_ORDER</th>
</tr>
</thead>
<tbody>
<tr>
<td>KING</td>
<td>5000</td>
<td>1</td>
</tr>
<tr>
<td>CLARK</td>
<td>2450</td>
<td>2</td>
</tr>
<tr>
<td>MILLER</td>
<td>1300</td>
<td>3</td>
</tr>
<tr>
<td>SCOTT</td>
<td>3000</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>并列排名<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,sal,<span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptno <span class="keyword">order</span> <span class="keyword">by</span> sal) <span class="keyword">as</span> dense_rank_order <span class="keyword">from</span> scott.emp <span class="keyword">order</span> <span class="keyword">by</span> deptn;</span><br></pre></td></tr></table></figure></p>
<p>执行结果:</p>
<table>
<thead>
<tr>
<th>DEPTNO</th>
<th>SAL</th>
<th>DENSE_RANK_ORDER</th>
</tr>
</thead>
<tbody>
<tr>
<td>30</td>
<td>950</td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td>1250</td>
<td>2</td>
</tr>
<tr>
<td>30</td>
<td>1250</td>
<td>2</td>
</tr>
<tr>
<td>30</td>
<td>1500</td>
<td>3</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="listagg、lag及lead函数"><a href="#listagg、lag及lead函数" class="headerlink" title="listagg、lag及lead函数"></a>listagg、lag及lead函数</h4><blockquote>
<p><a href="http://blog.sina.com.cn/s/blog_4cef5c7b01016efp.html" rel="external nofollow noopener noreferrer" target="_blank">oracle listagg函数、lag函数、lead函数实例</a></p>
</blockquote>
<p><strong>listagg</strong><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">listagg (measure_expr[,'delimiter']) <span class="keyword">with</span> <span class="keyword">group</span> (order_by_clause ) [<span class="keyword">over</span> query_parition_clause]</span><br></pre></td></tr></table></figure></p>
<p><code>listagg</code>的作用是将分组范围内的所有行特定列的记录加以合并成行。函数签名中的<code>measure_expr</code>为分组中每个列的表达式，而<code>delimiter</code>为合并分割符。如果<code>delimiter</code>不设置的话，就表示无分割符。中间<code>within group</code>后面的<code>order_by_clause</code>表示的是进行合并中要遵守的排序顺序。而后面的<code>over</code>子句表明<code>listagg</code>是具有分析函数analyze funcation特性的。具体采用listagg有三个场景。</p>
<ul>
<li><p>当无分组的single-list情况下<br>如果要获取到deptno为30的所有员工横行记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * from emp <span class="built_in">where</span> deptno=30;</span><br><span class="line"></span><br><span class="line">EMPNO ENAME     JOB        MGR HIREDATE         SAL     COMM DEPTNO</span><br><span class="line">----- ---------- --------- ----- ----------- --------- --------- ------</span><br><span class="line"> 7499 ALLEN     SALESMAN  7698 1981-2-20    1600.00   300.00    30</span><br><span class="line"></span><br><span class="line"> 7521 WARD      SALESMAN  7698 1981-2-22    1250.00   500.00    30</span><br><span class="line"></span><br><span class="line"> 7654 MARTIN    SALESMAN  7698 1981-9-28    1250.00  1400.00    30</span><br><span class="line"></span><br><span class="line"> 7698 BLAKE     MANAGER   7839 1981-5-1     2850.00              30</span><br><span class="line"></span><br><span class="line"> 7844 TURNER    SALESMAN  7698 1981-9-8     1500.00     0.00    30</span><br><span class="line"></span><br><span class="line"> 7900 JAMES     CLERK     7698 1981-12-3     950.00              30</span><br><span class="line"></span><br><span class="line">6 rows selected</span><br><span class="line"></span><br><span class="line">--按照empno进行排序</span><br><span class="line"></span><br><span class="line">SQL&gt; select listagg(ename,<span class="string">' , '</span>) within group (order byempno) from emp <span class="built_in">where</span> deptno=30;</span><br><span class="line"></span><br><span class="line">LISTAGG(ENAME,<span class="string">','</span>)WITHINGROUP(</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">ALLEN , WARD , MARTIN , BLAKE , TURNER , JAMES</span><br></pre></td></tr></table></figure>
</li>
<li><p>在有分组条件下的listagg使用<br>如果要使用分组统计各个部门的所有员工列表。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SQL&gt; select deptno, listagg(ename,<span class="string">' ,'</span>) within group (order by empno) from emp group by deptno;</span><br><span class="line"></span><br><span class="line">DEPTNO LISTAGG(ENAME,<span class="string">','</span>)WITHINGROUP(</span><br><span class="line">------ -------------------------------------</span><br><span class="line">   10 CLARK ,KING ,MILLER</span><br><span class="line"></span><br><span class="line">   20 SMITH ,JONES ,SCOTT ,ADAMS ,FORD</span><br><span class="line"></span><br><span class="line">   30 ALLEN ,WARD ,MARTIN ,BLAKE ,TURNER ,JAMES</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用over分组情况<br>如果要统计所有工作十年以上员工和他们相同部门的员工信息，就需要在listagg的基础上加入over分析函数子句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select deptno, ename, </span><br><span class="line">       listagg(ename, <span class="string">' , '</span>) within group (order by empno) </span><br><span class="line">       over (partition by deptno) as emp_list </span><br><span class="line">from emp </span><br><span class="line"><span class="built_in">where</span> hiredate&lt;=add_months(sysdate,-10*12);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">DEPTNO ENAME     EMP_LIST</span><br><span class="line"></span><br><span class="line">------ ------</span><br><span class="line"></span><br><span class="line">   10 CLARK     CLARK , KING , MILLER</span><br><span class="line"></span><br><span class="line">   10 KING      CLARK , KING , MILLER</span><br><span class="line"></span><br><span class="line">   10 MILLER    CLARK , KING , MILLER</span><br><span class="line"></span><br><span class="line">   20 SMITH     SMITH , JONES , SCOTT , ADAMS , FORD</span><br><span class="line"></span><br><span class="line">   20 JONES     SMITH , JONES , SCOTT , ADAMS , FORD</span><br><span class="line"></span><br><span class="line">   20 SCOTT     SMITH , JONES , SCOTT , ADAMS , FORD</span><br><span class="line"></span><br><span class="line">   20 ADAMS     SMITH , JONES , SCOTT , ADAMS , FORD</span><br><span class="line"></span><br><span class="line">   20 FORD      SMITH , JONES , SCOTT , ADAMS , FORD</span><br><span class="line"></span><br><span class="line">   30 ALLEN     ALLEN , WARD , MARTIN , BLAKE , TURNER , JAMES</span><br><span class="line"></span><br><span class="line">   30 WARD      ALLEN , WARD , MARTIN , BLAKE , TURNER , JAMES</span><br><span class="line"></span><br><span class="line">   30 MARTIN    ALLEN , WARD , MARTIN , BLAKE , TURNER , JAMES</span><br><span class="line"></span><br><span class="line">   30 BLAKE     ALLEN , WARD , MARTIN , BLAKE , TURNER , JAMES</span><br><span class="line"></span><br><span class="line">   30 TURNER    ALLEN , WARD , MARTIN , BLAKE , TURNER , JAMES</span><br><span class="line"></span><br><span class="line">   30 JAMES     ALLEN , WARD , MARTIN , BLAKE , TURNER , JAMES</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">14 rows selected</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>lag函数“取到上个月的销售额”</strong><br>我们在进行销售数据统计汇总时候，经常遇到这样的需求：“对比上月（上季度同月份或者上年度同月份），我们的销售变化情况如何？”。我们的销售数据通常是对应单月信息，如下所示。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * from sales_qual;</span><br><span class="line"></span><br><span class="line">MONT        QUALITIES PRICE</span><br><span class="line">---------- ----------- ------</span><br><span class="line">2011-01          1000 23.40</span><br><span class="line"></span><br><span class="line">2011-02          1020 23.40</span><br><span class="line"></span><br><span class="line">2011-03          1030 33.40</span><br><span class="line"></span><br><span class="line">2011-04          1035 10.30</span><br></pre></td></tr></table></figure></p>
<p>如果要获取到之前月份的信息，没有SQL专门函数就意味着需要使用PL/SQL代码进行反复的迭代获取。现在，我们可以使用lag函数来轻易实现这个功能。<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">lag(value_expr [,offset [, default] ) &#123; respect | ignore &#125; nulls ] over ([query_parition_clause] order_by_clause)</span><br><span class="line"></span><br><span class="line">lag(value_expr [ &#123; respect | ignore &#125; nulls] [,offset [,default] ]) over ([query_parition_clause] order_by_clause)</span><br></pre></td></tr></table></figure></p>
<p><code>lag</code>函数是一个典型的分析函数。它提供了在不使用自连接的情况下，访问多个数据行的能力。在返回多个结果行的时候，<code>lag</code>函数可以访问到向上特定<code>offset</code>偏移行的数据。<br><code>value_expr</code>就是访问到向上数据行进行的操作。<code>offset</code>是返回偏移的函数，默认值为<strong>1</strong>。<code>over</code>中，可以定义内部分析的顺序列。</p>
<p>如果我们要获取到对应上个月的销售数据，SQL语句如下：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> mont,qualities, </span><br><span class="line">       lag(qualities,<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> mont) <span class="keyword">as</span> <span class="string">"Next Month Qual"</span></span><br><span class="line"><span class="keyword">from</span> sales_qual</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> mont;</span><br><span class="line"></span><br><span class="line">MONT        QUALITIES Next Month Qual</span><br><span class="line"><span class="comment">---------- ----------- ---------------</span></span><br><span class="line">2011-01          1000</span><br><span class="line"></span><br><span class="line">2011-02          1020           1000</span><br><span class="line"></span><br><span class="line">2011-03          1030           1020</span><br><span class="line"></span><br><span class="line">2011-04          1035           1030</span><br></pre></td></tr></table></figure></p>
<p>之后对销量变化率的处理就方便了，可以进行增长率比对等操作。那么，如果是上一年度或者上一季度的数据呢？我们只需要调节<code>offset</code>，从1变化为12或者3就可以了。</p>
<p>最后，对<code>ignore/respect nulls</code>子句的使用是什么呢？该子句的作用是确定当<code>value_exp</code>r表达式计算出的数值为空null的时候，该列如何进行计算。<code>ignore nulls</code>的作用就是忽略上面计算为空的行，采用上上行row的计算结果。<code>respect nulls</code>的作用是直接反映为null。<code>respect nulls</code>为默认值。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sales_qual;</span><br><span class="line"></span><br><span class="line">MONT        QUALITIES PRICE</span><br><span class="line"><span class="comment">---------- ----------- ------</span></span><br><span class="line">2011-04          1035 10.30</span><br><span class="line"></span><br><span class="line">2011-05                12.30</span><br><span class="line"></span><br><span class="line">2011-06               </span><br><span class="line"></span><br><span class="line">6 rows selected</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> mont,qualities, </span><br><span class="line">       lag(qualities,<span class="number">1</span>)<span class="keyword">ignore</span> nullsover (<span class="keyword">order</span> <span class="keyword">by</span> mont) <span class="keyword">as</span> <span class="string">"Next Month Qual"</span></span><br><span class="line"><span class="keyword">from</span> sales_qual</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> mont;</span><br><span class="line"></span><br><span class="line">MONT        QUALITIES Next Month Qual</span><br><span class="line"><span class="comment">---------- ----------- ---------------</span></span><br><span class="line">2011-04          1035           1030</span><br><span class="line"></span><br><span class="line">2011-05                          1035</span><br><span class="line"></span><br><span class="line">2011-06                          1035</span><br><span class="line"></span><br><span class="line">6 rows selected</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> mont,qualities, </span><br><span class="line">       lag(qualities,<span class="number">1</span>) <span class="keyword">respect</span> <span class="keyword">nulls</span> <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> mont) <span class="keyword">as</span> <span class="string">"Next Month Qual"</span></span><br><span class="line"><span class="keyword">from</span> sales_qual</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> mont;</span><br><span class="line"></span><br><span class="line">MONT        QUALITIES Next Month Qual</span><br><span class="line"><span class="comment">---------- ----------- ---------------</span></span><br><span class="line">2011-04          1035           1030</span><br><span class="line"></span><br><span class="line">2011-05                          1035</span><br><span class="line"></span><br><span class="line">2011-06               </span><br><span class="line"></span><br><span class="line">6 rows selected</span><br></pre></td></tr></table></figure></p>
<p><strong>lead函数获取下一个月销售量</strong><br>有<code>lag</code>的获取上个<code>offset</code>处理行的函数，就有<code>lead</code>函数处理下一个处理行的函数。lead函数实际上就是<code>lag</code>的逆向过程。<br>相关各项参数与<code>lag</code>函数的相同。区别就在于<code>lead</code>函数获取的是排序后结果集合的后<code>offset</code>数据行记录。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> mont,qualities, </span><br><span class="line">       <span class="keyword">lead</span>(qualities,<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> mont) <span class="keyword">as</span> <span class="string">"Next Month Qual"</span></span><br><span class="line"><span class="keyword">from</span> sales_qual</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> mont;</span><br><span class="line"></span><br><span class="line">MONT        QUALITIES Next Month Qual</span><br><span class="line"><span class="comment">---------- ----------- ---------------</span></span><br><span class="line">2011-01          1000           1020</span><br><span class="line"></span><br><span class="line">2011-02          1020           1030</span><br><span class="line"></span><br><span class="line">2011-03          1030           1035</span><br><span class="line"></span><br><span class="line">2011-04          1035</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Database</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>date</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle表</title>
    <url>/oracle-table/</url>
    <content><![CDATA[<h4 id="创建表时先判断是否已存在"><a href="#创建表时先判断是否已存在" class="headerlink" title="创建表时先判断是否已存在"></a>创建表时先判断是否已存在</h4><blockquote>
<p><a href="http://blog.csdn.net/cnham/article/details/5388016" rel="external nofollow noopener noreferrer" target="_blank">oracle（PL/SQL）表操作：创建表时检查数据库是否存在该表，若存在删除再创建 </a></p>
</blockquote>
<p>使用sql 2005 来执行“创建表之前判断表是否存在 如果有就删除表，再创建”的操作语句非常简单<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if exists (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sysobjects </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = OBJECT_ID(<span class="string">'STUDENTS]'</span>) <span class="keyword">and</span> OBJECTPROPERTY(<span class="keyword">id</span>, <span class="string">'IsUserTable'</span>) = <span class="number">1</span>) </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [STUDENTS]</span><br></pre></td></tr></table></figure></p>
<p>PL/SQL中<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> </span><br><span class="line">  cnt <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">--查询要创建的表是否存在</span></span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">count</span>(*)<span class="keyword">into</span> cnt <span class="keyword">from</span> user_tables <span class="keyword">where</span> table_name=<span class="string">'STUDENTS'</span>;</span><br><span class="line">  if cnt&gt;0 then</span><br><span class="line">    <span class="keyword">execute</span> <span class="keyword">immediate</span> <span class="string">'drop table STUDENTS'</span>;</span><br><span class="line">    dbms_output.put_line('表存在，删除成功!');</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">  <span class="comment">---删除之后再创建该表</span></span><br><span class="line">  <span class="keyword">execute</span> <span class="keyword">immediate</span> </span><br><span class="line">    <span class="string">'CREATE TABLE STUDENTS(SNAME CHAR (8) NOT NULL) tablespace Users'</span> ;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<hr>
<h4 id="Oracle临时表"><a href="#Oracle临时表" class="headerlink" title="Oracle临时表"></a>Oracle临时表</h4><blockquote>
<p><a href="http://blog.sina.com.cn/s/blog_4b3c1f950102dwbn.html" rel="external nofollow noopener noreferrer" target="_blank">oracle 关于临时表 创建 删除 拷贝</a><br><a href="http://blog.csdn.net/wyzxg/article/details/1882347" rel="external nofollow noopener noreferrer" target="_blank">oracle临时表的用法总结</a></p>
</blockquote>
<p>临时表分为 <strong>会话级临时表</strong> 和 <strong>事务级临时表</strong></p>
<ul>
<li>会话级的临时表因为这这个临时表中的数据和你的当前会话有关系，当你当前SESSION不退出的情况下，临时表中的数据就还存在，而当你退出当前SESSION的时候，临时表中的数据就全部没有了，当然这个时候你如果以另外一个SESSION登陆的时候是看不到另外一个SESSION中插入到临时表中的数据的。即两个不同的SESSION所插入的数据是互不相干的。当某一个SESSION退出之后临时表中的数据就被截断（truncate table，即数据清空）了。</li>
<li>事务级临时表是指该临时表与事务相关，当进行事务提交(<code>commit</code>)或者事务回滚(<code>rollback</code>)的时候，临时表中的数据将自行被截断，其他的内容和会话级的临时表的一致（包括退出SESSION的时候，事务级的临时表也会被自动截断）</li>
</ul>
<p>临时表创建后，除非 主动删除，是不会自动删除的（除非重启数据库）</p>
<p>建立方法:</p>
<ul>
<li><p><code>ON COMMIT PRESERVE ROWS</code> 定义了创建会话级临时表的方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Global</span> <span class="keyword">Temporary</span> <span class="keyword">Table</span> Table_Name</span><br><span class="line">(Col1 Type1,Col2 Type2...) <span class="keyword">On</span> <span class="keyword">Commit</span> <span class="keyword">Preserve</span> <span class="keyword">Rows</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ON COMMIT DELETE ROWS</code> 定义了建立事务级临时表的方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Global</span> <span class="keyword">Temporary</span> <span class="keyword">Table</span> Table_Name</span><br><span class="line">(Col1 Type1,Col2 Type2...) <span class="keyword">On</span> <span class="keyword">Commit</span> <span class="keyword">Delete</span> <span class="keyword">Rows</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>临时表的不足之处</p>
<ol>
<li>不支持lob对象</li>
<li>不支持主外键关系</li>
</ol>
<p>ORACLE临时表和SQLSERVER临时表异同</p>
<p>SQL SERVER临时表</p>
<p>SQL SERVER也可以创建临时表。临时表与永久表相似，但临时表存储在 tempdb 中，当不再使用时会自动删除。<br>有本地和全局两种类型的临时表，二者在名称、可见性和可用性上均不相同。本地临时表的名称以单个数字符号 (#) 打头；它们仅对当前的用户连接是可见的；当用户从 Microsoft SQL Server 2000 实例断开连接时被删除。全局临时表的名称以数学符号 (##) 打头，创建后对任何用户都是可见的，当所有引用该表的用户从 SQL Server 断开连接时被删除。<br>例如，如果创建名为 employees 的表，则任何人只要在数据库中有使用该表的安全权限就可以使用该表，除非它已删除。如果创建名为 #employees 的本地临时表，只有您能对该表执行操作且在断开连接时该表删除。如果创建名为 ##employees 的全局临时表，数据表中的任何用户均可对该表执行操作。如果该表在您创建后没有其他用户使用，则当您断开连接时该表删除。如果该表在您创建后有其他用户使用，则 SQL Server在所有用户断开连接后删除该表。</p>
<p>oracle临时表与sqlserver临时表的不同:</p>
<ol>
<li>SQL SERVER临时表是一种”内存表”,表是存储在内存中的.ORACLE临时表除非执行DROP TABLE,否则表定义会保留在数据字典中.</li>
<li>SQL SERVER临时表不存在类似ORACLE临时表 事务级别 上的功能.</li>
<li>SQL SERVER本地临时表(#) 与 ORACLE的会话级别临时表类似,但是在会话退出的时候,ORACLE不会删除表.</li>
<li>SQL SERVER的全局临时表(##) 是指多个连接共享同一片内存.当没有指针引用该内存区域时,SQL SERVER自动释放全局临时表.</li>
<li>由于ORACLE不是一种 内存中的数据库. 所以如果ORACLE类似SQL SERVER 频繁的对临时表进行建立和删除,必定会影响性能.所以ORACLE会保留临时表的定义直到用户DROP TABLE.</li>
<li>在ORACLE中,如果需要多个用户共享一个表(类似SQL SERVER的全局临时表##).则可以利用永久表,并且在表中添加一些可以唯一标识用户的列.利用触发器和视图.当用户退出的时候,根据该登陆用户的唯一信息删除相应的表中的数据. 这种方法给ORACLE带来了一定量的负载. </li>
</ol>
<hr>
<h4 id="创建表空间和分配权限"><a href="#创建表空间和分配权限" class="headerlink" title="创建表空间和分配权限"></a>创建表空间和分配权限</h4><blockquote>
<p><a href="http://hi.baidu.com/lwyfly/item/52766e1085a830affeded59a" rel="external nofollow noopener noreferrer" target="_blank">oracle-创建表空间和分配权限-011</a></p>
</blockquote>
<h5 id="1-表空间创建"><a href="#1-表空间创建" class="headerlink" title="1. 表空间创建"></a>1. 表空间创建</h5><h6 id="1-1-查看表空间（sys用户下）"><a href="#1-1-查看表空间（sys用户下）" class="headerlink" title="1.1 查看表空间（sys用户下）"></a>1.1 查看表空间（sys用户下）</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v$<span class="keyword">tablespace</span>;</span><br></pre></td></tr></table></figure>
<h6 id="1-2-创建表空间"><a href="#1-2-创建表空间" class="headerlink" title="1.2 创建表空间"></a>1.2 创建表空间</h6><p>ORACLE可以创建的表空间有三种类型:</p>
<ol>
<li>TEMPORARY: 临时表空间,用于临时数据的存放;</li>
<li>UNDO : 还原表空间. 用于存入重做日志文件.</li>
<li>用户表空间: 最重要,也是用于存放用户数据表空间<br><code>TEMPORARY</code> 和 <code>UNDO</code> 表空间是ORACLE 管理的特殊的表空间.只用于存放系统相关数据.<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//如果有重名的表空间会被覆盖。</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> mytablespace <span class="keyword">datafile</span> <span class="string">'e:\dbf\mytablespace.dbf'</span> <span class="keyword">size</span> <span class="number">5</span>m</span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span> <span class="keyword">next</span>  <span class="number">100</span>k <span class="keyword">maxsize</span> <span class="number">10</span>m</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>创建表空间mytablespace 存放在e:\dbf 创建文件mytablespace.dbf 自动扩展增量100k最大文件10m</p>
<h6 id="1-3-添加表空间的文件"><a href="#1-3-添加表空间的文件" class="headerlink" title="1.3 添加表空间的文件"></a>1.3 添加表空间的文件</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLESPACE</span> <span class="string">"MYTABLESPACE"</span> <span class="keyword">ADD</span> <span class="keyword">DATAFILE</span> <span class="string">'E:\DBF\myts02'</span> <span class="keyword">SIZE</span> <span class="number">10</span>M <span class="keyword">AUTOEXTEND</span> <span class="keyword">ON</span> <span class="keyword">NEXT</span> <span class="number">100</span>K <span class="keyword">MAXSIZE</span> <span class="number">15</span>M</span><br></pre></td></tr></table></figure>
<p>表空间mytablespace 增加添加文件myts02.dbf大小为10m 数据文件已满后自动扩展增量100kb，最大文件大小为15m</p>
<h5 id="2-创建用户并分配表空间"><a href="#2-创建用户并分配表空间" class="headerlink" title="2. 创建用户并分配表空间"></a>2. 创建用户并分配表空间</h5><p>查看用户<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_users;//所有用户</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> all_users;//所有用户</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_users;//仅自己的</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> fly <span class="keyword">identified</span> <span class="keyword">by</span> fly;//创建用户fly,密码fly</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> fly <span class="keyword">default</span> <span class="keyword">tablespace</span> mytablespace;//用户分配的表空间mytablespace</span><br></pre></td></tr></table></figure></p>
<h5 id="3-分配权限"><a href="#3-分配权限" class="headerlink" title="3. 分配权限"></a>3. 分配权限</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">resource</span> <span class="keyword">to</span> fly;//给用户资源权限</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> fly;//给用户连接权限</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span> <span class="keyword">to</span> fly;//在mytablespace上分配给fly用户使用</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">to</span> fly <span class="keyword">with</span> <span class="keyword">admin</span> <span class="keyword">option</span>; //给fly登录权限</span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> fly;// dba将系统权限分配给fly</span><br></pre></td></tr></table></figure>
<p>Oracle所有的系统权限</p>
<p>alter cluster 修改拥有簇的权限<br>alter database 修改数据库的权限<br>alter procedure 修改拥有的存储过程权限<br>alter profile 修改资源限制简表的权限<br>alter resource cost 设置佳话资源开销的权限<br>alter rollback segment 修改回滚段的权限<br>alter sequence 修改拥有的序列权限<br>alter session 修改数据库会话的权限<br>alter sytem 修改数据库服务器设置的权限<br>alter table 修改拥有的表权限<br>alter tablespace 修改表空间的权限<br>alter user 修改用户的权限<br>analyze 使用analyze命令分析数据库中任意的表、索引和簇<br>audit any 为任意的数据库对象设置审计选项<br>audit system 允许系统操作审计<br>backup any table 备份任意表的权限<br>become user 切换用户状态的权限<br>commit any table 提交表的权限<br>create cluster 为用户创建簇的权限<br>create database link 为用户创建的权限<br>create procedure 为用户创建存储过程的权限<br>create profile 创建资源限制简表的权限<br>create public database link 创建公共数据库链路的权限<br>create public synonym 创建公共同义名的权限<br>create role 创建角色的权限<br>create rollback segment 创建回滚段的权限<br>create session 创建会话的权限<br>create sequence 为用户创建序列的权限<br>create snapshot 为用户创建快照的权限<br>create synonym 为用户创建同义名的权限<br>create table 为用户创建表的权限<br>create tablespace 创建表空间的权限<br>create user 创建用户的权限<br>create view 为用户创建视图的权限<br>delete snapshot 删除快照中行的权限<br>delete table 为用户删除表行的权限<br>delete view 为用户删除视图行的权限<br>drop profile 删除资源限制简表的权限<br>drop public cluster 删除公共簇的权限<br>drop public database link 删除公共数据链路的权限<br>drop public synonym 删除公共同义名的限<br>drop rollback segment 删除回滚段的权限<br>drop tablespace 删除表空间的权限<br>drop user 删除用户的权限<br>execute any procedure 执行任意存储过程的权限<br>execute function 执行存储函数的权限<br>execute package 执行存储包的权限<br>execute procedure 执行用户存储过程的权限<br>force any transaction 管理未提交的任意事务的输出权限<br>force transaction 管理未提交的用户事务的输出权限<br>grant any privilege 授予任意系统特权的权限<br>grant any role 授予任意角色的权限<br>index table 给表加索引的权限<br>insert any table 向任意表中插入行的权限<br>insert snapshot 向快照中插入行的权限<br>insert table 向用户表中插入行的权限<br>insert view 向用户视图中插行的权限<br>lock any table 给任意表加锁的权限<br>manager tablespace 管理（备份可用性）表空间的权限<br>references table 参考表的权限<br>restricted session 创建有限制的数据库会话的权限<br>select any sequence 使用任意序列的权限<br>select any table 使用任意表的权限<br>select snapshot 使用快照的权限<br>select sequence 使用用户序列的权限<br>select table 使用用户表的权限<br>select view 使用视图的权限<br>unlimited tablespace 对表空间大小不加限制的权限<br>update any table 修改任意表中行的权限<br>update snapshot 修改快照中行的权限<br>update table 修改用户表中的行的权限<br>update view 修改视图中行的权限</p>
<hr>
<h3 id="Windows下启动停止Oracle11g服务"><a href="#Windows下启动停止Oracle11g服务" class="headerlink" title="Windows下启动停止Oracle11g服务"></a>Windows下启动停止Oracle11g服务</h3><blockquote>
<p><a href="http://hollenliu.blog.51cto.com/116553/280844" rel="external nofollow noopener noreferrer" target="_blank">Windows下启动停止Oracle11g服务</a></p>
</blockquote>
<p>启动Oracle 11g服务<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">@ ECHO 启动 Oracle 11g 服务</span><br><span class="line">net start <span class="string">"OracleDBConsoleorcl"</span></span><br><span class="line">net start <span class="string">"OracleOraDb11g_home1TNSListener"</span></span><br><span class="line">net start <span class="string">"OracleServiceORCL"</span></span><br><span class="line">@ ECHO 启动完毕 按任意键继续</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p>
<p>停止Oracle 11g服务<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">@ ECHO 停止 Oracle 11g 服务</span><br><span class="line">net stop <span class="string">"OracleDBConsoleorcl"</span></span><br><span class="line">net stop <span class="string">"OracleOraDb11g_home1TNSListener"</span></span><br><span class="line">net stop <span class="string">"OracleServiceORCL"</span></span><br><span class="line">@ ECHO 停止完毕 按任意键继续</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Database</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>tablespace</tag>
      </tags>
  </entry>
  <entry>
    <title>php基本知识整理</title>
    <url>/php-base/</url>
    <content><![CDATA[<h3 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h3><blockquote>
<p><a href="http://blog.csdn.net/zhulei632/article/details/8014921" rel="external nofollow noopener noreferrer" target="_blank">通过http post发送json数据</a><br><a href="http://www.jb51.net/article/51299.htm" rel="external nofollow noopener noreferrer" target="_blank">PHP扩展CURL的用法详解</a><br><a href="http://www.jb51.net/article/34745.htm" rel="external nofollow noopener noreferrer" target="_blank">PHP中使用cURL实现Get和Post请求的方法</a><br><a href="http://www.cnblogs.com/simpman/p/3549816.html" rel="external nofollow noopener noreferrer" target="_blank">php发送http请求</a><br><a href="http://www.jb51.net/article/60855.htm" rel="external nofollow noopener noreferrer" target="_blank">PHP curl CURLOPT_RETURNTRANSFER参数的作用使用实例</a><br><a href="http://www.cnblogs.com/txw1958/archive/2013/01/19/2867584.html" rel="external nofollow noopener noreferrer" target="_blank">PHP中CURL方法curl_setopt()函数的参数</a></p>
</blockquote>
<p><strong>PHP</strong>中发送<em>HTTP</em>请求可以使用<code>curl</code>或者<code>file_get_contents()</code>方法，<code>curl</code>使用前需要在<code>php.ini</code>中将<code>extension=php_curl.dll</code>前面的分号去掉</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$url = <span class="string">'http://localhost:5000/hello'</span>;</span><br><span class="line">$data = json_encode(<span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'tom'</span>));</span><br><span class="line"></span><br><span class="line">printf(<span class="string">"test1=&gt;"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendData1</span><span class="params">($url, $data)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//初始化curl</span></span><br><span class="line">	$ch = curl_init();</span><br><span class="line">    <span class="comment">//请求的url</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    <span class="comment">//结果是否直接输出，1为保存到变量不输出</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">	<span class="comment">//设置请求头</span></span><br><span class="line">	curl_setopt($ch, CURLOPT_HTTPHEADER, <span class="keyword">array</span>(</span><br><span class="line">		<span class="string">'Content-Type: application/json; charset=utf-8'</span>,</span><br><span class="line">		<span class="string">'Content-Length: '</span> . strlen($data)</span><br><span class="line">	));</span><br><span class="line">	<span class="comment">//设置请求方式为post</span></span><br><span class="line">	curl_setopt($ch, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//设置post的数据</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class="line">    <span class="comment">//运行curl，得到返回结果</span></span><br><span class="line">    $result = curl_exec($ch);</span><br><span class="line">    <span class="comment">//关闭curl连接</span></span><br><span class="line">    curl_close($ch);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//json_decode的第二个参数为true时，返回的对象为array而不是object,默认为false</span></span><br><span class="line">var_dump(json_decode(sendData1($url, $data), <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">print_r(<span class="string">"test2=&gt;"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendData2</span><span class="params">($url, $data)</span> </span>&#123;</span><br><span class="line">	$options = [</span><br><span class="line">		<span class="string">'http'</span>=&gt;[</span><br><span class="line">			<span class="string">'method'</span>=&gt;<span class="string">'POST'</span>,</span><br><span class="line">			<span class="comment">//设定类型为json类型</span></span><br><span class="line">			<span class="string">'header'</span>=&gt;<span class="string">'Content-Type: application/json'</span>,</span><br><span class="line">			<span class="string">'content'</span>=&gt;$data,</span><br><span class="line">			<span class="comment">//超时时间</span></span><br><span class="line">			<span class="string">'timeout'</span>=&gt;<span class="number">15</span>*<span class="number">60</span></span><br><span class="line">		]</span><br><span class="line">	];</span><br><span class="line">	$context = stream_context_create($options);</span><br><span class="line">	$result = file_get_contents($url, <span class="keyword">false</span>, $context);</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(json_decode(sendData2($url, $data)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过命令行运行命令<code>php filename.php</code>即可<br>响应的服务端为<strong>Python</strong>的<em>Flask</em>实现<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">from flask import Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">'/'</span>)</span><br><span class="line">def index():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">'/hello'</span>, methods=[<span class="string">'POST'</span>])</span><br><span class="line">def hello():</span><br><span class="line">    name = request.json[<span class="string">'name'</span>] <span class="keyword">if</span> request.json[<span class="string">'name'</span>] <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">'message'</span>: <span class="string">'Hello '</span>+name&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="去除Object中的部分属性"><a href="#去除Object中的部分属性" class="headerlink" title="去除Object中的部分属性"></a>去除Object中的部分属性</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/3600750/is-it-possible-to-delete-an-objects-property-in-php" rel="external nofollow noopener noreferrer" target="_blank">Is it possible to delete an object’s property in PHP?</a></p>
</blockquote>
<p>使用<code>unset()</code>方法即可去除指定<strong>Ojbect</strong>中的指定属性<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="keyword">new</span> stdClass();</span><br><span class="line"></span><br><span class="line">$a-&gt;new_property = <span class="string">'foo'</span>;</span><br><span class="line">var_export($a);  <span class="comment">// -&gt; stdClass::__set_state(array('new_property' =&gt; 'foo'))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unset</span>($a-&gt;new_property);</span><br><span class="line">var_export($a);  <span class="comment">// -&gt; stdClass::__set_state(array())</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote>
<p><a href="http://php.net/manual/zh/functions.anonymous.php" rel="external nofollow noopener noreferrer" target="_blank">匿名函数</a><br><a href="http://php.net/manual/zh/class.closure.php" rel="external nofollow noopener noreferrer" target="_blank">Closure 类</a><br><a href="http://www.cnblogs.com/yjf512/archive/2012/10/29/2744702.html" rel="external nofollow noopener noreferrer" target="_blank">PHP的闭包</a><br><a href="http://www.tuicool.com/articles/FFZbay" rel="external nofollow noopener noreferrer" target="_blank">PHP中的闭包详解</a><br><a href="http://wenda.golaravel.com/question/367" rel="external nofollow noopener noreferrer" target="_blank">条件组合查询问题</a><br><a href="http://wenda.golaravel.com/question/358" rel="external nofollow noopener noreferrer" target="_blank">Eloquent ORM关于拆分查询chunk</a></p>
</blockquote>
<p>闭包即为匿名函数。创建一个没有名称的函数，使用<code>use</code>关键字来连接闭包与外界的变量，使子函数可以使用父函数的局部变量<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$num = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">($num)</span> </span>&#123;</span><br><span class="line">    $result = <span class="number">1</span>;</span><br><span class="line">	$a = <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span> <span class="params">($num, &amp;$result)</span></span>&#123;</span><br><span class="line">		$result += $num;</span><br><span class="line">		<span class="keyword">print</span>(<span class="string">"result in a: "</span>.$result.<span class="string">"\n"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    $a();</span><br><span class="line">	<span class="keyword">print</span>($result);</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">//不加&amp;则不会影响父函数的局部变量</span></span><br><span class="line">    $b = <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span> <span class="params">($num, $result)</span> </span>&#123;</span><br><span class="line">		$result -= $num;</span><br><span class="line">		<span class="keyword">print</span>(<span class="string">"result in b: "</span>.$result.<span class="string">"\n"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    $b();</span><br><span class="line">	<span class="keyword">print</span>($result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test1($num);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>PHP配置相关知识点收集</title>
    <url>/php-composer/</url>
    <content><![CDATA[<h3 id="Windows下安装Composer"><a href="#Windows下安装Composer" class="headerlink" title="Windows下安装Composer"></a>Windows下安装Composer</h3><blockquote>
<p><a href="http://my.oschina.net/u/948242/blog/148269?fromerr=eO6GBWtU" rel="external nofollow noopener noreferrer" target="_blank">windows下安装php依赖关系管理工具composer</a><br><a href="http://www.tuicool.com/articles/M7F7jyE" rel="external nofollow noopener noreferrer" target="_blank">windows下安装composer方法</a><br><a href="http://my.oschina.net/yearnfar/blog/346727?fromerr=f5KmKY7s" rel="external nofollow noopener noreferrer" target="_blank">解决Win7下运行php Composer出现SSL报错的问题</a><br><a href="http://stackoverflow.com/questions/29475044/how-to-install-symfony-2-7" rel="external nofollow noopener noreferrer" target="_blank">How to install Symfony 2.7</a></p>
</blockquote>
<p><strong>Composer</strong>是<strong>PHP</strong>的一个依赖管理工具。<br>要安装Composer首先需要开启<code>php_openssl.dll</code>扩展；开启的方法则是在<code>php.ini</code>配置文件中将<code>extension = php_openssl.dll</code>这一行前面的分号去掉。<br>命令行cd到放置Composer文件夹下，使用下列命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">"readfile('https://getcomposer.org/installer');"</span> | php</span><br></pre></td></tr></table></figure></p>
<p>或者可以直接<a href="https://getcomposer.org/installer" rel="external nofollow noopener noreferrer" target="_blank">下载</a>Composer文件<br>这里已经完成了Composer的下载工作，可以使用命令<code>php composer.phar -V</code>来查看Composer的版本。当然这也稍显麻烦，因此可以在composer.phar文件同级目录下新建一名为<code>composer.bat</code>的文件，然后输入下列命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> @php <span class="string">"%~dp0composer.phar"</span> %*&gt;composer.bat</span><br></pre></td></tr></table></figure></p>
<p>保存之后即可使用<code>composer -V</code>来查看当前composer的版本了。<br>如果想要全局使用，可以将它添加到系统变量<em>PATH</em>中。<br>接下来就可以使用<code>composer create-project</code>命令来新建项目，如：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer create-project larave/laravel project_name</span><br><span class="line">composer create-project symfony/framework-standard-edition project_name</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：如果运行composer出现了SSL错误，有一种可能是没有安装CA证书导致的。首先需要<a href="http://curl.haxx.se/docs/caextract.html" rel="external nofollow noopener noreferrer" target="_blank">下载证书</a>,然后再修改<code>php.ini</code>文件即可<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">openssl.cafile</span>= X:/存放证书的路径/cacert.pem</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Windows下配置Nginx与PHP的开发环境"><a href="#Windows下配置Nginx与PHP的开发环境" class="headerlink" title="Windows下配置Nginx与PHP的开发环境"></a>Windows下配置Nginx与PHP的开发环境</h3><blockquote>
<p><a href="http://www.cnblogs.com/naniannayue/archive/2010/08/07/1794525.html" rel="external nofollow noopener noreferrer" target="_blank">转载:配置Windows下Nginx + PHP 开发环境</a><br><a href="http://www.cnblogs.com/wuzhenbo/p/3493518.html" rel="external nofollow noopener noreferrer" target="_blank">Windows下配置nginx+php(wnmp)</a><br><a href="http://blog.csdn.net/yuliyige/article/details/44471787" rel="external nofollow noopener noreferrer" target="_blank">windows安装nginx跑php 再加上Laravel</a></p>
</blockquote>
<h3 id="PHP部分配置"><a href="#PHP部分配置" class="headerlink" title="PHP部分配置"></a>PHP部分配置</h3><p>修改<code>php.ini-development</code>文件:</p>
<ul>
<li>将<code>extension_dir</code>前面的分号去掉，并将值改为php文件夹内ext文件夹的路径，如<code>extension_dir = &quot;C:/mine/php/ext&quot;</code></li>
<li>将<code>enable_dl</code>前面的分号去掉，并将值改为<code>On</code>，如<code>enable_dl = On</code></li>
<li>将<code>cgi.force_redirect</code>前面的分号去掉，并将值改为0，如<code>cgi.force_redirect = 0</code></li>
<li>将<code>fastcgi.impersonate</code>前面的分号去掉</li>
<li>将<code>cgi.rfc2616_headers</code>前面的分号去掉，并将值改为1，如<code>cgi.rfc2616_headers = 1</code></li>
<li>将<code>date.timezone</code>前面的分号去掉，并将值改成Asia/Shanghai,如<code>date.timezone = Asia/Shanghai</code></li>
<li>将<code>extension=php_mysql.dll</code>,<code>extension=php_mysqli.dll</code>,<code>extension=php_pdo_mysql.dll</code>前面的分号去掉，以支持MySQL数据库(可选)</li>
<li>将<code>extension=php_curl.dll</code>前面的分号去掉，以开启<code>curl</code>扩展(可选)</li>
<li>将<code>extension=php_openssl.dll</code>前面的分号去掉，以下载<code>composer</code>(可选)</li>
</ul>
<p>修改完毕后另存为<code>php.ini</code>文件至<strong>php</strong>根目录下。</p>
<hr>
<h3 id="Nginx部分配置"><a href="#Nginx部分配置" class="headerlink" title="Nginx部分配置"></a>Nginx部分配置</h3><p>修改<strong>nginx</strong>的配置文件<code>nginx.conf</code>,以支持PHP:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           C:/workspace/php/laraveltest2/public;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>添加一个新的路径:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   C:/workspace/php/laravelyh/public;</span><br><span class="line">    index  index.html index.htm index.php;</span><br><span class="line">	try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在命令行输入命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:/mine/php/php-cgi.exe -b 127.0.0.1:9000 -c C:/mine/php/php.ini</span><br></pre></td></tr></table></figure></p>
<p>然后再另开一个命令行窗口，定位到nginx目录下，启动nginx服务<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start nginx</span><br></pre></td></tr></table></figure></p>
<p>接着在浏览器输入<code>http://localhost</code>查看效果</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel部分知识点收集</title>
    <url>/php-laravel-config/</url>
    <content><![CDATA[<h3 id="Laravel开启内置服务"><a href="#Laravel开启内置服务" class="headerlink" title="Laravel开启内置服务"></a>Laravel开启内置服务</h3><blockquote>
<p><a href="http://laravel-recipes.com/recipes/282/running-phps-built-in-web-server" rel="external nofollow noopener noreferrer" target="_blank">Running PHP’s Built-in Web Server</a></p>
</blockquote>
<p><code>Laravel</code>内置了一个Web服务器，当需要调试或者查看效果时，可以直接使用命令开启服务:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan serve</span><br></pre></td></tr></table></figure></p>
<p>默认端口为8000，也可以指定端口:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan serve --port=8888</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Laravel更改时区"><a href="#Laravel更改时区" class="headerlink" title="Laravel更改时区"></a>Laravel更改时区</h3><blockquote>
<p><a href="https://www.neontsunami.com/posts/laravel-4-timezones" rel="external nofollow noopener noreferrer" target="_blank">Timezones in Laravel 4</a></p>
</blockquote>
<p>在<code>Laravel</code>项目的congfig文件夹下有个配置文件为<code>app.php</code>,找到配置项<code>timezone</code>，默认为<code>UTC</code>，改成<code>PRC</code>即为北京时间</p>
<hr>
<h3 id="Laravel中间件"><a href="#Laravel中间件" class="headerlink" title="Laravel中间件"></a>Laravel中间件</h3><blockquote>
<p><a href="http://www.golaravel.com/laravel/docs/5.1/middleware/" rel="external nofollow noopener noreferrer" target="_blank">HTTP 中间件</a><br><a href="http://blog.csdn.net/a437629292/article/details/46120453" rel="external nofollow noopener noreferrer" target="_blank">Laravel 权限控制整理–中间件</a></p>
</blockquote>
<h4 id="生成中间件"><a href="#生成中间件" class="headerlink" title="生成中间件"></a>生成中间件</h4><p>使用下列命令创建一个新的中间件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan make:middleware LoginMiddleware</span><br></pre></td></tr></table></figure></p>
<p>在项目文件夹下的<code>app/Http/Middleware</code>中可以看到新建的中间件，在这个中间件中，指定如果登陆了的用户才能通过验证，反之则跳转到登陆页面,如果进入了不该进入的页面，则跳转到主页面：</p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginMiddleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle an incoming request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure  $next</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $session = $request-&gt;session();</span><br><span class="line">		<span class="keyword">if</span>($session-&gt;has(<span class="string">'user'</span>))&#123;</span><br><span class="line">            <span class="comment">//判断是不是进入指定的页面</span></span><br><span class="line">            <span class="keyword">if</span>( $request-&gt;is(<span class="string">'user/*'</span>) )&#123;</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'user'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> $next($request);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> redirect(<span class="string">'login'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的中间件为<strong>前置</strong>中间件,因为其在<code>$next($request)</code>做了一系列的动作，如果想在执行请求后完成一些动作，可以生成<strong>后置</strong>中间件，大致的写法为:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $response = $next($request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform action</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="配置中间件"><a href="#配置中间件" class="headerlink" title="配置中间件"></a>配置中间件</h4><h5 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h5><p>如果希望自定义的中间件能够全局执行，则在<code>app/Http/Kernel.php</code>中将自定义的中间件完整路径加入到<code>$middleware</code>数组中</p>
<h5 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h5><p>如果只希望中间件对部分路由起作用，首先需要在<code>app/Http/Kernel.php</code>中的<code>$routeMiddleware</code>数组添加自定义的中间件:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line">    <span class="string">'auth'</span> =&gt; \App\Http\Middleware\Authenticate::class,</span><br><span class="line">    <span class="string">'auth.basic'</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">    <span class="string">'guest'</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line">    <span class="comment">//自定义中间件</span></span><br><span class="line">    <span class="string">'login'</span> =&gt; \App\Http\Middleware\LoginMiddleware::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<p>然后便可在<code>app/Http/routes.php</code>中对路由指定中间件:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$router-&gt;group([<span class="string">'prefix'</span>=&gt;<span class="string">'user'</span>,<span class="string">'namespace'</span>=&gt;<span class="string">'admin'</span>,<span class="string">'middleware'</span>=&gt;<span class="string">'login'</span>],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Route::get(<span class="string">'/'</span>,<span class="string">'UserController@index'</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p>
<p>也可以使用链式语句指定中间件:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$router-&gt;get(<span class="string">'/admin'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;middleware(<span class="string">'login'</span>);</span><br></pre></td></tr></table></figure></p>
<p>也可以在控制器中指定中间件:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//控制器实例化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		<span class="comment">//指定控制器中间件</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>);</span><br><span class="line">		<span class="comment">//对部分方法指定中间件</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware(<span class="string">'log'</span>, [<span class="string">'only'</span> =&gt; [<span class="string">'foo'</span>, <span class="string">'bar'</span>]]);</span><br><span class="line">		<span class="comment">//对部分方法排除中间件</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware(<span class="string">'subscribed'</span>, [<span class="string">'except'</span> =&gt; [<span class="string">'foo'</span>, <span class="string">'bar'</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Laravel-ORM"><a href="#Laravel-ORM" class="headerlink" title="Laravel ORM"></a>Laravel ORM</h3><h4 id="获取id"><a href="#获取id" class="headerlink" title="获取id"></a>获取id</h4><blockquote>
<p><a href="http://stackoverflow.com/questions/23009678/data-van-from-database-errorexception-undefined-property" rel="external nofollow noopener noreferrer" target="_blank">Data van from database = ErrorException Undefined property</a></p>
</blockquote>
<p>默认的<code>get()</code>方法返回的是一个记录的集合，如果需要得到一条记录的id，可以使用如下方法：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;select(<span class="string">'id'</span>)-&gt;where(<span class="string">'property'</span>, <span class="string">'='</span>, property)-&gt;first()-&gt;id;</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;select(<span class="string">'id'</span>)-&gt;where(<span class="string">'property'</span>, <span class="string">'='</span>, property)-&gt;firstOrFail();</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="级联删除"><a href="#级联删除" class="headerlink" title="级联删除"></a>级联删除</h4><blockquote>
<p><a href="http://stackoverflow.com/questions/14174070/automatically-deleting-related-rows-in-laravel-eloquent-orm" rel="external nofollow noopener noreferrer" target="_blank">Automatically deleting related rows in Laravel (Eloquent ORM)</a></p>
</blockquote>
<p>在一对多的两个类的关系中，当一的一方被删除了之后，多的一方应该全部被删除<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Eloquent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">photos</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;has_many(<span class="string">'Photo'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this is a recommended way to declare event handlers</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::boot();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span>::deleting(<span class="function"><span class="keyword">function</span><span class="params">($user)</span> </span>&#123; <span class="comment">// before delete() method call this</span></span><br><span class="line">             $user-&gt;photos()-&gt;delete();</span><br><span class="line">             <span class="comment">// do the rest of the cleanup...</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask页面相关知识</title>
    <url>/python-flask-page/</url>
    <content><![CDATA[<h3 id="更改jinja2模板的默认修饰符"><a href="#更改jinja2模板的默认修饰符" class="headerlink" title="更改jinja2模板的默认修饰符"></a>更改jinja2模板的默认修饰符</h3><blockquote>
<p><a href="https://gist.github.com/lost-theory/3925738#file-gistfile1-py-L18" rel="external nofollow noopener noreferrer" target="_blank">different delimiters in jinja2 + flask</a></p>
</blockquote>
<p>在<strong>Flask</strong>中的<em>jinja2</em>模板中输出值的修饰符号与<code>AngularJs</code>中的修饰符一样，为了解决冲突，可以自定义默认模板的修饰符:<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomFlask</span><span class="params">(Flask)</span>:</span></span><br><span class="line">    jinja_options = Flask.jinja_options.copy()</span><br><span class="line">    jinja_options.update(dict(</span><br><span class="line">        block_start_string=<span class="string">'&lt;%'</span>,</span><br><span class="line">        block_end_string=<span class="string">'%&gt;'</span>,</span><br><span class="line">        variable_start_string=<span class="string">'%%'</span>, <span class="comment">#替换&#123;&#123;</span></span><br><span class="line">        variable_end_string=<span class="string">'%%'</span>,   <span class="comment">#替换&#125;&#125;</span></span><br><span class="line">        comment_start_string=<span class="string">'&lt;#'</span>,</span><br><span class="line">        comment_end_string=<span class="string">'#&gt;'</span>,</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">//默认写法app = Flask(__name__)这里使用了上面自定义的类</span><br><span class="line">app = CustomFlask(__name__)</span><br></pre></td></tr></table></figure></p>
<p>这样输出值的修饰符就变成了<code>%%</code>,避开了与<code>AngularJS</code>的输出修饰符冲突。</p>
<hr>
<h3 id="输出静态文件"><a href="#输出静态文件" class="headerlink" title="输出静态文件"></a>输出静态文件</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/15883874/python-flask-serving-static-files" rel="external nofollow noopener noreferrer" target="_blank">python flask - serving static files</a></p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for, redirect</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'static'</span>, filename=<span class="string">'index.html'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 相关配置</title>
    <url>/redis-setting/</url>
    <content><![CDATA[<blockquote>
<p><a href="http://www.cnblogs.com/lxx/archive/2013/06/04/3116985.html" rel="external nofollow noopener noreferrer" target="_blank">redis windows下的环境搭建</a><br><a href="http://blog.csdn.net/renfufei/article/details/41180007" rel="external nofollow noopener noreferrer" target="_blank">可靠的Windows版Redis</a><br><a href="https://github.com/MSOpenTech/redis/releases" rel="external nofollow noopener noreferrer" target="_blank">Windows版下载地址</a></p>
</blockquote>
<p>将下载的压缩包解压到任意目录下，通过命令行工具进入到相关目录下，直接输入命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure></p>
<p>即可启动redis服务器，其中后面的<code>redis.windows.conf</code>为配置文件，可选输入<br>然后令开一个命令行进入相关目录下，输入命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure></p>
<p>指定主机名以及端口即可进入redis客户端<br><code>redis.windows.conf</code>配置文件的主要配置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 包含其他的配置文件，可以使用相对路径及绝对路径</span><br><span class="line">include .\path\to\local.conf</span><br><span class="line"></span><br><span class="line"># 端口号，默认6379</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># 绑定主机地址</span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 当客户端闲置多长时间后关闭连接，默认为0，即禁用此功能</span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"># 指定日志记录级别，四个级别：debug、verbose、notice、warning</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"># 指定日志输出文件,stdout为输出到控制台</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 设置数据库的数量</span><br><span class="line">database 16</span><br><span class="line"></span><br><span class="line"># 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line"># 900秒（15分钟）内有1个更改</span><br><span class="line">save 900 1</span><br><span class="line"># 300秒（5分钟）内有10个更改</span><br><span class="line">save 300 10</span><br><span class="line"># 60秒内有10000个更改</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"># 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，</span><br><span class="line"># 如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># 指定本地数据库文件名，默认值为dump.rdb</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># 指定本地数据库存放目录</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"># 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span><br><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line"># 当master服务设置了密码保护时，slav服务连接master的密码</span><br><span class="line">masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line"># 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</span><br><span class="line">requirepass foobared</span><br><span class="line"></span><br><span class="line"># 设置同一时间最大客户端连接数，默认无限制，</span><br><span class="line"># Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。</span><br><span class="line"># 当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</span><br><span class="line">maxclients 10000</span><br><span class="line"></span><br><span class="line"># 指定最大heap字节数</span><br><span class="line">maxheap &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"># 指定Redis最大内存限制，</span><br><span class="line"># Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，</span><br><span class="line"># 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作</span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"># 指定是否在每次更新操作后进行日志记录，</span><br><span class="line"># Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</span><br><span class="line"># 因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># 指定更新日志条件，共有3个可选值：</span><br><span class="line"># no：表示等操作系统进行数据缓存同步到磁盘（快）</span><br><span class="line"># always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span><br><span class="line"># everysec：表示每秒同步一次（折衷，默认值）</span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"># 指定Redis内存映射文件(memory mapped file)存放的路径 默认在系统盘，会占用很大的空间，关闭redis后自动删除</span><br><span class="line">heapdir &lt;directory path(absolute or relative)&gt;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="redis-常用命令"><a href="#redis-常用命令" class="headerlink" title="redis 常用命令"></a>redis 常用命令</h3><blockquote>
<p><a href="http://blog.csdn.net/ithomer/article/details/9213185" rel="external nofollow noopener noreferrer" target="_blank">Redis常用命令</a></p>
</blockquote>
<p>进入redis目录在命令行输入<code>redis-cli</code>即可启动redis客户端，前提是已经打开了<code>redis-server</code>服务器，<code>--help</code>参数可以查看<code>redis-cli</code>支持的参数</p>
<ul>
<li><p>连接操作命令<br><code>quit</code>：关闭连接（connection）<br><code>auth</code>：简单密码认证<br><code>help cmd</code>： 查看cmd帮助，例如：help get</p>
</li>
<li><p>持久化<br><code>save</code>：将数据同步保存到磁盘<br><code>bgsave</code>：将数据异步保存到磁盘<br><code>lastsave</code>：返回上次成功将数据保存到磁盘的Unix时戳<br><code>shundown</code>：将数据同步保存到磁盘，然后关闭服务</p>
</li>
<li><p>远程服务控制<br><code>info</code>：提供服务器的信息和统计<br><code>monitor</code>：实时转储收到的请求<br><code>slaveof</code>：改变复制策略设置<br><code>config</code>：在运行时配置Redis服务器</p>
</li>
<li><p>清空数据库<br><code>flushdb</code>: 清除当前数据库的所有keys<br><code>flushall</code>: 清除所有数据库的所有keys</p>
</li>
<li><p>对value操作的命令<br><code>exists key</code>：确认一个key是否存在<br><code>del key</code>：删除一个key<br><code>type key</code>：返回值的类型<br><code>keys pattern</code>：返回满足给定pattern的所有key,*为所有key<br><code>randomkey</code>：随机返回key空间的一个<br><code>keyrename oldname newname</code>：重命名key<br><code>dbsize</code>：返回当前数据库中key的数目<br><code>expire</code>：设定一个key的活动时间（s）<br><code>ttl</code>：获得一个key的活动时间<br><code>select index</code>：按索引查询<br><code>move key dbindex</code>：移动当前数据库中的key到dbindex数据库<br><code>flushdb</code>：删除当前选择数据库中的所有key<br><code>flushall</code>：删除所有数据库中的所有key</p>
</li>
<li><p>对String操作的命令<br><code>set key value</code>：给数据库中名称为key的string赋予值value<br><code>get key</code>：返回数据库中名称为key的string的value<br><code>getset key value</code>：给名称为key的string赋予上一次的value<br><code>mget key1 key2 … key N</code>：返回库中多个string的value<br><code>setnx key value</code>：添加string，名称为key，值为value<br><code>setex key time value</code>：向库中添加string，设定过期时间time<br><code>mset key N value N</code>：批量设置多个string的值<br><code>msetnx key N value N</code>：如果所有名称为key i的string都不存在<br><code>incr key</code>：名称为key的string增1操作<br><code>incrby key integer</code>：名称为key的string增加integer<br><code>decr key</code>：名称为key的string减1操作<br><code>decrby key integer</code>：名称为key的string减少integer<br><code>append key value</code>：名称为key的string的值附加value<br><code>substr key start end</code>：返回名称为key的string的value的子串</p>
</li>
<li><p>对List操作的命令<br><code>rpush key value</code>：在名称为key的list尾添加一个值为value的元素<br><code>lpush key value</code>：在名称为key的list头添加一个值为value的 元素<br><code>llen key</code>：返回名称为key的list的长度<br><code>lrange key start end</code>：返回名称为key的list中start至end之间的元素<br><code>ltrim key start end</code>：截取名称为key的list<br><code>lindex key index</code>：返回名称为key的list中index位置的元素<br><code>lset key index value</code>：给名称为key的list中index位置的元素赋值<br><code>lrem key count value</code>：删除count个key的list中值为value的元素<br><code>lpop key</code>：返回并删除名称为key的list中的首元素<br><code>rpop key</code>：返回并删除名称为key的list中的尾元素<br><code>blpop key1 key2 … key N timeout</code>：lpop命令的block版本。<strong>?</strong><br><code>brpop key1 key2 … key N timeout</code>：rpop的block版本。<strong>?</strong><br><code>rpoplpush srckey dstkey</code>：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</p>
</li>
<li><p>对Set操作的命令<br><code>sadd key member</code>：向名称为key的set中添加元素member<br><code>srem key member</code>：删除名称为key的set中的元素member<br><code>spop key</code>：随机返回并删除名称为key的set中一个元素<br><code>smove srckey dstkey member</code>：移到集合元素<br><code>scard key</code>：返回名称为key的set的基数<br><code>sismember key member</code>：member是否是名称为key的set的元素<br><code>sinter key1 key2 … key N</code>：求交集<br><code>sinterstore dstkey, [keys]</code> ：求交集并将交集保存到dstkey的集合<br><code>sunion key1, [keys]</code> ：求并集<br><code>sunionstore dstkey, [keys]</code> ：求并集并将并集保存到dstkey的集合<br><code>sdiff key1, [keys]</code>：求差集<br><code>sdiffstore dstkey, [keys]</code>：求差集并将差集保存到dstkey的集合<br><code>smembers key</code>：返回名称为key的set的所有元素<br><code>srandmember key</code>：随机返回名称为key的set的一个元素</p>
</li>
<li><p>对Hash操作的命令<br><code>hset key field value</code>：向名称为key的hash中添加元素field<br><code>hget key field</code>：返回名称为key的hash中field对应的value<br><code>hmget key [fields]</code>：返回名称为key的hash中field i对应的value<br><code>hmset key [fields]</code>：向名称为key的hash中添加元素field<br><code>hincrby key field integer</code>：将名称为key的hash中field的value增加integer<br><code>hexists key field</code>：名称为key的hash中是否存在键为field的域<br><code>hdel key field</code>：删除名称为key的hash中键为field的域<br><code>hlen key</code>：返回名称为key的hash中元素个数<br><code>hkeys key</code>：返回名称为key的hash中所有键<br><code>hvals key</code>：返回名称为key的hash中所有键对应的value<br><code>hgetall key</code>：返回名称为key的hash中所有的键（field）及其对应的value</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>nosql</tag>
      </tags>
  </entry>
  <entry>
    <title>spring注解相关知识点</title>
    <url>/spring-annotation/</url>
    <content><![CDATA[<h3 id="spring-基本注解"><a href="#spring-基本注解" class="headerlink" title="spring 基本注解"></a>spring 基本注解</h3><blockquote>
<p><a href="http://blog.csdn.net/zsm653983/article/details/8133113" rel="external nofollow noopener noreferrer" target="_blank">Spring Annotation 详解</a><br><a href="http://zhongzhihua.iteye.com/blog/613305" rel="external nofollow noopener noreferrer" target="_blank">autowire异常的三个情况</a><br><a href="http://yangchengwanhong.blog.sohu.com/234465733.html" rel="external nofollow noopener noreferrer" target="_blank">Spring注释@Qualifier</a></p>
</blockquote>
<p><code>@Component</code>: 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。<br><code>@Service</code>: 常作用在业务层<br><code>@Constroller</code>: 通常作用在控制层<br><code>@Repository</code>: 只能标注在 DAO 类上<br><code>@Scope</code>: 指定 Bean 的作用域<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)     </span><br><span class="line"><span class="meta">@Repository</span>     </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; … &#125;</span><br></pre></td></tr></table></figure></p>
<p><code>@PostConstruct</code>: 标注初始化之后执行的回调方法<br><code>@PreDestroy</code>: 标注销毁之前执行的回调方法<br><code>@Required</code>:  进行对Bean的依赖检查，判断给定Bean的相应<code>Setter</code>方法是否都在实例化的时候被调用了标签提供了 dependency-check 属性用于进行依赖检查。该属性的取值包括以下几种：</p>
<ul>
<li><code>none</code>: 默认不执行依赖检查</li>
<li><code>simple</code>: 对原始基本类型和集合类型进行检查。</li>
<li><code>objects</code>: 对复杂类型进行检查(除了 simple 所检查类型之外的其他类型)。</li>
<li><code>all</code>: 对所有类型进行检查。</li>
</ul>
<hr>
<h4 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h4><p><code>@Autowired</code>: 自动装配.Spring 在装配 Bean 的时候，根据指定的自动装配规则，将某个 Bean 所需要引用类型的 Bean 注入进来。 元素提供了一个指定自动装配类型的 autowire 属性，该属性有如下选项：</p>
<ul>
<li><code>no</code>: 显式指定不使用自动装配。</li>
<li><code>byName</code>: 如果存在一个和当前属性名字一致的Bean，则使用该Bean 进行注入。如果名称匹配但是类型不匹配，则抛出异常。如果没有匹配的类型，则什么也不做。</li>
<li><code>byType</code>: 如果存在一个和当前属性类型一致的 Bean ( 相同类型或者子类型 )，则使用该 Bean 进行注入。byType 能够识别工厂方法，即能够识别 <code>factory-method</code> 的返回类型。如果存在多个类型一致的 Bean，则抛出异常。如果没有匹配的类型，则什么也不做。</li>
<li><code>constructor</code>: 与 byType 类似，只不过它是针对构造函数注入而言的。如果当前没有与构造函数的参数类型匹配的 Bean，则抛出异常。使用该种装配模式时，优先匹配参数最多的构造函数。</li>
<li><code>autodetect</code>: 根据Bean的自省机制决定采用<code>byType</code>还是<code>constructor</code>进行自动装配。如果 Bean 提供了默认的构造函数，则采用<code>byType</code>;否则采用<code>constructor</code>进行自动装配。</li>
</ul>
<p>在按类型匹配的时候(可能是<code>byType</code>、<code>constructor</code>、<code>autodetect</code>)，同一个类型可能存在多个Bean如果被注入的属性是数组、集合或者Map，这可能没有问题，但是如果只是简单的引用类型，则会抛出异常。解决方法有如下几种：</p>
<ul>
<li>取消该 Bean 的自动装配特性，使用显式的注入。我们可能不希望某个 Bean 被当作其他 Bean 执行自动封装时的候选对象，我们可以给该 增加 <code>autowire-candidate=&quot;false&quot;</code>。(<code>autowire-candidate</code>属性和<code>autowire</code>属性相互独立，互不相干) 另外，我们可以设置<code>default-autowire-candidates</code>属性，可以在该属性中指定可以用于自动装配候选 Bean 的匹配模式，比如 <code>default-autowire-candidates=&quot;*serv,*dao&quot;</code>，这表示所有名字以serv或者dao结尾的 Bean 被列为候选，其他则忽略，相当于其他 Bean 都指定为 <code>autowire-candidate=&quot;false&quot;</code>，此时可以显式为 指定 <code>autowire-candidate=&quot;true&quot;</code>。在 上指定的设置要覆盖 上指定的设置。</li>
<li>如果在多个类型相同的 Bean 中有首选的 Bean，那么可以将该 的<code>primary</code>属性设置为 “true” ，这样自动装配时便优先使用该 Bean 进行装配。此时不能将<code>autowire-candidate</code> 设为 false</li>
</ul>
<p><strong>使用<code>@Autowired</code>注解进行装配，只能是根据类型进行匹配</strong>。@Autowired 注解可以用于 Setter 方法、构造函数、字段，甚至普通方法，前提是方法必须有至少一个参数。@Autowired 可以用于数组和使用泛型的集合类型。然后 Spring 会将容器中所有类型符合的 Bean 注入进来。@Autowired 标注作用于 Map 类型时，如果 Map 的 key 为 String 类型，则 Spring 会将容器中所有类型符合 Map 的 value 对应的类型的 Bean 增加进来，用 Bean 的 id 或 name 作为 Map 的 key。</p>
<p>当标注了<code>@Autowired</code>后，自动注入不能满足，则会抛出异常。我们可以给<code>@Autowired</code>标注增加一个<code>required=false</code>属性，以改变这个行为。另外，每一个类中只能有一个构造函数的<a href="mailto:`@Autowired.required" rel="external nofollow noopener noreferrer" target="_blank">`@Autowired.required</a>()<code>属性为</code>true<code>。否则就出问题了。如果用</code>@Autowired`同时标注了多个构造函数，那么，Spring 将采用贪心算法匹配构造函数 ( 构造函数最长 )。</p>
<p><code>@Qualifier</code>: 当容器中存在多个Bean的类型与需要注入的相同时，注入将不能执行，我们可以给<code>@Autowired</code>增加一个候选值，做法是在<code>@Autowired</code>后面增加一个<code>@Qualifier</code>标注，提供一个String类型的值作为候选的Bean的名字。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"ppp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(person p)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以作用于方法的参数 ( 对于方法只有一个参数的情况，我们可以将 @Qualifer 标注放置在方法声明上面，但是推荐放置在参数前面 )<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)     </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(@Qualifier(<span class="string">"ppp"</span>)</span>Person p,String name)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>如果没有明确指定Bean的qualifier名字，那么默认名字就是 Bean 的名字</strong><br>如果<code>@Autowired</code>注入的是<strong>BeanFactory</strong>、<strong>ApplicationContext</strong>、<strong>ResourceLoader</strong> 等系统类型，那么则不需要<code>@Qualifier</code>，此时即使提供了<code>@Qualifier</code>注解，也将会被忽略;而对于自定义类型的自动装配，如果使用了<code>@Qualifier</code>注解并且没有名字与之匹配的 Bean，则自动装配匹配失败。</p>
<hr>
<p><code>@Resource</code>: <strong>如果希望根据name执行自动装配，那么应该使用JSR-250提供的<code>@Resource</code>注解，而不应该使用<code>@Autowired</code>与<code>@Qualifier</code>的组合。</strong><code>@Resource</code>使用<code>byName</code>的方式执行自动封装。<code>@Resource</code>标注可以作用于带一个参数的Setter方法、字段，以及带一个参数的普通方法上。<code>@Resource</code>注解有一个name属性，用于指定 Bean 在配置文件中对应的名字。如果没有指定 name 属性，那么默认值就是字段或者属性的名字。<em>@Resource 和 @Qualifier 的配合虽然仍然成立，但是 @Qualifier 对于 @Resource 而言，几乎与 name 属性等效</em>。</p>
<p>如果 <code>@Resource</code> 没有指定 name 属性，那么使用<code>byName</code>匹配失败后，会退而使用<code>byType</code>继续匹配，如果再失败，则抛出异常。在没有为<code>@Resource</code>注解显式指定<code>name</code>属性的前提下，如果将其标注在<strong>BeanFactory 类型</strong>、<strong>ApplicationContext类型</strong>、<strong>ResourceLoader类型</strong>、<strong>ApplicationEventPublisher类型</strong>、<strong>MessageSource类型</strong>上，那么 Spring 会自动注入这些实现类的实例，不需要额外的操作。此时 name 属性不需要指定 ( 或者指定为””)，否则注入失败;如果使用了 <code>@Qualifier</code>，则该注解将被忽略。而对于用户自定义类型的注入，<code>@Qualifier</code> 和 name 等价，并且不被忽略</p>
<hr>
<h4 id="JAVA配置Bean声明"><a href="#JAVA配置Bean声明" class="headerlink" title="JAVA配置Bean声明"></a>JAVA配置Bean声明</h4><p><code>@Configuration</code>:  用于指定配置信息的类上加上<code>@Configuration</code>注解，以明确指出该类是 Bean 配置的信息源。Spring 对标注 Configuration 的类有如下要求</p>
<ul>
<li>配置类不能是 final 的</li>
<li>配置类不能是本地化的，亦即不能将配置类定义在其他类的方法内部</li>
<li>配置类必须有一个无参构造函数</li>
</ul>
<p><code>@Bean</code>: <code>AnnotationConfigApplicationContext</code>将配置类中标注了<code>@Bean</code>的方法的返回值识别为<strong>Spring Bean</strong>，并注册到容器中，受IoC容器管理。<code>@Bean</code>的作用等价于XML 配置中的标签。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>     </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookStoreDaoConfig</span></span>&#123;     </span><br><span class="line">    <span class="meta">@Bean</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">userDao</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();&#125;     </span><br><span class="line">    <span class="meta">@Bean</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookDao <span class="title">bookDao</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> BookDaoImpl();&#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>与以上配置等价的 XML 配置如下<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"bookstore.dao.UserDaoImpl"</span>/&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">class</span>=<span class="string">"bookstore.dao.BookDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>@Bean</code>具有以下四个属性：</p>
<ul>
<li><code>name</code>: 指定一个或者多个 Bean 的名字。这等价于 XML 配置中 的 name 属性。</li>
<li><code>initMethod</code>: 容器在初始化完Bean之后，会调用该属性指定的方法。这等价于XML配置中的<code>init-method</code>属性。</li>
<li><code>destroyMethod</code>: 该属性与<code>initMethod</code>功能相似，在容器销毁 Bean 之前，会调用该属性指定的方法。这等价于XML配置中的<code>destroy-method</code>属性。</li>
<li><code>autowire</code>: 指定 Bean 属性的自动装配策略，取值是<code>Autowire</code>类型的三个静态属性。<code>Autowire.BY_NAME，Autowire.BY_TYPE，Autowire.NO</code>。与 XML 配置中的<code>autowire</code>属性的取值相比，这里少了<code>constructor</code>，这是因为<code>constructor</code>在这里已经没有意义了。</li>
</ul>
<p><code>AnnotationConfigApplicationContext</code>提供了三个构造函数用于初始化容器。</p>
<ul>
<li><code>AnnotationConfigApplicationContext()</code>：该构造函数初始化一个空容器，容器不包含任何 Bean 信息，需要在稍后通过调用其<code>register()</code>方法注册配置类，并调用<code>refresh()</code>方法刷新容器。</li>
<li><code>AnnotationConfigApplicationContext(Class... annotatedClasses)</code>：这是最常用的构造函数，通过将涉及到的配置类传递给该构造函数，以实现将相应配置类中的 Bean 自动注册到容器中。</li>
<li><code>AnnotationConfigApplicationContext(String... basePackages)</code>：该构造函数会自动扫描以给定的包及其子包下的所有类，并自动识别所有的 Spring Bean，将其注册到容器中。它不但识别标注<code>@Configuration</code>的配置类并正确解析，而且同样能识别使用<code>@Repository</code>、<code>@Service</code>、<code>@Controller</code>、<code>@Component</code>标注的类。</li>
</ul>
<p>除了使用上面第三种类型的构造函数让容器自动扫描 Bean 的配置信息以外，<code>AnnotationConfigApplicationContext</code> 还提供了<code>scan()</code>方法，其功能与上面也类似，该方法主要用在容器初始化之后动态增加 Bean 至容器中。调用了该方法以后，通常需要立即手动调用<code>refresh()</code>刷新容器，以让变更立即生效。</p>
<p><code>@Import</code>:引入其他<code>@Configuration</code>类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   </span><br><span class="line"><span class="meta">@Import</span>(&#123;BookStoreServiceConfig<span class="class">.<span class="keyword">class</span>,<span class="title">BookStoreDaoConfig</span>.<span class="title">class</span>&#125;)   </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">BookStoreConfig</span></span>&#123; … &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>混合使用 XML 与注解进行 Bean 的配置</strong><br>以XML为主的配置<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span></span>&#123;   </span><br><span class="line"><span class="meta">@Bean</span>   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">userDao</span><span class="params">()</span></span>&#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在XML配置bean<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> … &gt;</span>   </span><br><span class="line">    ……   </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">”demo.config.MyConfig”/</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>由于启用了针对注解的 Bean 后处理器，因此在 ApplicationContext 解析到 MyConfig 类时，会发现该类标注了<code>@Configuration</code>注解，随后便会处理该类中标注<code>@Bean</code>的方法，将这些方法的返回值注册为容器总的 Bean。</p>
<p>对于以上的方式，如果存在多个标注了<code>@Configuration</code>的类，则需要在 XML 文件中逐一列出。另一种方式是使用前面提到的自动扫描功能，配置如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">”bookstore.config”</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果在<code>Configuration</code>中可以使用<code>@ComponentScan</code>进行扫描<br>对于以注解为中心的配置方式，只需使用<code>@ImportResource</code>注解引入存在的 XML 即可<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   </span><br><span class="line"><span class="meta">@ImportResource</span>(“classpath:/bookstore/config/spring-beans.xml”)   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span></span>&#123;   </span><br><span class="line">……   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>容器的初始化过程和纯粹的以配置为中心的方式一致<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationConfigApplicationContext ctx =   </span><br><span class="line">              <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Spring-使用注解方式进行事物管理"><a href="#Spring-使用注解方式进行事物管理" class="headerlink" title="Spring 使用注解方式进行事物管理"></a>Spring 使用注解方式进行事物管理</h3><blockquote>
<p><a href="http://blog.csdn.net/zhaofsh/article/details/6285869" rel="external nofollow noopener noreferrer" target="_blank">Spring 使用注解方式进行事物管理</a></p>
</blockquote>
<p><code>@Transactional</code>: 当标于类前时, 标示类中所有方法都进行事物处理</p>
<p>事物传播行为介绍:<br><code>@Transactional(propagation=Propagation.REQUIRED)</code><br>如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)<br><code>@Transactional(propagation=Propagation.NOT_SUPPORTED)</code><br>容器不为这个方法开启事务<br><code>@Transactional(propagation=Propagation.REQUIRES_NEW)</code><br>不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务<br><code>@Transactional(propagation=Propagation.MANDATORY)</code><br>必须在一个已有的事务中执行,否则抛出异常<br><code>@Transactional(propagation=Propagation.NEVER)</code><br>必须在一个没有的事务中执行,否则抛出异常(与<code>Propagation.MANDATORY</code>相反)<br><code>@Transactional(propagation=Propagation.SUPPORTS)</code><br>如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务.</p>
<p>事物超时设置:<br><code>@Transactional(timeout=30)</code>//默认是30秒</p>
<p>事务隔离级别:<br><code>@Transactional(isolation = Isolation.READ_UNCOMMITTED)</code><br>读取未提交数据(会出现脏读, 不可重复读) 基本不使用<br><code>@Transactional(isolation = Isolation.READ_COMMITTED)</code><br>读取已提交数据(会出现不可重复读和幻读)<br><code>@Transactional(isolation = Isolation.REPEATABLE_READ)</code><br>可重复读(会出现幻读)<br><code>@Transactional(isolation = Isolation.SERIALIZABLE)</code><br>串行化</p>
<p>MYSQL: 默认为REPEATABLE_READ级别<br>SQLSERVER: 默认为READ_COMMITTED</p>
<p>脏读 : 一个事务读取到另一事务未提交的更新数据<br>不可重复读 : 在同一事务中, 多次读取同一数据返回的结果有所不同, 换句话说,<br>后续读取可以读到另一事务已提交的更新数据. 相反, “可重复读”在同一事务中多次<br>读取数据时, 能够保证所读数据一样, 也就是后续读取不能读到另一事务已提交的更新数据<br>幻读 : 一个事务读到另一个事务已提交的insert数据</p>
<hr>
<h3 id="Spring-MVC部分注解"><a href="#Spring-MVC部分注解" class="headerlink" title="Spring MVC部分注解"></a>Spring MVC部分注解</h3><blockquote>
<p><a href="http://wiselyman.iteye.com/blog/2002446" rel="external nofollow noopener noreferrer" target="_blank">Spring4.0系列3-@RestController</a><br><a href="http://my.oschina.net/rouchongzi/blog/161871" rel="external nofollow noopener noreferrer" target="_blank">Spring @SessionAttributes @ModelAttribute</a><br><a href="http://blog.sina.com.cn/s/blog_6c9e93cc0101a3h9.html" rel="external nofollow noopener noreferrer" target="_blank">6 详解@SessionAttributes</a><br><a href="http://blog.csdn.net/li_xiao_ming/article/details/8349115" rel="external nofollow noopener noreferrer" target="_blank">spring学习之@ModelAttribute运用详解</a><br><a href="http://blog.csdn.net/kobejayandy/article/details/12690041" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC之@RequestMapping 详解</a><br><a href="http://blog.csdn.net/walkerjong/article/details/7946109" rel="external nofollow noopener noreferrer" target="_blank">@RequestParam @RequestBody @PathVariable 等参数绑定注解详解</a><br><a href="http://blog.csdn.net/walkerjong/article/details/7520896" rel="external nofollow noopener noreferrer" target="_blank">@RequestBody, @ResponseBody 注解详解</a><br><a href="http://www.cnblogs.com/quanyongan/archive/2013/04/16/3024741.html" rel="external nofollow noopener noreferrer" target="_blank">SpringMVC @RequestBody接收Json对象字符串</a><br><a href="http://www.iteye.com/topic/1129096" rel="external nofollow noopener noreferrer" target="_blank">spring3.1.1 使用@ResponseBody 返回中文时出现乱码</a><br><a href="http://snowolf.iteye.com/blog/1636050" rel="external nofollow noopener noreferrer" target="_blank">Spring 注解学习手札（八）补遗——@ExceptionHandler</a><br><a href="http://babyduncan.iteye.com/blog/1124453" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC 的请求参数获取的几种方法</a><br><a href="https://www.mkyong.com/spring/spring-propertysources-example/" rel="external nofollow noopener noreferrer" target="_blank">Spring @PropertySource example</a></p>
</blockquote>
<h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p><code>@RestController</code>: 继承于<code>@Controller</code>，开发REST服务的时候不需要使用<code>@Controller</code>而专门的<code>@RestController</code>.当实现一个RESTful web services的时候，response将一直通过response body发送。为了简化开发，Spring 4.0提供了一个专门版本的controller<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(value=TYPE)  </span><br><span class="line"><span class="meta">@Retention</span>(value=RUNTIME)  </span><br><span class="line"><span class="meta">@Documented</span>  </span><br><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController</span><br></pre></td></tr></table></figure></p>
<p>使用了<code>@RestController</code>注解之后，方法就可以不需要再指定<code>@ResponseBody</code>了</p>
<hr>
<h4 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h4><p><code>@ModelAttribute</code>: 该注解有两个用法，一个是用于方法上，一个是用于参数上；<br>用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；<br>用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：<br>A） <code>@SessionAttributes</code> 启用的attribute 对象上；<br>B） <code>@ModelAttribute</code> 用于方法上时指定的model对象；<br>C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中</p>
<p><code>@ModelAttribute</code>注释void返回值的方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@ModelAttribute</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateModel</span><span class="params">(@RequestParam String abc, Model model)</span> </span>&#123;  </span><br><span class="line">       model.addAttribute(<span class="string">"attributeName"</span>, abc);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/helloWorld"</span>)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> <span class="string">"helloWorld"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个例子，在获得请求/helloWorld 后，populateModel方法在helloWorld方法之前先被调用，它把请求参数（/helloWorld?abc=text）加入到一个名为attributeName的model属性中，在它执行后helloWorld被调用，返回视图名helloWorld和model已由@ModelAttribute方法生产好了。</p>
<p><code>@ModelAttribute</code>注释返回具体类的方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">addAccount</span><span class="params">(@RequestParam String number)</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">return</span> accountManager.findAccount(number);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种情况，model属性的名称没有指定，它由返回类型隐含表示，如这个方法返回Account类型，那么这个model属性的名称是account。</p>
<p><code>@ModelAttribute(value=&quot;&quot;)</code>注释返回具体类的方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span>(<span class="string">"attributeName"</span>)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addAccount</span><span class="params">(@RequestParam String abc)</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> abc;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/helloWorld"</span>)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> <span class="string">"helloWorld"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个例子中使用<code>@ModelAttribute</code>注释的value属性，来指定model属性的名称。model属性对象就是方法的返回值。它无须要特定的参数</p>
<p><code>@ModelAttribute</code>和<code>@RequestMapping</code>同时注释一个方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/helloWorld.do"</span>)  </span><br><span class="line">    <span class="meta">@ModelAttribute</span>(<span class="string">"attributeName"</span>)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> <span class="string">"hi"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这时这个方法的返回值并不是表示一个视图名称，而是model属性的值，视图名称由<code>RequestToViewNameTranslator</code>根据请求”/helloWorld.do”转换为逻辑视图helloWorld。<br>Model属性名称有<code>@ModelAttribute(value=””)</code>指定，相当于在request中封装了key=attributeName，value=hi</p>
<p><code>@ModelAttribute</code>注释一个方法的参数<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@ModelAttribute</span>(<span class="string">"user"</span>)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addAccount</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"jz"</span>,<span class="string">"123"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/helloWorld"</span>)  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">(@ModelAttribute(<span class="string">"user"</span>)</span> User user) </span>&#123;  </span><br><span class="line">       user.setUserName(<span class="string">"jizhou"</span>);  </span><br><span class="line">       <span class="keyword">return</span> <span class="string">"helloWorld"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这个例子里，<code>@ModelAttribute(&quot;user&quot;) User user</code>注释方法参数，参数user的值来源于<code>addAccount()</code>方法中的model属性。<br>此时如果方法体没有标注<code>@SessionAttributes(&quot;user&quot;)</code>，那么scope为request，如果标注了，那么scope为session</p>
<hr>
<h4 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h4><p><code>@SessionAttributes</code>:该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象.</p>
<p>通过Model绑定<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"login"</span>)</span><br><span class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"mysession"</span>)</span><br><span class="line"><span class="comment">//定义把Model中的mysession属性的值绑定到Session中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@ModelAttribute User user, ModelMap model)</span> </span>&#123;</span><br><span class="line">       String viewName = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">boolean</span> check = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (check) &#123;</span><br><span class="line">           model.addAttribute(<span class="string">"mysession"</span>, <span class="string">"123"</span>);</span><br><span class="line">           viewName = <span class="string">"redirect:/home"</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           viewName = <span class="string">"redirect:/"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> viewName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样我们不但可以在请求所对应的JSP视图页面中通过<code>request.getAttribute()</code>和<code>session.getAttribute()</code>获取mysession，还可以在下一个请求所对应的JSP视图页面中通过<code>session.getAttribute()</code>或<code>ModelMap#get()</code>访问到这个属性。<br>这里我们仅将一个ModelMap的属性放入Session中，其实<code>@SessionAttributes</code>允许指定多个属性。你可以通过字符串数组的方式指定多个属性，如 <code>@SessionAttributes({“attr1”,”attr2”})</code>。此外，<code>@SessionAttributes</code>还可以通过属性类型指定要session化的ModelMap属性，如<code>@SessionAttributes(types=User.class)</code>，当然也可以指定多个类，如 <code>@SessionAttributes(types = {User.class,Dept.class})</code>，还可以联合使用属性名和属性类型指定：<code>@SessionAttributes(types = {User.class,Dept.class},value={“attr1”,”attr2”})</code>。</p>
<p>通过<code>@ModelAttribute</code>绑定<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"login"</span>)</span><br><span class="line"><span class="comment">//此处定义需要绑定到session中的model名称</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line">    <span class="comment">//@ModelAttribute将绑定到session中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@ModelAttribute(<span class="string">"user"</span>)</span> User user, ModelMap model)</span>&#123;</span><br><span class="line">       String viewName = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">boolean</span> check = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (check) &#123;</span><br><span class="line">           viewName = <span class="string">"redirect:/home"</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           viewName = <span class="string">"redirect:/"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> viewName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>@SessionAttributes</code>需要清除时，使用<code>SessionStatus.setComplete()</code>;来清除。注意，它只清除<code>SessionAttributes</code>的session，不会清除HttpSession的数据。故如用户身份验证对象的session一般不同它来实现，还是用<code>session.setAttribute</code>等传统的方式实现。</p>
<hr>
<h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><p><code>@RequestMapping</code>: RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。主要有如下属性:</p>
<ul>
<li><code>value</code>:  指定请求的实际地址，指定的地址可以是URI Template 模式,可以指定为普通的具体值,含有某变量的一类值及含正则表达式的一类值</li>
<li><code>method</code>: 指定请求的method类型， GET、POST、PUT、DELETE等</li>
<li><code>consumes</code>: 指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;</li>
<li><code>produces</code>: 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</li>
<li><code>params</code>: 指定request中必须包含某些参数值是，才让该方法处理</li>
<li><code>headers</code>: 指定request中必须包含某些指定的header值，才能让该方法处理请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line">  <span class="comment">//默认</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/one"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oneMethod</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//指定请求方法为POST类型</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=<span class="string">"/two"</span>,method=RequestMetho.POST)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">twoMethod</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//含有某变量</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;three&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threeMethod</span><span class="params">(@PathVariable String three)</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//含正则表达式</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/spring-web/&#123;symbolicName:[a-z-]+&#125;-&#123;version:\d\.\d\.\d&#125;.&#123;extension:\.[a-z]&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fourMethod</span><span class="params">(@PathVariable String version, @PathVariable String extension)</span> </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//consumes指定仅处理request Content-Type为“application/json”类型的请求</span></span><br><span class="line">  <span class="comment">//produces指定返回的内容类型为text/plain,同时指定字符集，否则碰中文会乱码</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=<span class="string">"/five"</span>,method=RequestMethod.POST, consumes=<span class="string">"application/json"</span>,produces=<span class="string">"text/plain;charset=utf-8"</span>)</span><br><span class="line">  <span class="meta">@ReponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fiveMethod</span><span class="params">(@RequestBody User user)</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//params指定仅处理请求中包含了名为“myParam”，值为“myValue”的请求</span></span><br><span class="line">  <span class="comment">//headers指定仅处理request的header中包含了指定“Refer”请求头和对应值为“http://www.baidu.com/”的请求</span></span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=<span class="string">"/six"</span>,method=RequestMethod.GET, params=<span class="string">"myParam=myValue"</span>, headers=<span class="string">"Referer=http://www.baidu.com/"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sixMethod</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><code>@PathVariable</code>:当使用<code>@RequestMapping</code> URI template 样式映射时， 即 <code>someUrl/{paramId}</code>, 这时的paramId可通过<code>@Pathvariable</code>注解绑定它传过来的值到方法的参数上<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;three&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threeMethod</span><span class="params">(@PathVariable String three)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面代码把URI template 中变量three，绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在<code>@PathVariable(&quot;name&quot;)</code>指定uri template中的名称</p>
<hr>
<p><code>@RequestHeader</code>: 可以把Request请求header部分的值绑定到方法的参数上<br>Request 的header部分<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">Host                    localhost:8080  </span><br><span class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=0.9  </span><br><span class="line">Accept-Language         fr,en-gb;q=0.7,en;q=0.3  </span><br><span class="line">Accept-Encoding         gzip,deflate  </span><br><span class="line">Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7  </span><br><span class="line">Keep-Alive              300</span><br></pre></td></tr></table></figure></p>
<p>把request header部分的 Accept-Encoding的值，绑定到参数encoding上了， Keep-Alive header的值绑定到参数keepAlive上<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/seven"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sevenMethod</span><span class="params">(@RequestHeader(<span class="string">"Accept-Encoding"</span>)</span> String encoding,  </span></span><br><span class="line"><span class="function">                              @<span class="title">RequestHeader</span><span class="params">(<span class="string">"Keep-Alive"</span>)</span> <span class="keyword">long</span> keepAlive)  </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<p><code>@CookieValue</code>: 可以把Request header中关于cookie的值绑定到方法的参数上<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/eight"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eightMethod</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String cookie)  </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p><code>@RequestParam</code><br>A） 常用来处理简单类型的绑定，通过<code>Request.getParameter()</code> 获取的String可直接转换为简单类型的情况（ String–&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用<code>request.getParameter()</code>方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；</p>
<p>B）用来处理Content-Type: 为<code>application/x-www-form-urlencoded</code>编码的内容，提交方式GET、POST；</p>
<p>C) 该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/nine"</span>, method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nineMethod</span><span class="params">(@RequestMapping(<span class="string">"name"</span>)</span>String name, @<span class="title">RequestMapping</span><span class="params">(required=<span class="keyword">false</span>)</span><span class="keyword">int</span> age)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><ol>
<li>该注解用于读取Request请求的body部分数据，使用系统默认配置的<code>HttpMessageConverter</code>进行解析，然后把相应的数据绑定到要返回的对象上；</li>
<li>再把<code>HttpMessageConverter</code>返回的对象数据绑定到 controller中方法的参数上。</li>
</ol>
<p>使用时机：</p>
<ol>
<li>GET、POST方式提时， 根据request header Content-Type的值来判断:</li>
</ol>
<ul>
<li><code>application/x-www-form-urlencoded</code>， 可选（即非必须，因为这种情况的数据<code>@RequestParam</code>, <code>@ModelAttribute</code>也可以处理，当然<code>@RequestBody</code>也能处理）；</li>
<li><code>multipart/form-data</code>, 不能处理（即使用<code>@RequestBody</code>不能处理这种格式的数据）；</li>
<li>其他格式， 必须（其他格式包括<code>application/json</code>, <code>application/xml</code>等。这些格式的数据，必须使用<code>@RequestBody</code>来处理）；</li>
</ul>
<ol start="2">
<li><p>PUT方式提交时， 根据request header Content-Type的值来判断:</p>
<ul>
<li><code>application/x-www-form-urlencoded</code>， 必须；</li>
<li><code>multipart/form-data</code>, 不能处理；</li>
<li>其他格式， 必须；</li>
</ul>
</li>
</ol>
<p>说明：request的body部分的数据编码格式由header部分的Content-Type指定；<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> saveDataAry=[];  </span><br><span class="line">    <span class="keyword">var</span> data1=&#123;<span class="string">"userName"</span>:<span class="string">"u1"</span>,<span class="string">"address"</span>:<span class="string">"by"</span>&#125;;  </span><br><span class="line">    <span class="keyword">var</span> data2=&#123;<span class="string">"userName"</span>:<span class="string">"u2"</span>,<span class="string">"address"</span>:<span class="string">"yx"</span>&#125;;  </span><br><span class="line">    saveDataAry.push(data1);  </span><br><span class="line">    saveDataAry.push(data2);         </span><br><span class="line">    $.ajax(&#123; </span><br><span class="line">        type:<span class="string">"POST"</span>, </span><br><span class="line">        url:<span class="string">"user/saveUser"</span>, </span><br><span class="line">        dataType:<span class="string">"json"</span>,      </span><br><span class="line">        contentType:<span class="string">"application/json"</span>,               </span><br><span class="line">        data:<span class="built_in">JSON</span>.stringify(saveData), </span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; </span><br><span class="line">                                    </span><br><span class="line">        &#125; </span><br><span class="line">        &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"saveUser"</span>, method = &#123;RequestMethod.POST &#125;&#125;) </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(@RequestBody List&lt;User&gt; users)</span> </span>&#123; </span><br><span class="line">     userService.save(users); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h4><p>该注解用于将Controller的方法返回的对象，通过适当的<code>HttpMessageConverter</code>转换为指定格式后，写入到Response对象的body数据区。</p>
<p>使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Annotation</tag>
        <tag>Spring</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring AOP相关知识点收集</title>
    <url>/spring-aop/</url>
    <content><![CDATA[<blockquote>
<p><a href="http://jinnianshilongnian.iteye.com/blog/1415606" rel="external nofollow noopener noreferrer" target="_blank">Spring 之AOP AspectJ切入点语法详解）</a><br><a href="http://blog.csdn.net/yuqinying112/article/details/7336461" rel="external nofollow noopener noreferrer" target="_blank">使用Spring进行面向切面编程</a><br><a href="http://www.tuicool.com/articles/I3EFzm" rel="external nofollow noopener noreferrer" target="_blank">aop:aspectj-autoproxy的内部机制</a><br><a href="http://blog.csdn.net/a352193394/article/details/7345860" rel="external nofollow noopener noreferrer" target="_blank">使用Spring的注解方式实现AOP</a><br><a href="http://hotstrong.iteye.com/blog/1330046" rel="external nofollow noopener noreferrer" target="_blank">Spring AOP 完成日志记录</a></p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="Spring-AOP支持的AspectJ切入点指示符"><a href="#Spring-AOP支持的AspectJ切入点指示符" class="headerlink" title="Spring AOP支持的AspectJ切入点指示符"></a>Spring AOP支持的AspectJ切入点指示符</h4><p>切入点指示符用来指示切入点表达式目的，在Spring AOP中目前只有执行方法这一个连接点，Spring AOP支持的AspectJ切入点指示符如下：</p>
<ul>
<li><code>execution</code>：用于匹配方法执行的连接点；</li>
<li><code>within</code>：用于匹配指定类型内的方法执行；</li>
<li><code>this</code>：用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配；</li>
<li><code>target</code>：用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配；</li>
<li><code>args</code>：用于匹配当前执行的方法传入的参数为指定类型的执行方法；</li>
<li><code>@within</code>：用于匹配所以持有指定注解类型内的方法；</li>
<li><code>@target</code>：用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解；</li>
<li><code>@args</code>：用于匹配当前执行的方法传入的参数持有指定注解的执行；</li>
<li><code>@annotation</code>：用于匹配当前执行方法持有指定注解的方法；</li>
<li><code>bean</code>：Spring AOP扩展的，AspectJ没有对于指示符，用于匹配特定名称的Bean对象的执行方法；</li>
<li><code>reference pointcut</code>：表示引用其他命名切入点，只有@ApectJ风格支持，Schema风格不支持。</li>
</ul>
<hr>
<h4 id="类型匹配语法"><a href="#类型匹配语法" class="headerlink" title="类型匹配语法"></a>类型匹配语法</h4><p><code>*</code>：匹配任何数量字符；<br><code>..</code>：匹配任何数量字符的重复，如在类型模式中匹配任何数量子包；而在方法参数模式中匹配任何数量参数。<br><code>+</code>：匹配指定类型的子类型；仅能作为后缀放在类型模式后边。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.String    //匹配String类型；  </span><br><span class="line">java.*.String   //匹配java包下的任何“一级子包”下的String类型；  </span><br><span class="line">                //如匹配java.lang.String，但不匹配java.lang.ss.String  </span><br><span class="line">java..*         //匹配java包及任何子包下的任何类型;  </span><br><span class="line">                //如匹配java.lang.String、java.lang.annotation.Annotation  </span><br><span class="line">java.lang.*ing  //匹配任何java.lang包下的以ing结尾的类型；  </span><br><span class="line">java.lang.Number+ //匹配java.lang包下的任何Number的自类型；  </span><br><span class="line">                  //如匹配java.lang.Integer，也匹配java.math.BigInteger</span><br></pre></td></tr></table></figure></p>
<p>匹配类型：使用如下方式匹配<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注解？ 类的全限定名字</span><br></pre></td></tr></table></figure></p>
<ul>
<li>注解：可选，类型上持有的注解，如@Deprecated；</li>
<li>类的全限定名：必填，可以是任何类全限定名。</li>
</ul>
<p>匹配方法执行：使用如下方式匹配<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注解？ 修饰符? 返回值类型 类型声明?方法名(参数列表) 异常列表？</span><br></pre></td></tr></table></figure></p>
<ul>
<li>注解：可选，方法上持有的注解，如@Deprecated；</li>
<li>修饰符：可选，如public、protected；</li>
<li>返回值类型：必填，可以是任何类型模式；“*”表示所有类型；</li>
<li>类型声明：可选，可以是任何类型模式；</li>
<li>方法名：必填，可以使用“*”进行模式匹配；</li>
<li>参数列表：“()”表示方法没有任何参数；“(..)”表示匹配接受任意个参数的方法，“(..,java.lang.String)”表示匹配接受java.lang.String类型的参数结束，且其前边可以接受有任意个参数的方法；“(java.lang.String,..)” 表示匹配接受java.lang.String类型的参数开始，且其后边可以接受任意个参数的方法；“(*,java.lang.String)” 表示匹配接受java.lang.String类型的参数结束，且其前边接受有一个任意类型参数的方法；</li>
<li>异常列表：可选，以“throws 异常全限定名列表”声明，异常全限定名列表如有多个以“，”分割，如throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException。</li>
</ul>
<hr>
<h4 id="组合切入点表达式"><a href="#组合切入点表达式" class="headerlink" title="组合切入点表达式"></a>组合切入点表达式</h4><p>AspectJ使用 且（&amp;&amp;）、或（||）、非（！）来组合切入点表达式。<br>在Schema风格下，由于在XML中使用“&amp;&amp;”需要使用转义字符<code>&amp;amp;&amp;amp;</code>来代替之，所以很不方便，因此Spring ASP 提供了and、or、not来代替&amp;&amp;、||、！。</p>
<hr>
<h4 id="切入点使用示例"><a href="#切入点使用示例" class="headerlink" title="切入点使用示例"></a>切入点使用示例</h4><h5 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h5><p><em>使用“execution(方法表达式)”匹配方法执行-</em></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public * *(..)</code></td>
<td>任何公共方法的执行</td>
</tr>
<tr>
<td><code>* cn.javass..*.*(..)</code></td>
<td>cn.javass包及所有子包下任何类的任何方法</td>
</tr>
<tr>
<td><code>* (!cn.javass..IPointcutService+).*(..)</code></td>
<td>非“cn.javass包及所有子包下IPointcutService接口及子类型”的任何方法</td>
</tr>
<tr>
<td><a href="mailto:`@java.lang.Deprecated" rel="external nofollow noopener noreferrer" target="_blank">`@java.lang.Deprecated</a> <em> </em>(..)`</td>
<td>任何持有@java.lang.Deprecated注解的方法</td>
</tr>
</tbody>
</table>
<h5 id="within"><a href="#within" class="headerlink" title="within"></a>within</h5><p><em>使用“within(类型表达式)”匹配指定类型内的方法执行；</em></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>within(cn.javass..*)</td>
<td>cn.javass包及子包下的任何方法执行</td>
</tr>
<tr>
<td>within(cn.javass..IPointcutService+)</td>
<td>cn.javass包或所有子包下IPointcutService类型及子类型的任何方法</td>
</tr>
<tr>
<td>within(@cn.javass..Secure *)</td>
<td>持有cn.javass..Secure注解的任何类型的任何方法.必须是在目标对象上声明这个注解，在接口上声明的对它不起作用</td>
</tr>
</tbody>
</table>
<h5 id="this"><a href="#this" class="headerlink" title="this"></a>this</h5><p><em>使用“this(类型全限定名)”匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口方法也可以匹配；注意this中使用的表达式必须是类型全限定名，不支持通配符</em></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>this(cn.spring.service.IPointcutService)</td>
<td>当前AOP对象实现了 IPointcutService接口的任何方法</td>
</tr>
<tr>
<td>this(cn.spring.service.IIntroductionService)</td>
<td>当前AOP对象实现了 IIntroductionService接口的任何方法也可能是引入接口</td>
</tr>
</tbody>
</table>
<h5 id="target"><a href="#target" class="headerlink" title="target"></a>target</h5><p><em>使用“target(类型全限定名)”匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配；注意target中使用的表达式必须是类型全限定名，不支持通配符</em></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>target(cn.spring.service.IPointcutService)</td>
<td>当前目标对象（非AOP对象）实现了 IPointcutService接口的任何方法</td>
</tr>
<tr>
<td>target(cn.spring.service.IIntroductionService)</td>
<td>当前AOP对象实现了 IIntroductionService接口的任何方法也可能是引入接口</td>
</tr>
</tbody>
</table>
<h5 id="args"><a href="#args" class="headerlink" title="args"></a>args</h5><p><em>使用“args(参数类型列表)”匹配当前执行的方法传入的参数为指定类型的执行方法；注意是匹配传入的参数类型，不是匹配方法签名的参数类型；参数类型列表中的参数必须是类型全限定名，通配符不支持；args属于动态切入点，这种切入点开销非常大，非特殊情况最好不要使用</em></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>args (java.io.Serializable,..)</td>
<td>任何一个以接受“传入参数类型为 java.io.Serializable” 开头，且其后可跟任意个任意类型的参数的方法执行，args指定的参数类型是在运行时动态匹配的</td>
</tr>
</tbody>
</table>
<h5 id="within-1"><a href="#within-1" class="headerlink" title="@within"></a>@within</h5><p><em>使用“@within(注解类型)”匹配所以持有指定注解类型内的方法；注解类型也必须是全限定类型名</em></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>@within cn.spring.Secure)</td>
<td>任何目标对象对应的类型持有Secure注解的类方法；必须是在目标对象上声明这个注解，在接口上声明的对它不起作用</td>
</tr>
</tbody>
</table>
<h5 id="target-1"><a href="#target-1" class="headerlink" title="@target"></a>@target</h5><p><em>使用“@target(注解类型)”匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解；注解类型也必须是全限定类型名</em></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>@target(cn.spring.Secure)</td>
<td>任何目标对象持有Secure注解的类方法；必须是在目标对象上声明这个注解，在接口上声明的对它不起作用</td>
</tr>
</tbody>
</table>
<h5 id="args-1"><a href="#args-1" class="headerlink" title="@args"></a>@args</h5><p><em>使用“@args(注解列表)”匹配当前执行的方法传入的参数持有指定注解的执行；注解类型也必须是全限定类型名</em></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>@args (cn.spring.Secure)</td>
<td>任何一个只接受一个参数的方法，且方法运行时传入的参数持有注解 cn.spring.Secure；动态切入点，类似于arg指示符；</td>
</tr>
</tbody>
</table>
<h5 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h5><p><em>使用“@annotation(注解类型)”匹配当前执行方法持有指定注解的方法；注解类型也必须是全限定类型名</em></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>@annotation(cn.spring.Secure )</td>
<td>当前执行方法上持有注解 cn.spring.Secure将被匹配</td>
</tr>
</tbody>
</table>
<h5 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h5><p><em>使用“bean(Bean id或名字通配符)”匹配特定名称的Bean对象的执行方法；Spring ASP扩展的，在AspectJ中无相应概念</em></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>bean(*Service)</td>
<td>匹配所有以Service命名（id或name）结尾的Bean</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="通知参数"><a href="#通知参数" class="headerlink" title="通知参数"></a>通知参数</h4><ul>
<li>使用JoinPoint获取：Spring AOP提供使用org.aspectj.lang.JoinPoint类型获取连接点数据，任何通知方法的第一个参数都可以是JoinPoint(环绕通知是ProceedingJoinPoint，JoinPoint子类)，当然第一个参数位置也可以是JoinPoint.StaticPart类型，这个只返回连接点的静态部分。</li>
</ul>
<p>1) <code>JoinPoint</code>：提供访问当前被通知方法的目标对象、代理对象、方法参数等数据<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.aspectj.lang;  </span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.SourceLocation;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JoinPoint</span> </span>&#123;  </span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;         <span class="comment">//连接点所在位置的相关信息  </span></span><br><span class="line">    <span class="function">String <span class="title">toShortString</span><span class="params">()</span></span>;     <span class="comment">//连接点所在位置的简短相关信息  </span></span><br><span class="line">    <span class="function">String <span class="title">toLongString</span><span class="params">()</span></span>;     <span class="comment">//连接点所在位置的全部相关信息  </span></span><br><span class="line">    <span class="function">Object <span class="title">getThis</span><span class="params">()</span></span>;         <span class="comment">//返回AOP代理对象  </span></span><br><span class="line">    <span class="function">Object <span class="title">getTarget</span><span class="params">()</span></span>;       <span class="comment">//返回目标对象  </span></span><br><span class="line">    Object[] getArgs();       <span class="comment">//返回被通知方法参数列表  </span></span><br><span class="line">    <span class="function">Signature <span class="title">getSignature</span><span class="params">()</span></span>;  <span class="comment">//返回当前连接点签名  </span></span><br><span class="line">    <span class="function">SourceLocation <span class="title">getSourceLocation</span><span class="params">()</span></span>;<span class="comment">//返回连接点方法所在类文件中的位置  </span></span><br><span class="line">    <span class="function">String <span class="title">getKind</span><span class="params">()</span></span>;        <span class="comment">//连接点类型  </span></span><br><span class="line">    <span class="function">StaticPart <span class="title">getStaticPart</span><span class="params">()</span></span>; <span class="comment">//返回连接点静态部分  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2）<code>ProceedingJoinPoint</code>：用于环绕通知，使用proceed()方法来执行目标方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProceedingJoinPoint</span> <span class="keyword">extends</span> <span class="title">JoinPoint</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">(Object[] args)</span> <span class="keyword">throws</span> Throwable</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3) JoinPoint.StaticPart：提供访问连接点的静态部分，如被通知方法签名、连接点类型等<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StaticPart</span> </span>&#123;  </span><br><span class="line">    <span class="function">Signature <span class="title">getSignature</span><span class="params">()</span></span>;    <span class="comment">//返回当前连接点签名  </span></span><br><span class="line">    <span class="function">String <span class="title">getKind</span><span class="params">()</span></span>;          <span class="comment">//连接点类型  </span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>;               <span class="comment">//唯一标识  </span></span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;         <span class="comment">//连接点所在位置的相关信息  </span></span><br><span class="line">    <span class="function">String <span class="title">toShortString</span><span class="params">()</span></span>;     <span class="comment">//连接点所在位置的简短相关信息  </span></span><br><span class="line">    <span class="function">String <span class="title">toLongString</span><span class="params">()</span></span>;     <span class="comment">//连接点所在位置的全部相关信息  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>build.gradle<br><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line">apply plugin: <span class="string">'eclipse'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">	maven &#123; </span><br><span class="line">	  url <span class="string">"http://repo.spring.io/libs-release"</span></span><br><span class="line">	  url <span class="string">"http://maven.oschina.net/content/groups/public/"</span></span><br><span class="line">	&#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">	<span class="keyword">compile</span>(</span><br><span class="line">		[<span class="keyword">group</span>: <span class="string">'org.springframework'</span>, name: <span class="string">'spring-aop'</span>, version: <span class="string">'4.1.5.RELEASE'</span>],</span><br><span class="line">		[<span class="keyword">group</span>: <span class="string">'org.springframework'</span>, name: <span class="string">'spring-aspects'</span>, version: <span class="string">'4.1.5.RELEASE'</span>],</span><br><span class="line">		[<span class="keyword">group</span>: <span class="string">'org.springframework'</span>, name: <span class="string">'spring-context-support'</span>, version: <span class="string">'4.1.5.RELEASE'</span>]</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>service类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHelloWorldService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String s1,String s2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldService</span> <span class="keyword">implements</span> <span class="title">IHelloWorldService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> s1+<span class="string">" "</span>+s2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>aspect类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//切入点 args获取方法参数</span></span><br><span class="line">	<span class="meta">@Pointcut</span>(value=<span class="string">"execution(* sayHello(..)) &amp;&amp; args(s1,s2)"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloService</span><span class="params">(String s1,String s2)</span></span>&#123;&#125;</span><br><span class="line">	<span class="comment">//前置通知</span></span><br><span class="line">	<span class="meta">@Before</span>(value=<span class="string">"helloService(s1,s2)"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"before:"</span>+s1+<span class="string">" "</span>+s2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//环绕通知</span></span><br><span class="line">	<span class="meta">@Around</span>(<span class="string">"helloService(s1,s2)"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint pjp,String s1,String s2)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"around before: "</span>+s1);</span><br><span class="line">		Object obj = pjp.proceed();</span><br><span class="line">		System.out.println(<span class="string">"around after: "</span>+s2);</span><br><span class="line">		<span class="keyword">return</span> obj;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//后置通知,returning为返回值</span></span><br><span class="line">	<span class="meta">@AfterReturning</span>(value=<span class="string">"helloService(s1,s2)"</span>,returning=<span class="string">"rtv"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">(JoinPoint jp,Object rtv,String s1,String s2)</span></span>&#123;</span><br><span class="line">	    <span class="comment">//通过getArgs获取方法所有参数</span></span><br><span class="line">		Object[] obj = jp.getArgs();</span><br><span class="line">		<span class="keyword">for</span>(Object o:obj)&#123;</span><br><span class="line">			System.out.println(o.toString());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//获取类名及执行方法名</span></span><br><span class="line">		System.out.println(jp.getSignature().getDeclaringTypeName()</span><br><span class="line">		    +<span class="string">"."</span>+jp.getSignature().getName()</span><br><span class="line">		    +<span class="string">" return: "</span>+rtv);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//@AfterThrowing当方法抛出异常后执行</span></span><br><span class="line">	<span class="comment">//@After类似于finally中的方法，不管方法有无异常抛出都会通知</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>configuration类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>     <span class="comment">//开启aspect织入支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> IHelloWorldService <span class="title">iHelloWorldService</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> HelloWorldService();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MyAspect <span class="title">myAspect</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyAspect();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>test<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> AnnotationConfigApplicationContext ctx;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		IHelloWorldService service = ctx.getBean(IHelloWorldService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		service.sayHello(<span class="string">"a"</span>, <span class="string">"b"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">around before: a</span><br><span class="line">before:a b</span><br><span class="line">around after: b</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">com.spring.service.IHelloWorldService.sayHello return: a b</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security ACL的基本使用</title>
    <url>/spring-boot-security-acl/</url>
    <content><![CDATA[<p>访问控制列表（<em>Access Control List</em>,即 ACL）是用以对指定对象权限进行管理的一组列表。Spring Security ACL可以在单个域对象上定义特定的用户/角色权限。例如，一个拥有管理员角色的用户可以读取(READ)与删除(DELETE)所有的资源，而普通用户只能查看自己的资源。可以认为是不同的用户/角色对不同的指定对象有着不同的权限。接下来我就来试试Spring Security ACL是如何实现这一基本功能的。</p>
<a id="more"></a>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><p>首先需要准备依赖，这里使用的是Spring Boot。如果使用的是maven，<code>pom.xml</code>部分配置如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-acl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-data<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>接下来需要在<code>application.yml</code>配置文件中配置数据库连接信息：<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:mem:test;DB_CLOSE_DELAY=-1</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">"classpath:db_schema.sql"</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>因为Spring Security ACL是基于数据库表来管理的，因此需要使用<code>spring.datasource.schema</code>这属性来指定需要执行的sql文件来生成需要的表结构。<a href="https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#dbschema-acl" rel="external nofollow noopener noreferrer" target="_blank">Spring官网</a>已经提供了不同数据库的表生成脚本，可以根据自己的需要去获取对应的sql语句存储到<code>db_schema.sql</code>中。<br>接下来简单的说一下生成的各张表的用途：</p>
<ul>
<li><code>acl_sid</code>:用于存储系统可识别的安全身份。主要有两种，一种是<code>PrncipalSid</code>，是唯一的已认证用户，一种是<code>GrantedAuthoritySid</code>，是可以给多个用户的权限。</li>
<li><code>acl_class</code>:存储域对象的全限定名。</li>
<li><code>acl_object_identity</code>: 存储特定域对象的对象标识定义。</li>
<li><code>acl_entry</code>: 存储每个SID与ObjectIdentity对应的ACL权限。</li>
</ul>
<h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><p>接下来需要通过一个配置类来配置所需要的ACL服务:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>, securedEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AclConfig</span> <span class="keyword">extends</span> <span class="title">GlobalMethodSecurityConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AclConfig</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>@EnableGlobalMethodSecurity</code>注解里，可以通过指定开启对应的注解来对方法进行权限控制：</p>
<ul>
<li><strong>prePostEnabled</strong>: 开启之后可以使用一系列前缀为<code>@Pre</code>或者<code>@Post</code>的注解。它们用来检查对方法的调用前/后的权限。常用的有<code>@PreAuthorize</code>,<code>@PostAuthorize</code>,<code>@PreFilter</code>,<code>@PostFilter</code>。支持SpEL表达式。如<code>@PreAuthorize(&quot;hasRole(&#39;ADMIN&#39;)&quot;)</code></li>
<li><strong>securedEnabled</strong>：开启之后可以使用<code>@Secured</code>注解。如<code>@Secured(&quot;ROLE_ADMIN&quot;)</code>,<code>@Secured({&quot;ROLE_USER&quot;, &quot;ROLE_ADMIN&quot;})</code>。</li>
<li><strong>jsr250Enabled</strong>:开启之后支持<code>@RolesAllowed</code>注解。如<code>@RolesAllowed(&quot;ROLE_ADMIN&quot;)</code>。</li>
</ul>
<p>首先需要定义的自然是<code>AclService</code>接口,它负责对ACL进行相关操作。这里使用的是一个基于JDBC的相关实现类<code>JdbcMutableAclService</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JdbcMutableAclService <span class="title">aclService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JdbcMutableAclService(dataSource, lookupStrategy(), aclCache());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>类如其名，<code>JdbcMutableAclService</code>是通过<code>JdbcTemplate</code>对数据库进行访问。它会通过id来检索<code>acl_sid</code>与<code>acl_class</code>表的新记录，如果使用的是其他的数据库，需要提供正确的主键查找方式给<code>JdbcMutableAclService</code>的<code>sidIdentityQuery</code>及<code>classIdentityQuery</code>。<br><code>JdbcMutableAclService</code>构造方法需要传入三个参数，第一个是<code>DataSource</code>，提供给<code>JdbcTemplate</code>。<code>dataSource</code>已经在配置类中通过构造方法注入了，因此可以直接拿来使用了。<code>LookupStrategy</code>是一个基于SQL语句查找策略类<code>BasicLookupStrategy</code>：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LookupStrategy <span class="title">lookupStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BasicLookupStrategy(dataSource, aclCache(), aclAuthorizationStrategy(), permissionGrantingStrategy());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它是用来给<code>AclService</code>提供一个查找策略来发现<code>Sid</code>与<code>ObjectIdentity</code>的关系。它需要一个<code>AclAuthorizationStrategy</code>接口来判断一个认证用户是否有足够的权限对<code>Acl</code>进行操作:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AclAuthorizationStrategy <span class="title">aclAuthorizationStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AclAuthorizationStrategyImpl(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_ADMIN"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里使用了<code>AclAuthorizationStrategyImpl</code>这个默认的实现类来指定哪些角色对指定对象是否具有必需的权限。它的构造方法支持输入的参数必须为1或者3个。这里边会定义三个特殊的权限：修改所有人权限，修改统计信息权限及更改其他ACL/ACE的详细信息。如果参数只有一个，那就会将这三个特殊权限全部给定这一个角色。<br><code>BasicLookupStrategy</code>的构造方法还需要一个<code>PermissionGrantingStrategy</code>来判断一个<code>ACL</code>对象的权限是否能够授予一个或者多个<code>Sid</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PermissionGrantingStrategy <span class="title">permissionGrantingStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultPermissionGrantingStrategy(<span class="keyword">new</span> ConsoleAuditLogger());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里就使用默认的权限授予策略了。</p>
<p>最后需要配置用来缓存<code>ACL</code>信息的缓存类:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EhCacheBasedAclCache <span class="title">aclCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EhCacheBasedAclCache(aclEhCacheFactoryBean().getObject(), permissionGrantingStrategy(), aclAuthorizationStrategy());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EhCacheFactoryBean <span class="title">aclEhCacheFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EhCacheFactoryBean ehCacheFactoryBean = <span class="keyword">new</span> EhCacheFactoryBean();</span><br><span class="line">    ehCacheFactoryBean.setCacheManager(aclCacheManager().getObject());</span><br><span class="line">    ehCacheFactoryBean.setCacheName(<span class="string">"aclCache"</span>);</span><br><span class="line">    <span class="keyword">return</span> ehCacheFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EhCacheManagerFactoryBean <span class="title">aclCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EhCacheManagerFactoryBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Spring Security ACL是使用<code>Ehcache</code>来做缓存的，这里就按部就班的提供对应的服务即可。</p>
<p>在主要的<code>AclService</code>已经配置好了之后，如果想在<code>PrePostEnabled</code>那些注解中来通过ACL判断权限，就需要开启基于表达式的访问控制权限:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> MethodSecurityExpressionHandler <span class="title">createExpressionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> defaultMethodSecurityExpressionHandler();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MethodSecurityExpressionHandler <span class="title">defaultMethodSecurityExpressionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultMethodSecurityExpressionHandler expressionHandler = <span class="keyword">new</span> DefaultMethodSecurityExpressionHandler();</span><br><span class="line">    AclPermissionEvaluator permissionEvaluator = <span class="keyword">new</span> AclPermissionEvaluator(aclService());</span><br><span class="line">    expressionHandler.setPermissionEvaluator(permissionEvaluator);</span><br><span class="line">    expressionHandler.setPermissionCacheOptimizer(<span class="keyword">new</span> AclPermissionCacheOptimizer(aclService()));</span><br><span class="line">    <span class="keyword">return</span> expressionHandler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>之前这个配置类继承于<code>GlobalMethodSecurityConfiguration</code>，因此可以通过重写<code>createExpressionHandler</code>方法，将<code>AclPermissionEvaluator</code>加入到其中，这样就可以在SPEL中使用<code>hasPermission</code>等关键词了。配置了那么久，接下来应该试一试它们的功力了。</p>
<h3 id="通过SpEL指定方法级的访问权限"><a href="#通过SpEL指定方法级的访问权限" class="headerlink" title="通过SpEL指定方法级的访问权限"></a>通过SpEL指定方法级的访问权限</h3><p>首先随便定义一个需要被保护的资源:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="comment">//getter/setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来自然就是对应的数据仓库类了:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PostRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Post</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostAuthorize</span>(<span class="string">"hasRole('ADMIN') or hasPermission(returnObject.get(), 'READ')"</span>)</span><br><span class="line">    <span class="function">Optional&lt;Post&gt; <span class="title">findById</span><span class="params">(Long aLong)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostFilter</span>(<span class="string">"hasRole('ADMIN') or hasPermission(filterObject, 'READ')"</span>)</span><br><span class="line">    <span class="function">List&lt;Post&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ADMIN') or hasPermission(#post, 'DELETE')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(@Param(<span class="string">"post"</span>)</span> Post post)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先在读取单个对象的时候，这里通过<code>@PostAuthorize</code>注解来判断，当调用方法之后，当前调用者是否拥有<code>ROLE_ADMIN</code>角色护着对这个返回的对象是否有读取的权限(<code>BasePermission.READ</code>)。因为这里返回的类型是<code>Optional</code>，所以需要写成<code>returnObject.get()</code>;如果返回的就是对象本身，直接用<code>returnObject</code>即可。如果是读取一堆对象，会在调用方法之后筛选出符合指定权限访问的那些对象。而对于删除操作，则会在当前用户调用方法之前判断其对当前对象有无对应的权限，没有的话则会抛出<code>AccessDeniedException</code>异常。</p>
<p>接下来在服务层需要创建ACL关联对应的用户与对象:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PostRepository postRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MutableAclService aclService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PostService</span><span class="params">(PostRepository postRepository, </span></span></span><br><span class="line"><span class="function"><span class="params">                        MutableAclService aclService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postRepository = postRepository;</span><br><span class="line">        <span class="keyword">this</span>.aclService = aclService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePost</span><span class="params">(Post post)</span> </span>&#123;</span><br><span class="line">        Post p = postRepository.save(post);</span><br><span class="line">        ObjectIdentity objectIdentity = <span class="keyword">new</span> ObjectIdentityImpl(Post<span class="class">.<span class="keyword">class</span>, <span class="title">p</span>.<span class="title">getId</span>())</span>;</span><br><span class="line">        MutableAcl acl = aclService.createAcl(objectIdentity);</span><br><span class="line">        PrincipalSid sid = <span class="keyword">new</span> PrincipalSid(post.getAuthor());</span><br><span class="line">        <span class="keyword">int</span> index = acl.getEntries().size();</span><br><span class="line">        acl.insertAce(index++, BasePermission.ADMINISTRATION, </span><br><span class="line">            <span class="keyword">new</span> GrantedAuthoritySid(<span class="string">"ROLE_ADMIN"</span>), <span class="keyword">true</span>);</span><br><span class="line">        acl.insertAce(index++, BasePermission.DELETE, sid, <span class="keyword">true</span>);</span><br><span class="line">        acl.insertAce(index++, BasePermission.READ, sid, <span class="keyword">true</span>);</span><br><span class="line">        aclService.updateAcl(acl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Post&gt; <span class="title">getPost</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> postRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Post&gt; <span class="title">getPosts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> postRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletePost</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        getPost(id).ifPresent(post -&gt; &#123;</span><br><span class="line">            postRepository.delete(post);</span><br><span class="line">            ObjectIdentity objectIdentity = <span class="keyword">new</span> ObjectIdentityImpl(Post<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)</span>;</span><br><span class="line">            aclService.deleteAcl(objectIdentity, <span class="keyword">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在创建实体成功之后，根据返回的id创建一个<code>ObjectIdentity</code>,然后用这个<code>ObjectIdentity</code>通过<code>AclService</code>的<code>createAcl</code>方法创建一个ACL。接下来就需要指定哪些Sid对这个<code>ObjectIdentity</code>有哪些权限。这里首先指定了拥有管理员角色(<code>ROLE_ADMIN</code>)的<code>GrantedAuthoritySid</code>对它是有<code>ADMINISTRATION</code>权限。然后再指定当前创建它的用户与读(<code>READ</code>)与删除(<code>DELETE</code>)的权限。最后再通过<code>AclService</code>的<code>updateAcl</code>方法就可以更新ACL了。<br><code>PrincipalSid</code>构造函数支持通过<code>Authentication</code>来获取认证用户信息，所以也可以使用<code>new PrincipalSid(SecurityContextHolder.getContext().getAuthentication())</code>来当前用户为Sid。只不过这样需要集成Spring Security。</p>
<blockquote>
<p><em>BasePermission</em>有5个定义的权限，从小到大依次是<code>READ</code>,<code>WRITE</code>,<code>CREATE</code>, <code>DELETE</code>,<code>ADMINISTRATION</code>。如果不满足，也可以自定义BasePermission来增加权限。</p>
</blockquote>
<p>删除实体之后自然也需要通过<code>AclService</code>的<code>deleteAcl</code>方法删除对应的ACL。</p>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>最后我们需要写一些单元测试来看看他们是否生效。首先需要在测试开始之前就插入一些测试用的数据：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">Transactional</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AclTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> PostService postService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Post p1 = <span class="keyword">new</span> Post(<span class="string">"post 1"</span>, <span class="string">"admin's post"</span>, <span class="string">"admin"</span>);</span><br><span class="line">        postService.savePost(p1);</span><br><span class="line">        Post p2 = <span class="keyword">new</span> Post(<span class="string">"post 2"</span>, <span class="string">"user1's post"</span>, <span class="string">"user1"</span>);</span><br><span class="line">        postService.savePost(p2);</span><br><span class="line">        Post p3 = <span class="keyword">new</span> Post(<span class="string">"post 3"</span>, <span class="string">"user2's post"</span>, <span class="string">"user2"</span>);</span><br><span class="line">        postService.savePost(p3);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来可以看看拥有管理员权限的用户是否能够对那些资源进行操作:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WithMockUser</span>(username = <span class="string">"admin"</span>, roles = &#123;<span class="string">"ADMIN"</span>, <span class="string">"USER"</span>&#125;)</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdminAccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    Assert.assertThat(postService.getPosts().size(), CoreMatchers.is(<span class="number">3</span>));</span><br><span class="line">    postService.deletePost(<span class="number">1L</span>);</span><br><span class="line">    Assert.assertThat(postService.getPosts.size(), CoreMatchers.is(<span class="number">2</span>));</span><br><span class="line">    postService.deletePost(<span class="number">2L</span>);</span><br><span class="line">    Assert.assertThat(postService.getPosts().size(), CoreMatchers.is(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来，我们看看只有普通用户权限的用户是不是只能看到自己创建的资源:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WithMockUser</span>(<span class="string">"user1"</span>)</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserGetPosts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Post&gt; posts = postService.getPosts();</span><br><span class="line">    Assert.assertThat(posts.size(), CoreMatchers.is(<span class="number">1</span>));</span><br><span class="line">    Assert.assertThat(posts.get(<span class="number">0</span>).getAuthor(), CoreMatchers.is(<span class="string">"user1"</span>));</span><br><span class="line">    Assert.assertThat(postService.getPost(<span class="number">2L</span>).get().getAuthor(), CoreMatchers.is(<span class="string">"user1"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后再看看如果查看不属于自己的资源是否会抛出<code>AccessDeniedException</code>异常:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WithMockUser</span>(<span class="string">"user2"</span>)</span><br><span class="line"><span class="meta">@Test</span>(expected = AccessDeniedException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">testUserCannotGetPost</span>() </span>&#123;</span><br><span class="line">    Assert.assertThat(postService.getPost(<span class="number">2L</span>).get().getAuthor(), CoreMatchers.is(<span class="string">"user1"</span>));</span><br><span class="line">    Assert.assertThat(postService.getPost(<span class="number">3L</span>).get().getAuthor(), CoreMatchers.is(<span class="string">"user2"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后看看能否删除属于自己的资源，以及强行删除他人资源会不会出错：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WithMockUser</span>(<span class="string">"user1"</span>)</span><br><span class="line"><span class="meta">@Test</span>(expected = AccessDeniedException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">testUserCannotDeletePost</span>() </span>&#123;</span><br><span class="line">    postService.deletePost(<span class="number">3L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WithMockUser</span>(<span class="string">"user2"</span>)</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserDeletePost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Assert.assertThat(postService.getPost(<span class="number">3L</span>).get().getAuthor(), CoreMatchers.is(<span class="string">"user2"</span>));</span><br><span class="line">    postService.deletePost(<span class="number">3L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ACL是一个比基于用户/角色权限管理还要更加细分细粒度的一种权限模型。Spring Security是通过一些数据库表来管理相关ACL的，<code>AclService</code>则是完成所有操作的核心。这部分并没有集成到spring-boot-starter-security中，可能是有点小众吧。<br>如果想看完整的代码可以参考<a href="https://github.com/51azxc/JavaBaseExample/tree/master/spring-boot-security-acl" rel="external nofollow noopener noreferrer" target="_blank">Github</a>。</p>
<blockquote>
<p>参考<br><a href="https://elim.iteye.com/blog/2269021" rel="external nofollow noopener noreferrer" target="_blank">Spring Security（19）——对Acl的支持</a><br><a href="https://www.bbsmax.com/A/amd0m016zg/" rel="external nofollow noopener noreferrer" target="_blank">Spring Security中的ACL</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot security with database</title>
    <url>/spring-boot-security-database/</url>
    <content><![CDATA[<p>在<code>Spring Boot</code>中加入<code>Spring Security</code>功能的话，官方给出了一个很好的例子。例子中给出的验证用户是放在内存中的，不过我想试试常规一点的方法，将用户存储到数据库中。</p>
<a id="more"></a>
<h3 id="前期配置"><a href="#前期配置" class="headerlink" title="前期配置"></a>前期配置</h3><p>首先到<a href="http://start.spring.io/" rel="external nofollow noopener noreferrer" target="_blank">Spring Initializr</a>中配置一个基本的项目模板，依赖中选择<code>Security</code>、<code>JPA</code>、<code>H2</code>、<code>Thymeleaf</code>等依赖，如果需要体验一下热部署的功能，也可以选择<code>DevTools</code>。下载好模板项目导入到IDE工作空间中，引入依赖。</p>
<p>接下来需要配置一下<code>application.properties</code>的一些属性:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line"># 设置thymeleaf不缓存，可以即时刷新Html页面</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line"># 设置H2存储数据的方式为内存存储，数据库名为test</span><br><span class="line">spring.datasource.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1</span><br><span class="line">spring.datasource.driver-class-name=org.h2.Driver</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line"># 配置访问数据库的链接</span><br><span class="line">spring.h2.console.path=/h2-console</span><br><span class="line"># 开启数据库访问连接</span><br><span class="line">spring.h2.console.enabled=true</span><br><span class="line"># 初始化数据库数据SQL文件</span><br><span class="line">spring.datasource.data=classpath:data.sql</span><br></pre></td></tr></table></figure></p>
<p>然后在<code>src/main/resources</code>目录下创建<code>data.sql</code>，这里主要给角色表创建了一些初始数据。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`role`</span>(<span class="string">`id`</span>, <span class="string">`role_name`</span>) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'ROLE_ADMIN'</span>),(<span class="number">2</span>, <span class="string">'ROLE_USER'</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="定义用户角色"><a href="#定义用户角色" class="headerlink" title="定义用户角色"></a>定义用户角色</h3><p>首先创建角色模型：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"role_name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后是用户模型：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@ManyToMany</span>(cascade = CascadeType.ALL, fetch = FetchType.EAGER)</span><br><span class="line">    <span class="meta">@JoinTable</span>(joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"user_id"</span>), </span><br><span class="line">               inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"role_id"</span>))</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来则是定义对应的数据访问层：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Role</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Role <span class="title">findByRoleName</span><span class="params">(String roleName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建服务层需要实现<code>security</code>的内置接口<code>UserDetailsService</code>，通过重写<code>loadUserByUsername</code>方法查找对应的用户:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleRepository roleRepository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BCryptPasswordEncoder bcryptEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String arg0)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userRepository.findByUsername(arg0);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"user not found"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;GrantedAuthority&gt; auths = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加用户权限</span></span><br><span class="line">        <span class="keyword">for</span> (Role role : user.getRoles()) &#123;</span><br><span class="line">            GrantedAuthority auth = <span class="keyword">new</span> SimpleGrantedAuthority(</span><br><span class="line">                    role.getRoleName());</span><br><span class="line">            auths.add(auth);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> org.springframework.security.core.userdetails.User(</span><br><span class="line">                user.getUsername(), user.getPassword(), auths);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user, String roleName)</span> </span>&#123;</span><br><span class="line">        user.setPassword(bcryptEncoder.encode(user.getPassword()));</span><br><span class="line">        Role role = roleRepository.findByRoleName(roleName);</span><br><span class="line">        Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;Role&gt;(Arrays.asList(role));</span><br><span class="line">        user.setRoles(roles);</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="配置WebSecuriy"><a href="#配置WebSecuriy" class="headerlink" title="配置WebSecuriy"></a>配置WebSecuriy</h3><p>先定义一个<code>WebMVC</code>的配置文件，用来映射<code>login.html</code>等页面到控制器中，这样就可以省去写对应的控制器：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/hello"</span>).setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/login"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后则是<code>WebSecurity</code>的配置文件:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">BCryptPasswordEncoder <span class="title">bcryptEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">UserDetailsService <span class="title">userService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.userDetailsService(userService())</span><br><span class="line">            .passwordEncoder(bcryptEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 为H2数据库控制台大开方便之门</span></span><br><span class="line">        http.csrf().disable()</span><br><span class="line">            .headers().frameOptions().disable()</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests().antMatchers(<span class="string">"/h2-console/**"</span>).permitAll();</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">"/"</span>, <span class="string">"/home"</span>).permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests().anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin().loginPage(<span class="string">"/login"</span>)</span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/hello"</span>).permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .logout().permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Autowired</span></span><br><span class="line"><span class="comment">    public void configureGlobal(AuthenticationManagerBuilder auth)</span></span><br><span class="line"><span class="comment">            throws Exception &#123;</span></span><br><span class="line"><span class="comment">        auth.inMemoryAuthentication()</span></span><br><span class="line"><span class="comment">            .withUser("user")</span></span><br><span class="line"><span class="comment">            .password("password")</span></span><br><span class="line"><span class="comment">            .roles("USER");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这里自定义一个<code>WebSecurity</code>配置类通过继承<code>WebSecurityConfigurerAdapter</code>来重写一些方法。<br>首先通过重写<code>configure(AuthenticationManagerBuilder auth)</code>方法来配置自定义的认证方式。通过配置<code>UserDetailsService</code>，系统会通过<code>loadUserByUsername</code>方法来查找对应的用户，并且指定了密码的编码模式为<code>BCryptPasswordEncoder</code>,保障用户安全。<br>然后通过重写<code>configure(HttpSecurity http)</code>方法来定义一些权限访问模式。主要是：</p>
<ul>
<li>通过<code>authorizeRequests</code>方法指定哪些URL需要被保护,<code>antMatchers</code>方法则表示需要匹配的URL。</li>
<li><code>permitAll</code>方法表示任何人都可以访问，而<code>authenticated</code>方法则表示需要认证才能访问。</li>
<li>通过<code>formLogin</code>方法指定用户需要登陆的操作。<code>loginPage</code>指向登陆页面，<code>defaultSuccessUrl</code>指定成功登陆后跳转的页面。</li>
<li><code>configureGlobal</code>方法则是配置一个存于内存中的授权用户，当然这里暂时用不到它。</li>
</ul>
<h3 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h3><p>使用<code>Thmeleaf</code>编写一些简单的页面，在<code>src/main/resources/templeate</code>创建登陆页面：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;param.error&#125;"</span>&gt;</span></span><br><span class="line">            Invalid username and password.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;param.logout&#125;"</span>&gt;</span></span><br><span class="line">            You have been logged out.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> User Name : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Sign In"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后是成功登陆后的跳转页面：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:inline</span>=<span class="string">"text"</span>&gt;</span>Hello [[$&#123;#httpServletRequest.remoteUser&#125;]]!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Sign Out"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果没有授权的用户直接访问<code>/hello</code>的话，就会被跳转到<code>/login</code>页面。当然，需要先存入一个用户才行。在应用启动的时候加入一个用户：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Application &#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ConfigurableApplicationContext context = SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">		UserService userService = (UserService)(context.getBean(UserService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">		User user = <span class="keyword">new</span> User();</span><br><span class="line">		user.setUsername(<span class="string">"root"</span>);</span><br><span class="line">		user.setPassword(<span class="string">"root"</span>);</span><br><span class="line">		userService.saveUser(user, <span class="string">"ROLE_ADMIN"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里我们通过调用<code>UserSerivce</code>中的方法加入一个用户，接下来就是运行一下项目查看成果了。</p>
<blockquote>
<p>参考<br><a href="https://spring.io/guides/gs/securing-web/" rel="external nofollow noopener noreferrer" target="_blank">Securing a Web Application</a><br><a href="http://blog.csdn.net/u012373815/article/details/54632176" rel="external nofollow noopener noreferrer" target="_blank">springboot+mybatis＋SpringSecurity 实现用户角色数据库管理</a><br><a href="https://medium.com/@gustavo.ponce.ch/spring-boot-spring-mvc-spring-security-mysql-a5d8545d837d" rel="external nofollow noopener noreferrer" target="_blank">Spring Boot + Spring MVC + Spring Security + MySQL</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Data JPA自定义查询</title>
    <url>/spring-data-jpa-query/</url>
    <content><![CDATA[<p><code>Spring Data Jpa</code>预定义的接口提供了一系列的便利方法，如果这些方法仍不能满足需求，可以自定义查询接口。</p>
<p>自定义查询接口要用<code>@NoRepositoryBean</code>注解修饰,然后编写一个类实现它<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QueryDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserBean</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">getUsersByCondition</span><span class="params">(UserBean bean,String orderBy, String sc, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countUsersByCondition</span><span class="params">(UserBean bean)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来是接口实现类:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryDaoImpl</span> <span class="keyword">implements</span> <span class="title">QueryDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> EntityManager em;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">getUsersByCondition</span><span class="params">(UserBean bean,String orderBy, String sc, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">	String hql = <span class="string">"from UserBean"</span>;</span><br><span class="line">		hql += getUserCriteria(bean, orderBy, sc);</span><br><span class="line">		Query q = em.createQuery(hql, UserBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		setUserPara(q, bean);</span><br><span class="line">		q.setFirstResult(page);</span><br><span class="line">		q.setMaxResults(size);</span><br><span class="line">		<span class="keyword">return</span> q.getResultList();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countUsersByCondition</span><span class="params">(UserBean bean)</span> </span>&#123;</span><br><span class="line">		String hql = <span class="string">"select count(1) from UserBean"</span>;</span><br><span class="line">		hql += getUserCriteria(bean, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">		Query q = em.createQuery(hql);</span><br><span class="line">		setUserPara(q, bean);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Long(q.getSingleResult().toString()).intValue();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">getUserCriteria</span><span class="params">(UserBean ub,String orderBy,String sc)</span></span>&#123;</span><br><span class="line">		String criteria = <span class="string">" where 1=1"</span>;</span><br><span class="line">		<span class="keyword">if</span>(!CommonUtil.nullToEmpty(ub.getUsername()).equals(<span class="string">""</span>))&#123;</span><br><span class="line">			criteria += <span class="string">" and username like :username"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!CommonUtil.nullToEmpty(orderBy).equals(<span class="string">""</span>) &amp;&amp; !CommonUtil.nullToEmpty(sc).equals(<span class="string">""</span>))&#123;</span><br><span class="line">			criteria += <span class="string">" order by "</span>+orderBy+<span class="string">" "</span>+sc;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> criteria;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUserPara</span><span class="params">(Query q,UserBean ub)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!CommonUtil.nullToEmpty(ub.getUsername()).equals(<span class="string">""</span>))&#123;</span><br><span class="line">			q.setParameter(<span class="string">"username"</span>, <span class="string">"%"</span>+ub.getUsername()+<span class="string">"%"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//接口自带的方法，无需全部实现，直接返回null即可</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">findAll</span><span class="params">(Sort sort)</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">findAll</span><span class="params">(Iterable&lt;Integer&gt; ids)</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>默认情况下查询出来的实体都是以类的形式返回，而且所有字段都会查询出来，如果需要返回部分字段，可以使用<code>@SqlResultSetMappings</code>注解。<br>首选在数据模型层的<code>Model</code>类上注解<code>@SqlResultSetMappings</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@SqlResultSetMappings</span>(value=&#123;</span><br><span class="line">  <span class="meta">@SqlResultSetMapping</span>(name=<span class="string">"show_users"</span>,classes=&#123;</span><br><span class="line">    <span class="meta">@ConstructorResult</span>(</span><br><span class="line">	  targetClass=com.framework.bean.UserBean<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">	  <span class="title">columns</span></span>=&#123;</span><br><span class="line">		<span class="meta">@ColumnResult</span>(name=<span class="string">"id"</span>),</span><br><span class="line">		<span class="meta">@ColumnResult</span>(name=<span class="string">"username"</span>),</span><br><span class="line">		<span class="meta">@ColumnResult</span>(name=<span class="string">"createDate"</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//设置其他的映射</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> String createDate;</span><br><span class="line">	<span class="keyword">private</span> String timestamp;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//必须提供对应的含有相同参数的构造函数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">UserBean</span><span class="params">(<span class="keyword">int</span> id, String username, String createDate)</span> </span>&#123; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在查询中可以这样使用<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	String sql = <span class="string">"select count(1) from users"</span>;</span><br><span class="line">	<span class="comment">//使用原生sql查询</span></span><br><span class="line">	Query q = em.createNativeQuery(sql);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Long(q.getSingleResult().toString()).intValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">getByCondition</span><span class="params">(UserBean bean,String orderBy,String sc, <span class="keyword">int</span> start, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">	String sql = <span class="string">"select * from users"</span>;</span><br><span class="line">	sql += getCriteria(bean);</span><br><span class="line">	<span class="comment">//使用原生sql查询</span></span><br><span class="line">	Query q = em.createNativeQuery(sql,<span class="string">"show_users"</span>);</span><br><span class="line">	setParameter(q, bean);</span><br><span class="line">	<span class="comment">//分页</span></span><br><span class="line">	q.setFirstResult(start);</span><br><span class="line">	q.setMaxResults(size);</span><br><span class="line">	Pageable pageable = <span class="keyword">new</span> PageRequest(start,size,sc.equals(<span class="string">"asc"</span>)?Direction.ASC:Direction.DESC,orderBy);</span><br><span class="line">	Page&lt;UserBean&gt; page = <span class="keyword">new</span> PageImpl&lt;UserBean&gt;(q.getResultList(), pageable, count());</span><br><span class="line">	<span class="keyword">return</span> page.getContent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>参考<br><a href="http://hejiantx.blog.163.com/blog/static/61867342013691040295/" rel="external nofollow noopener noreferrer" target="_blank">spring data jpa 自定义全局DAO</a><br><a href="http://okcomputer2009.iteye.com/blog/397465" rel="external nofollow noopener noreferrer" target="_blank">JPA本地查询(Native Query)的总结1</a><br><a href="http://xiaofan-0204.iteye.com/blog/1207958" rel="external nofollow noopener noreferrer" target="_blank">JPA查询实体部分字段</a><br><a href="http://stackoverflow.com/questions/10527124/how-to-query-data-via-spring-data-jpa-by-sort-and-pageable-both-out-of-box" rel="external nofollow noopener noreferrer" target="_blank">How to query data via Spring data JPA by sort and pageable both out of box？</a><br><a href="http://stackoverflow.com/questions/13012584/jpa-how-to-convert-a-native-query-result-set-to-pojo-class-collection" rel="external nofollow noopener noreferrer" target="_blank">JPA : How to convert a native query result set to POJO class collection</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Data JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Data JPA简单教程</title>
    <url>/spring-data-jpa/</url>
    <content><![CDATA[<p>Spring Data JPA 简单教程。</p>
<a id="more"></a>
<p>配置类:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(<span class="string">"com.framework.dao"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbc.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数据库连接配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_DRIVER=<span class="string">"db.driver"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_USERNAME=<span class="string">"db.user"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_PASSWORD=<span class="string">"db.pwd"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_URL=<span class="string">"db.url"</span>;</span><br><span class="line">	<span class="comment">//Hibernate配置</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HIBERNATE_DIALECT=<span class="string">"hibernate.dialect"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HIBERNATE_SHOW_SQL=<span class="string">"hibernate.show_sql"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HIBERNATE_FORMAT_SQL=<span class="string">"hibernate.format_sql"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HIBERNATE_HBM2DDL_AUTO=<span class="string">"hibernate.hbm2ddl.auto"</span>;</span><br><span class="line">	<span class="comment">//需要扫描的数据原型包</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGES_TO_SCAN=<span class="string">"com.framework.model"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> Environment env;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> DriverManagerDataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        <span class="comment">//读取配置文件中的信息</span></span><br><span class="line">		dataSource.setDriverClassName(env.getRequiredProperty(DATABASE_DRIVER));</span><br><span class="line">		dataSource.setUrl(env.getRequiredProperty(DATABASE_URL));</span><br><span class="line">		dataSource.setUsername(env.getRequiredProperty(DATABASE_USERNAME));</span><br><span class="line">		dataSource.setPassword(env.getRequiredProperty(DATABASE_PASSWORD));</span><br><span class="line">		<span class="keyword">return</span> dataSource;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">		LocalContainerEntityManagerFactoryBean factory = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</span><br><span class="line">		factory.setDataSource(dataSource());</span><br><span class="line">		factory.setPackagesToScan(PACKAGES_TO_SCAN);</span><br><span class="line">		factory.setJpaVendorAdapter(<span class="keyword">new</span> HibernateJpaVendorAdapter());</span><br><span class="line">		factory.setJpaProperties(hibernateProperties());</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> factory;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> JpaTransactionManager <span class="title">transactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">		JpaTransactionManager manager = <span class="keyword">new</span> JpaTransactionManager();</span><br><span class="line">		manager.setEntityManagerFactory(entityManagerFactory().getObject());</span><br><span class="line">		<span class="keyword">return</span> manager;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> Properties <span class="title">hibernateProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">		pros.setProperty(HIBERNATE_DIALECT, env.getRequiredProperty(HIBERNATE_DIALECT));</span><br><span class="line">		pros.setProperty(HIBERNATE_SHOW_SQL, env.getRequiredProperty(HIBERNATE_SHOW_SQL));</span><br><span class="line">		pros.setProperty(HIBERNATE_FORMAT_SQL, env.getRequiredProperty(HIBERNATE_FORMAT_SQL));</span><br><span class="line">		pros.setProperty(HIBERNATE_HBM2DDL_AUTO, env.getRequiredProperty(HIBERNATE_HBM2DDL_AUTO));</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> pros;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;DataConfig<span class="class">.<span class="keyword">class</span>&#125;)   //引入上面的数据配置类</span></span><br><span class="line"><span class="class">@<span class="title">ComponentScan</span>(<span class="title">basePackages</span></span>=&#123;<span class="string">"com.framework.controller, com.framework.service"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">		InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">		resolver.setPrefix(<span class="string">"/WEB-INF/page/"</span>);</span><br><span class="line">		resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">		<span class="keyword">return</span> resolver;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">		registry.addResourceHandler(<span class="string">"/resources/**"</span>).addResourceLocations(<span class="string">"/resources/"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.configureMessageConverters(converters);</span><br><span class="line">		GsonHttpMessageConverter converter = <span class="keyword">new</span> GsonHttpMessageConverter();</span><br><span class="line">		Gson gson = <span class="keyword">new</span> GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();</span><br><span class="line">		converter.setGson(gson);</span><br><span class="line">		converters.add(converter);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>数据原型<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> String createDate;</span><br><span class="line">	<span class="keyword">private</span> String timestamp;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//主键，自动生成</span></span><br><span class="line">	<span class="meta">@Id</span> <span class="meta">@GeneratedValue</span>(strategy=GenerationType.AUTO)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Column</span>(unique=<span class="keyword">true</span>,nullable=<span class="keyword">false</span>,length=<span class="number">50</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Column</span>(nullable=<span class="keyword">false</span>,length=<span class="number">50</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Column</span>(length=<span class="number">25</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCreateDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> createDate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//临时状态，不会存到数据库中</span></span><br><span class="line">	<span class="meta">@Transient</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> timestamp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>DAO</code>层(com.framework.dao)<br>使用了<code>SpringDataJpa</code>之后<code>DAO</code>层只要定义接口即可，无需再定义一个类实现它的方法，默认开头为<code>findBy</code>的方法都是查找数据的方法，后面还可以跟其他的关键字，比如<code>LessThan</code>,<code>Like</code>,<code>OrderBy</code>等等，与SQL关键字的功能一样。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserBean</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//以findBy开头的方法则是查询数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserBean <span class="title">findByUsernameAndPassword</span><span class="params">(String username,String password)</span></span>;</span><br><span class="line">    <span class="comment">//以countByd开头的方法则是统计数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">countByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">    <span class="comment">//@Query注解可以指定查询语句获取制定的返回数据</span></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select createDate from UserBean where username = :name"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">findByUsernameAndUsertype</span><span class="params">(@Param(<span class="string">"name"</span>)</span>String username)</span>;</span><br><span class="line">	<span class="comment">//nativeQuery可以使用原生SQL查询</span></span><br><span class="line">	<span class="meta">@Query</span>(value=<span class="string">"select * from user where createDate = :createDate "</span></span><br><span class="line">			+<span class="string">"order by convert(uname using gbk)"</span>,nativeQuery=<span class="keyword">true</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">findByUserStatus</span><span class="params">(@Param(<span class="string">"createDate"</span>)</span>String createDate)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>JpaRepository</code>是继承于<code>PagingAndSortingRepository</code>,此接口提供了<strong>分页查询</strong>和<strong>排序</strong>功能，而它又继承于<code>CrudRepository</code>，此接口则提供了最基本的<strong>增删查改</strong>功能。接口后面跟的泛型参数为数据模型类与主键的类型。</p>
<p>服务层(com.framework.service)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(propagation=Propagation.REQUIRED)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(UserBean user)</span> </span>&#123;</span><br><span class="line">		userDao.save(user);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		userDao.delete(id);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Transactional</span>(propagation=Propagation.NOT_SUPPORTED,readOnly=<span class="keyword">true</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.countByUsername(username) &gt; <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Transactional</span>(propagation=Propagation.NOT_SUPPORTED,readOnly=<span class="keyword">true</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">selectAll</span><span class="params">(String orderBy, String sc, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//这里的page是指第几页，而不是从多少开始，例如指定为1，则是显示 limit 1*size,size</span></span><br><span class="line">		Pageable pageable = <span class="keyword">new</span> PageRequest(page, size, sc.equals(<span class="string">"asc"</span>)?Direction.ASC:Direction.DESC, orderBy);</span><br><span class="line">		<span class="keyword">return</span> userDao.findAll(pageable).getContent();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在服务层，增/改操作皆为<code>save</code>，传入的类有<code>ID</code>则为修改，无则为添加</p>
<p>控制层(com.framework.controller)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/save"</span>, method=RequestMethod.POST)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(UserBean user)</span></span>&#123;</span><br><span class="line">		user.setCreateDate(CommonUtil.cloneDate(Calendar.DATE, <span class="number">0</span>));</span><br><span class="line">		userService.saveUser(user);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/del/&#123;id&#125;"</span>, method=RequestMethod.POST)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userDel</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">		userService.deleteUser(id);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/list"</span>,method=RequestMethod.GET,produces=<span class="string">"text/html;charset=UTF-8"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;UserBean&gt; <span class="title">list</span><span class="params">(@RequestParam String sortCol, @RequestParam String sortDir, @RequestParam <span class="keyword">int</span> start, @RequestParam <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">	    List&lt;UserBean&gt; users = userService.selectAll(sortCol, sortDir, start, length);</span><br><span class="line">	    <span class="comment">//在配置类中配置了包装json的转换器，因此直接返回对应集合即可</span></span><br><span class="line">	    <span class="keyword">return</span> users;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试一下:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebAppConfiguration</span></span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= &#123; TestConfig<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckFileInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/user/add"</span>)</span><br><span class="line">				.param(<span class="string">"username"</span>, <span class="string">"11"</span>)</span><br><span class="line">				.param(<span class="string">"password"</span>, <span class="string">"11"</span>))</span><br><span class="line">			.andDo(MockMvcResultHandlers.print())</span><br><span class="line">			.andReturn();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>参考<br><a href="https://www.javacodegeeks.com/2013/05/spring-jpa-data-hibernate-mysql-maven.html" rel="external nofollow noopener noreferrer" target="_blank">Spring JPA Data + Hibernate + MySQL + Maven</a><br><a href="http://www.cnblogs.com/liuyitian/p/4062748.html" rel="external nofollow noopener noreferrer" target="_blank">Spring Data Jpa 详解 （配置篇）</a><br><a href="http://mybar.iteye.com/blog/1863390" rel="external nofollow noopener noreferrer" target="_blank">spring-data-jpa 使用</a><br><a href="http://sishuok.com/forum/blogPost/list/7000.html" rel="external nofollow noopener noreferrer" target="_blank">深入浅出学Spring Data JPA</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Data JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC部分知识点整理</title>
    <url>/spring-mvc-problem/</url>
    <content><![CDATA[<h3 id="SpringMVC基于Servlet3无XML配置"><a href="#SpringMVC基于Servlet3无XML配置" class="headerlink" title="SpringMVC基于Servlet3无XML配置"></a>SpringMVC基于Servlet3无XML配置</h3><blockquote>
<p><a href="http://shmilyaw-hotmail-com.iteye.com/blog/2221134" rel="external nofollow noopener noreferrer" target="_blank">一种maven改造快速支持servlet3.1web工程的方法</a></p>
</blockquote>
<p>在<code>Servlet3</code>中，可以实现无<code>Web.xml</code>配置，需要一个类来实现<code>WebApplicationInitializer</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DISPATCHER_SERVLET_NAME = <span class="string">"dispatcher"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		AnnotationConfigWebApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">		<span class="comment">//配置类，装载了SpringMVC的配置</span></span><br><span class="line">		ctx.register(WebMvcConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		ctx.setServletContext(servletContext);</span><br><span class="line">		</span><br><span class="line">		registerHiddenHttpMethodFilter(servletContext);</span><br><span class="line">		</span><br><span class="line">		Dynamic servlet = servletContext.addServlet(DISPATCHER_SERVLET_NAME, <span class="keyword">new</span> DispatcherServlet(ctx));</span><br><span class="line">        servlet.addMapping(<span class="string">"/"</span>);</span><br><span class="line">        servlet.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerHiddenHttpMethodFilter</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">        FilterRegistration.Dynamic fr = servletContext</span><br><span class="line">                .addFilter(<span class="string">"hiddenHttpMethodFilter"</span>, HiddenHttpMethodFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        fr.addMappingForServletNames(</span><br><span class="line">                EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD),</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                DISPATCHER_SERVLET_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要让<code>Maven</code>项目支持<code>Servlet3</code>的配置，需要修改的地方就有点多了</p>
<ul>
<li><p>首先要让项目本身支持<code>Servlet3</code>，如果配置中的<code>Project Facets</code>不能做转换，可以到项目文件夹下找到一个隐藏文件夹<code>.settings</code>，然后找到<code>org.eclipse.wst.common.project.facet.core.xml</code>文件，打开并修改部分属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">faceted-project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fixed</span> <span class="attr">facet</span>=<span class="string">"wst.jsdt.web"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 改成合适的jdk版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"java"</span> <span class="attr">version</span>=<span class="string">"1.7"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"wst.jsdt.web"</span> <span class="attr">version</span>=<span class="string">"1.0"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 改成版本为3.1，即支持Servlet3.1的配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"jst.web"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">faceted-project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在项目文件<code>pom.xml</code>中的<code>&lt;build&gt;</code>节点下,<code>&lt;finalName&gt;</code>节点后添加如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">warSourceDirectory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">warSourceDirectory</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样构建出来的项目就可以支持无XML风格的<code>Servlet3</code>项目了</p>
<hr>
<h3 id="Spring-MVC-静态资源报错"><a href="#Spring-MVC-静态资源报错" class="headerlink" title="Spring MVC 静态资源报错"></a>Spring MVC 静态资源报错</h3><blockquote>
<p><a href="http://fruzenshtein.com/spring-mvc-resources/" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC: Resources</a><br><a href="http://stackoverflow.com/questions/22013074/spring-mvc-with-java-based-config-404-not-found-for-static-resources" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC with Java based config - 404 not found for static resources</a><br><a href="http://blog.csdn.net/this_super/article/details/7884383" rel="external nofollow noopener noreferrer" target="_blank">spring mvc 静态资源 404问题</a></p>
</blockquote>
<p>在配置类中配置静态资源的访问路径:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">		InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">		resolver.setPrefix(<span class="string">"/WEB-INF/page/"</span>);</span><br><span class="line">		resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">		<span class="keyword">return</span> resolver;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定resources文件夹下任意目录,子目录的资源文件配置访问路径到resources</span></span><br><span class="line">		registry.addResourceHandler(<span class="string">"/resources/**"</span>).addResourceLocations(<span class="string">"/resources/"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果页面是在项目的主目录下则可以使用如下路径访问:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"resources/css/main.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果是在子集目录下,例如<code>http://localhost:8080/webtest1/index.html</code>，则需要添加一个层次路径:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../resources/css/main.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>也可使用<code>&lt;c:url&gt;</code>来引入静态文件:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;c:url value='/resources/js/jquery.js' /&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Spring-引入resources文件夹内的资源文件"><a href="#Spring-引入resources文件夹内的资源文件" class="headerlink" title="Spring 引入resources文件夹内的资源文件"></a>Spring 引入resources文件夹内的资源文件</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/7184186/java-maven-web-app-getting-full-file-path-for-file-in-resources-folder" rel="external nofollow noopener noreferrer" target="_blank">Java (maven web app), getting full file path for file in resources folder?</a></p>
</blockquote>
<p>对于<code>Maven</code>或者<code>Gradle</code>项目架构，资源文件一般放置于<code>src/main/resources</code>文件夹中，如果需要读取到这个文件夹下的资源文件，可以借助<code>org.springframework.core.io.Resource</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取到resources下的config.properties文件</span></span><br><span class="line">Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"config.properties"</span>);</span><br><span class="line">File file = resource.getFile();</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Spring-访问路径-PathVariable包含”-”号"><a href="#Spring-访问路径-PathVariable包含”-”号" class="headerlink" title="Spring 访问路径@PathVariable包含”.”号"></a>Spring 访问路径@PathVariable包含”.”号</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/16332092/spring-mvc-pathvariable-with-dot-is-getting-truncated" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC @PathVariable with dot (.) is getting truncated</a></p>
</blockquote>
<p>默认情况下，对于<code>@PathVariable</code>注解获得的路径变量会把特殊符号给去掉，如果想要包含特殊符号(如”.”号)，需要使用正则表达式:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/files/&#123;filename:.+&#125;"</span>, produces=<span class="string">"application/json; charset=UTF-8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkFileInfo</span><span class="params">(@PathVariable String filename)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//例如filename = test1.xls</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="使用Gson作为Spring解析封装json的工具包"><a href="#使用Gson作为Spring解析封装json的工具包" class="headerlink" title="使用Gson作为Spring解析封装json的工具包"></a>使用Gson作为Spring解析封装json的工具包</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/31335146/configure-gson-in-spring-before-using-gsonhttpmessageconverter" rel="external nofollow noopener noreferrer" target="_blank">Configure Gson in Spring before using GsonHttpMessageConverter</a></p>
</blockquote>
<p>想要替换<code>Gson</code>包为<strong>Spring</strong>解析<code>json</code>的工具包，需要在配置类中重写对应方法：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.configureMessageConverters(converters);</span><br><span class="line">		GsonHttpMessageConverter converter = <span class="keyword">new</span> GsonHttpMessageConverter();</span><br><span class="line">		Gson gson = <span class="keyword">new</span> GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();</span><br><span class="line">		converter.setGson(gson);</span><br><span class="line">		converters.add(converter);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来在使用了<code>@ResponseBody</code>注解的方法，或者直接标注了<code>@RestController</code>控制类中有返回数据的方法将全部通过<code>Gson</code>来封装成<code>json</code>格式的数据。</p>
<hr>
<h3 id="Spring-MVC捕获异常"><a href="#Spring-MVC捕获异常" class="headerlink" title="Spring MVC捕获异常"></a>Spring MVC捕获异常</h3><blockquote>
<p><a href="http://ningandjiao.iteye.com/blog/1995270" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC中的异常处理</a></p>
</blockquote>
<p>首先创建一个异常类:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceNotFoundException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ResourceNotFoundException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后建立一个异常处理类:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WopiExceptionHandler</span> </span>&#123;</span><br><span class="line">	<span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</span><br><span class="line">	<span class="meta">@ExceptionHandler</span>(ResourceNotFoundException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	@<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">	<span class="title">public</span> <span class="title">String</span> <span class="title">handlerResourceNotFound</span>(<span class="title">ResourceNotFoundException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ex.getMessage();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来在对应的控制类方法中抛出异常:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/files/&#123;fileId&#125;"</span>, method=RequestMethod.GET, produces=<span class="string">"application/json; charset=UTF-8"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WopiFileInfo <span class="title">checkFileInfo</span><span class="params">(@PathVariable String fileId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	String filePath = wopiService.getFilePath(fileId);</span><br><span class="line">	<span class="keyword">if</span> (CommonUtil.isEmptyString(filePath)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ResourceNotFoundException(<span class="string">"Resource not found/user unauthorized"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试一下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">WebAppConfiguration</span></span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= &#123; TestConfig<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckFileInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		mockMvc.perform(get(<span class="string">"/files/&#123;fileId&#125;"</span>, <span class="string">"2"</span>))</span><br><span class="line">			.andExpect(status().isNotFound())</span><br><span class="line">			.andExpect(content().string(<span class="string">"\"Resource not found/user unauthorized\""</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>mvc</tag>
        <tag>gson</tag>
        <tag>Exception</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring WebFlux Security与JWT整合</title>
    <url>/spring-webflux-security-jwt/</url>
    <content><![CDATA[<p>现在的Web项目基本上都是前后端分离，后端专注于提供API接口即可，使用Spring Boot来开发RESTful API十分方便，如果需要保护这些API接口搭配Spring全家桶套餐中的Spring Security算是不错的选择。之前在Spring官网看Spring Security相关的示例是包含了网页访问相关的内容，并不是只提供接口访问的Web后端。接下来我就试试用JWT来保护这些后端提供的接口。</p>
<a id="more"></a>
<blockquote>
<p><code>JSON Web Token(JWT)</code>是一个基于JSON的开放标准<a href="https://tools.ietf.org/html/rfc7519" rel="external nofollow noopener noreferrer" target="_blank">（RFC 7519）</a>，用于创建声明一些声明的访问令牌。<a href="https://en.wikipedia.org/wiki/JSON_Web_Token" rel="external nofollow noopener noreferrer" target="_blank">wiki</a></p>
</blockquote>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>首先得去<a href="https://start.spring.io/" rel="external nofollow noopener noreferrer" target="_blank">Spring Initializr</a>获取需要的依赖。这里选择了<code>Reactive Web</code>,<code>Security</code>,<code>JPA</code>及<code>H2</code>。使用的Spring Boot版本是<code>2.1.1</code>。如果使用Maven,那对应的pom.xml部分配置如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>主要使用了<code>Spring WebFlux</code>及<code>Spring Security</code>相关组件，数据库则是使用<code>H2 Database</code>。第三方的则是<code>jjwt</code>，用它来生成及解析<code>JSON web token</code>。</p>
<p>接下来是<code>application.yml</code>，用惯了<code>application.properties</code>，这次试试这个新的配置文件:<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:mem:test;DB_CLOSE_DELAY=-1</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>这里主要指定了数据库的连接配置及端口。</p>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>既然是基于经典的“用户-角色”权限管理模型，那数据层的实体类就必须要有一个用户及一个角色类。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RoleType &#123;</span><br><span class="line">    ROLE_ADMIN,</span><br><span class="line">    ROLE_USER;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RoleType <span class="title">fromString</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"ROLE_ADMIN"</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ROLE_ADMIN;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"ROLE_USER"</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ROLE_USER;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">    <span class="meta">@Column</span>(length = <span class="number">20</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> RoleType roleType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(RoleType roleType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleType = roleType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter/setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>角色实体类中的字段为<code>id</code>及<code>roleType</code>。<code>id</code>则是在数据库中的主键，而<code>roleType</code>则是用来指定一些定义好的角色名称。它通过<code>@Enumerated</code>来使用枚举类型字段，而<code>EnumType.STRING</code>表示插入到数据库的数据为枚举的名称而不是默认的数字类型。<br>接下来需要做的是一个用户实体类，用户实体类包含了必不可少的<code>id</code>,<code>username</code>,及<code>password</code>字段外，还需要有一个<code>roles</code>用来关联对应的角色实体类<code>Role</code>。这里为了后续查找更加方便就直接实现了<code>UserDetails</code>接口：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties</span>(</span><br><span class="line">        value = &#123;<span class="string">"password"</span>, <span class="string">"roles"</span>, <span class="string">"hibernateLazyInitializer"</span>, <span class="string">"handler"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">50</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span>(cascade = &#123; CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH &#125;, fetch = FetchType.LAZY)</span><br><span class="line">    <span class="meta">@JoinTable</span>(joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"user_id"</span>), inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"role_id"</span>))</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> roles.stream()</span><br><span class="line">                .map(role -&gt; <span class="keyword">new</span> SimpleGrantedAuthority(role.getRoleType().name()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter/setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>数据实体都有了，接下来自然是数据仓库层了。得益于<code>Spring boot JPA</code>强大的封装能力，我们可以用很少的代码就完成大部分的工作：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Role</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Optional&lt;Role&gt; <span class="title">findByRoleType</span><span class="params">(RoleType roleType)</span></span>;</span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"select * from role r join user_roles ur on r.id = ur.role_id "</span> +</span><br><span class="line">            <span class="string">"join user u on ur.user_id = u.id where u.username = ?"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function">Set&lt;Role&gt; <span class="title">findByUsers_username</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>只需要集成<code>CrudRepository</code>接口，就能拥有<code>CRUD</code>一系列初始的方法。如果需要自定义查询方法，只需要按照<code>findBy&lt;Properties&gt;</code>的格式就能实现一个基本的查找方法。如果想要实现复杂的查询，可以使用<code>@Query</code>注解来实现。</p>
<h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><p>要对用户身份进行验证，自然需要通过某种方式来加载用户信息。首先需要编写一个实现<code>ReactiveUserDetailsService</code>接口的子类。它类似于WebFlux中的<code>UserDetailsService</code>,里边需要实现的方法是<code>findByUsername</code>,对应着<code>UserDetailsService</code>里的<code>loadUserByUsername</code>方法。这个方法可以定义从指定的数据仓库中获取用户信息。由于这里是将用户数据存入到数据库中，自然需要用到上边定义的<code>UserRepository</code>来查找:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">ReactiveUserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RoleRepository roleRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserRepository userRepository,</span></span></span><br><span class="line"><span class="function"><span class="params">                       RoleRepository roleRepository,</span></span></span><br><span class="line"><span class="function"><span class="params">                       PasswordEncoder passwordEncoder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userRepository = userRepository;</span><br><span class="line">        <span class="keyword">this</span>.roleRepository = roleRepository;</span><br><span class="line">        <span class="keyword">this</span>.passwordEncoder = passwordEncoder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;UserDetails&gt; <span class="title">findByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        Set&lt;Role&gt; roles = roleRepository.findByUsers_username(username);</span><br><span class="line">        Optional&lt;User&gt; user = userRepository.findByUsername(username);</span><br><span class="line">        user.ifPresent(u -&gt; u.setRoles(roles));</span><br><span class="line">        <span class="keyword">return</span> Mono.justOrEmpty(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">saveUser</span><span class="params">(User user, List&lt;String&gt; roleTypes)</span> </span>&#123;</span><br><span class="line">        user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">        Set&lt;Role&gt; roles = roleTypes.stream().map(RoleType::fromString)</span><br><span class="line">                .map(roleType -&gt; roleRepository.findByRoleType(roleType).get())</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">        user.setRoles(roles);</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveRoles</span><span class="params">(List&lt;String&gt; roleTypes)</span> </span>&#123;</span><br><span class="line">        Set&lt;Role&gt; roles = roleTypes.stream()</span><br><span class="line">                .map(RoleType::fromString)</span><br><span class="line">                .map(Role::<span class="keyword">new</span>)</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">        roleRepository.saveAll(roles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">existsUser</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.existsByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">getUsernameById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.justOrEmpty(userRepository.findUsernameById(id));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里边还有些其他的方法，都是根据对用户实体类的一些操作。最主要的是<code>findByUsername</code>方法，它通过<code>UserRepository</code>查找到对应的用户，并且返回一个<code>Mono&lt;User&gt;</code>对象。<br>接下来需要通过<code>jjwt</code>这个库来生成及解析jwt密钥：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SECRET_KEY = <span class="string">"HelloWorld"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> EXPIRATION_DAY = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PAYLOAD_ROLES = <span class="string">"roles"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(Authentication auth)</span> </span>&#123;</span><br><span class="line">        String subject = String.valueOf(auth.getPrincipal());</span><br><span class="line">        List&lt;String&gt; roles = auth.getAuthorities().stream()</span><br><span class="line">                .map(GrantedAuthority::getAuthority).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        LocalDate localDate = LocalDate.now();</span><br><span class="line">        Date now = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());</span><br><span class="line">        LocalDate expiredLocalDate = localDate.plusDays(EXPIRATION_DAY);</span><br><span class="line">        Date expiredDate = Date.from(expiredLocalDate.atStartOfDay(ZoneId.systemDefault()).toInstant());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .claim(PAYLOAD_ROLES, roles)</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .setExpiration(expiredDate)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">decode</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"Expired token"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"Unsupported token"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"Malformed token"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureException | IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"Invalid token"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; roles = (List&lt;String&gt;)claims.get(PAYLOAD_ROLES, List<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = roles.stream()</span><br><span class="line">                .map(SimpleGrantedAuthority::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(claims.getSubject(), token, authorities);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先先定义了一些需要用到的常量，例如密钥，过期天数及需要传递的一些重要信息。<code>encode</code>方法是将<code>Authentication</code>中的认证用户部分信息编译成一个jwt，而<code>decode</code>方法自然是从jwt中解析出对应的信息，并包装成一个<code>UsernamePasswordAuthenticationToken</code>以供后续调用。</p>
<blockquote>
<p>对于生成的json web token，可以使用<a href="https://jwt.io/" rel="external nofollow noopener noreferrer" target="_blank">jwt.io</a>来解析一下看看内部存储结构是怎么样的。</p>
</blockquote>
<p>现在获取用户信息及编码/解码jwt的接口都有了，接下来就应该通过<code>Spring Security</code>组件将它们整合在一起了。</p>
<h3 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h3><p>首先需要写一个<code>AuthenticationManager</code>用来认证用户。它实现了<code>ReactiveAuthenticationManager</code>接口，这个接口里需要实现的方法是<code>authenticate</code>方法，在这个方法里来认证一个用户是否有效:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenAuthenticationManager</span> <span class="keyword">implements</span> <span class="title">ReactiveAuthenticationManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenAuthenticationManager</span><span class="params">(UserService userService, PasswordEncoder passwordEncoder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passwordEncoder = passwordEncoder;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Authentication&gt; <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (authentication.isAuthenticated()) &#123; <span class="keyword">return</span> Mono.just(authentication); &#125;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(authentication)</span><br><span class="line">                .switchIfEmpty(Mono.error(<span class="keyword">new</span> BadCredentialsException(<span class="string">"Bad Credentials"</span>)))</span><br><span class="line">                .map(authenticationToken -&gt; authenticationToken.getPrincipal().toString())</span><br><span class="line">                .flatMap(userService::findByUsername)</span><br><span class="line">                .switchIfEmpty(Mono.error(<span class="keyword">new</span> UsernameNotFoundException(<span class="string">"User not found"</span>)))</span><br><span class="line">                .filter(u -&gt; passwordEncoder.matches(authentication.getCredentials().toString(), u.getPassword()))</span><br><span class="line">                .switchIfEmpty(Mono.error(<span class="keyword">new</span> BadCredentialsException(<span class="string">"Invalid username or password"</span>)))</span><br><span class="line">                .cast(User<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">map</span>(<span class="title">u</span> -&gt; <span class="title">new</span> <span class="title">UsernamePasswordAuthenticationToken</span>(<span class="title">u</span>.<span class="title">getId</span>(), <span class="title">null</span>, <span class="title">u</span>.<span class="title">getAuthorities</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在return那条挺长的语句里，通过传入的<code>authentication</code>获取指定的用户凭证，然后通过<code>UserService</code>里的<code>findByUsername</code>找到指定用户，并且判断用户密码是不是一致。如果成功最终封装成一个<code>UsernamePasswordAuthenticationToken</code>。这里将用户ID作为用户的认证信息，用户的权限角色作为传递的权限组。</p>
<p>定义好了<code>AuthenticationManager</code>之后，自然需要指定在哪里调用它。接下来是需要是实现一个<code>ServerSecurityContextRepository</code>接口的类来调用它：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenSecurityContextRepository</span> <span class="keyword">implements</span> <span class="title">ServerSecurityContextRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenProvider tokenProvider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenAuthenticationManager tokenAuthenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenSecurityContextRepository</span><span class="params">(TokenProvider tokenProvider, TokenAuthenticationManager tokenAuthenticationManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tokenProvider = tokenProvider;</span><br><span class="line">        <span class="keyword">this</span>.tokenAuthenticationManager = tokenAuthenticationManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">save</span><span class="params">(ServerWebExchange exchange, SecurityContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.defer(() -&gt; Mono.error(<span class="keyword">new</span> UnsupportedOperationException(<span class="string">"No save method"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;SecurityContext&gt; <span class="title">load</span><span class="params">(ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.justOrEmpty(exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION))</span><br><span class="line">                .filter(s -&gt; s.length() &gt; <span class="number">7</span> &amp;&amp; s.startsWith(<span class="string">"Bearer "</span>))</span><br><span class="line">                .map(s -&gt; tokenProvider.decode(s.substring(<span class="number">7</span>)))</span><br><span class="line">                .onErrorResume(Mono::error)</span><br><span class="line">                .flatMap(auth -&gt; tokenAuthenticationManager.authenticate(auth))</span><br><span class="line">                .switchIfEmpty(Mono.error(<span class="keyword">new</span> BadCredentialsException(<span class="string">"Invalid Credentials"</span>)))</span><br><span class="line">                .map(SecurityContextImpl::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里需要实现的是一个<code>sateless</code>风格的后端服务，因此<code>save</code>方法就不需要使用到了。主要实现的是<code>load</code>方法，通过请求头部的<code>Authorization</code>属性获取对应的<code>Bearer Token</code>，然后利用上述的<code>TokenProvider</code>来解码，得到的<code>Authentication</code>通过<code>AuthencationManager</code>来验证用户是否成功验证。如果成功就返回一个<code>SecurityContextImpl</code>最终可以存入到<code>SecurityContextHolder</code>中。</p>
<p>最终需要配置的自然是<code>WebFlux Security</code>配置类了：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableReactiveMethodSecurity</span></span><br><span class="line"><span class="meta">@EnableWebFluxSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RoleRepository roleRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenProvider tokenProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebSecurityConfig</span><span class="params">(UserRepository userRepository,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RoleRepository roleRepository,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TokenProvider tokenProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userRepository = userRepository;</span><br><span class="line">        <span class="keyword">this</span>.roleRepository = roleRepository;</span><br><span class="line">        <span class="keyword">this</span>.tokenProvider = tokenProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityWebFilterChain <span class="title">securityWebFilterChain</span><span class="params">(ServerHttpSecurity httpSecurity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> httpSecurity</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .logout().disable()</span><br><span class="line">                .cors()</span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .accessDeniedHandler((exchange, e) -&gt; Mono.error(e))</span><br><span class="line">                .and()</span><br><span class="line">                .authenticationManager(tokenAuthenticationManager())</span><br><span class="line">                .securityContextRepository(tokenSecurityContextRepository())</span><br><span class="line">                .authorizeExchange()</span><br><span class="line">                .pathMatchers(<span class="string">"/login"</span>,<span class="string">"/register"</span>,<span class="string">"/favicon.ico"</span>).permitAll()</span><br><span class="line">                .pathMatchers(HttpMethod.GET, <span class="string">"/"</span>).permitAll()</span><br><span class="line">                .pathMatchers(<span class="string">"/admin"</span>).hasRole(<span class="string">"ADMIN"</span>)</span><br><span class="line">                .pathMatchers(<span class="string">"/user"</span>).hasRole(<span class="string">"USER"</span>)</span><br><span class="line">                .anyExchange().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService(userRepository, roleRepository, passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenAuthenticationManager <span class="title">tokenAuthenticationManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TokenAuthenticationManager(userService(), passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenSecurityContextRepository <span class="title">tokenSecurityContextRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TokenSecurityContextRepository(tokenProvider, tokenAuthenticationManager());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最开头的那些<code>@Enable...</code>注解看名字就知道是什么功能了。整个配置类中最关键的自然是<code>securityWebFilterChain</code>方法。根据那些调用链的方法名字其实都挺好理解里边的方法作用。首先<code>exceptionHandling</code>指定了异常发生的情况下需要怎么处理。这里就指定了一种，及<code>accessDeniedHandler</code>，在用户权限不够的情况下该怎么办。然后需要将我们自定义的<code>authenticationManager</code>及<code>securityContextRepository</code>组合在一起愉快的工作。接下来的<code>.authorizeExchange()</code>当然是用来配置请求级别的安全性的。<code>.pathMatchers().permitAll()</code>用来配置哪些路径是给所有用户开放访问的，包括匿名用户。<code>.pathMatchers().hasRole()</code>则指定了这些路径必须要有指定的角色用户才能够访问。<code>.anyExchange()</code>表示匹配以上任何请求，而<code>.authenticated()</code>则将匹配的请求仅限于经过身份验证的用户。</p>
<blockquote>
<p><code>.hasRole()</code>方法是会将传入的参数加上”ROLE_”前缀的，如果自定义的角色名不是这个样式的可以使用<code>.hasAuthority()</code>方法</p>
</blockquote>
<h3 id="完成功能接口"><a href="#完成功能接口" class="headerlink" title="完成功能接口"></a>完成功能接口</h3><p>现在基本的配置都已经完成了，就该来写一些接口调用那些服务了。首先还是得写一些简单的数据传输载体类:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRequest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span> <span class="meta">@Size</span>(min = <span class="number">3</span>, max = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getter/setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个是用来给用户注册/登陆的。然后需要定义一个登陆成功后返回的载体:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getter/setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>很简单，只是返回一个可用的token而已。<br>接下来应该是通过传统的<code>@Controller</code>来提供对外访问接口。不过这里用到的是<code>WebFlux</code>，索性就将函数式编程风格弄到底吧。直接用<code>@Service</code>来操作:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenAuthenticationManager tokenAuthenticationManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Validator validator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenProvider tokenProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserHandler</span><span class="params">(UserService userService,</span></span></span><br><span class="line"><span class="function"><span class="params">                       TokenAuthenticationManager tokenAuthenticationManager,</span></span></span><br><span class="line"><span class="function"><span class="params">                       Validator validator, TokenProvider tokenProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">        <span class="keyword">this</span>.tokenAuthenticationManager = tokenAuthenticationManager;</span><br><span class="line">        <span class="keyword">this</span>.validator = validator;</span><br><span class="line">        <span class="keyword">this</span>.tokenProvider = tokenProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先是给提供给用户注册的方法：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">signUp</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request.bodyToMono(AuthRequest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">filter</span>(<span class="title">authRequest</span> -&gt; <span class="title">validator</span>.<span class="title">validate</span>(<span class="title">authRequest</span>).<span class="title">isEmpty</span>())</span></span><br><span class="line">            .switchIfEmpty(Mono.error(new BadCredentialsException("Invalid username or password")))</span><br><span class="line">            .filter(authRequest -&gt; !userService.existsUser(authRequest.getUsername()))</span><br><span class="line">            .switchIfEmpty(Mono.error(<span class="keyword">new</span> UserExistsException(<span class="string">"Username Exists"</span>)))</span><br><span class="line">            .map(authRequest -&gt; <span class="keyword">new</span> User(authRequest.getUsername(), authRequest.getPassword()))</span><br><span class="line">            .doOnNext(user -&gt; userService.saveUser(user, Arrays.asList(<span class="string">"ROLE_USER"</span>)))</span><br><span class="line">            .flatMap(user -&gt; ServerResponse.ok()</span><br><span class="line">                    .body(Mono.just(<span class="string">"success"</span>), String<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">switchIfEmpty</span>(<span class="title">ServerResponse</span>.<span class="title">badRequest</span>()</span></span><br><span class="line">                            .body(Mono.just("failed"), String.class)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过传入的数据判断一下用户名是否存在，如果不存在就通过相关Service方法存入用户信息到数据库，并且将相关信息返回给前端。<br>接下来是登陆的方法：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">signIn</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request.bodyToMono(AuthRequest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">filter</span>(<span class="title">authRequest</span> -&gt; <span class="title">validator</span>.<span class="title">validate</span>(<span class="title">authRequest</span>).<span class="title">isEmpty</span>())</span></span><br><span class="line">            .switchIfEmpty(Mono.error(new BadCredentialsException("Invalid username or password")))</span><br><span class="line">            .flatMap(authRequest -&gt; &#123;</span><br><span class="line">                Authentication authentication= <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</span><br><span class="line">                        authRequest.getUsername(), authRequest.getPassword());</span><br><span class="line">                <span class="keyword">return</span> tokenAuthenticationManager.authenticate(authentication);</span><br><span class="line">            &#125;)</span><br><span class="line">            .doOnError(e -&gt; <span class="keyword">new</span> BadCredentialsException(<span class="string">"Invalid username or password"</span>))</span><br><span class="line">            .doOnNext(authentication -&gt; ReactiveSecurityContextHolder.withAuthentication(authentication))</span><br><span class="line">            .map(auth -&gt; <span class="keyword">new</span> AuthResponse(tokenProvider.encode(auth)))</span><br><span class="line">            .flatMap(authResponse -&gt;</span><br><span class="line">                    ServerResponse.ok().contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                            .body(BodyInserters.fromObject(authResponse))</span><br><span class="line">                            .switchIfEmpty(ServerResponse.badRequest().build()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过<code>AuthenticationManager</code>来验证传入的用户名/密码是否正确，成功之后就通过<code>ReactiveSecurityContextHolder.withAuthentication</code>将验证信息存入到<code>SecurityContext</code>中。最后通过<code>TokenProvider</code>生成对应的token返回给前端。<br>接下来就是一些对应权限的方法了：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">helloPage</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ServerResponse.ok().body(Mono.just(<span class="string">"Hello World!"</span>), String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">adminPage</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ReactiveSecurityContextHolder.getContext()</span><br><span class="line">            .flatMap(<span class="keyword">this</span>::getCurrentUsername)</span><br><span class="line">            .flatMap(username -&gt; ServerResponse.ok()</span><br><span class="line">                    .body(BodyInserters.fromObject(<span class="string">"Hello admin: "</span> + username)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">userPage</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ReactiveSecurityContextHolder.getContext()</span><br><span class="line">            .flatMap(<span class="keyword">this</span>::getCurrentUsername)</span><br><span class="line">            .flatMap(username -&gt; ServerResponse.ok()</span><br><span class="line">                    .body(Mono.just(<span class="string">"Hello user: "</span> + username), String<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Mono&lt;String&gt; <span class="title">getCurrentUsername</span><span class="params">(SecurityContext securityContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.justOrEmpty(securityContext.getAuthentication()).filter(Objects::nonNull)</span><br><span class="line">            .map(authentication -&gt; authentication.getPrincipal()).filter(Objects::nonNull)</span><br><span class="line">            .map(o -&gt; Long.valueOf(o.toString()))</span><br><span class="line">            .flatMap(userService::getUsernameById)</span><br><span class="line">            .switchIfEmpty(Mono.error(<span class="keyword">new</span> BadCredentialsException(<span class="string">"Current user not exists"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>分别对应着不同用户权限返回的不同信息。<br>上述注册功能中使用了一个自定义的异常类<code>UserExistsException</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserExistsException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserExistsException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Throwable <span class="title">fillInStackTrace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后需要在配置类中将这些方法与对应的访问路径关联起来：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">routerFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RouterFunctions.route(GET(<span class="string">"/"</span>), userHandler::helloPage)</span><br><span class="line">            .andRoute(POST(<span class="string">"/login"</span>)</span><br><span class="line">                    .and(contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                    .and(accept(MediaType.APPLICATION_JSON))), userHandler::signIn)</span><br><span class="line">            .andRoute(POST(<span class="string">"/register"</span>)</span><br><span class="line">                    .and(contentType(MediaType.APPLICATION_JSON)), userHandler::signUp)</span><br><span class="line">            .andRoute(GET(<span class="string">"/admin"</span>), userHandler::adminPage)</span><br><span class="line">            .andRoute(GET(<span class="string">"/user"</span>), userHandler::userPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="测试功能接口"><a href="#测试功能接口" class="headerlink" title="测试功能接口"></a>测试功能接口</h3><p>现在一切都准备好了，只待运行应用了。不过这里用的是内存数据库，所以一开始还是得在运行的时候加入一些初始数据的:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        UserService userService = context.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;String&gt; roles = Arrays.asList(<span class="string">"ROLE_ADMIN"</span>, <span class="string">"ROLE_USER"</span>);</span><br><span class="line">        userService.saveRoles(roles);</span><br><span class="line">        userService.saveUser(<span class="keyword">new</span> User(<span class="string">"admin"</span>, <span class="string">"admin"</span>), roles);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这里加入了<code>ROLE_ADMIN</code>及<code>ROLE_USER</code>两个角色，分别对应着管理员/普通用户的权限，然后生成了一个管理员用户。<br>如无意外，一般都能够正常运行。接下来就需要测试一下这些接口是否能够正常运作了。测试RESTful API接口的话，如果想要更方便的体验可以使用postman。这里使用curl来测试，毕竟是简单的体验。</p>
<p>首先先看看对所有用户都开放的主页：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:8088</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></p>
<p>接下来试试一个受保护的接口:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:8088/admin</span><br><span class="line">&#123;<span class="string">"status"</span>:<span class="string">"UNAUTHORIZED"</span>,<span class="string">"localDateTime"</span>:<span class="string">"2019-03-01 16:15:28"</span>,<span class="string">"message"</span>:<span class="string">"Invalid Credentials"</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到匿名用户是没有权限访问这个接口的，接下来就试试初始的用户登陆后的访问结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">"Content-Type: application/json"</span> -X POST -d <span class="string">'&#123;"username":"admin", "password":"admin"&#125;'</span> http://localhost:8088/login</span><br><span class="line">&#123;<span class="string">"token"</span>:<span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZXMiOlsiUk9MRV9VU0VSIiwiUk9MRV9BRE1JTiJdLCJpYXQiOjE1NTEzOTg0MDAsImV4cCI6MTU1MjAwMzIwMH0.1lqpT4lGsgQTfyl4i15jMemeHultjE27xLxws2YFsro"</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来将这个返回的token放到头部再访问上边的接口:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">"Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZXMiOlsiUk9MRV9VU0VSIiwiUk9MRV9BRE1JTiJdLCJpY</span></span><br><span class="line"><span class="string">XQiOjE1NTEzOTg0MDAsImV4cCI6MTU1MjAwMzIwMH0.1lqpT4lGsgQTfyl4i15jMemeHultjE27xLxws2YFsro"</span> http://localhost:8088/admin</span><br><span class="line">Hello admin: admin</span><br></pre></td></tr></table></figure></p>
<p>可以看到它能够正常显示了。接下来试试其他的用户接口：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">"Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZXMiOlsiUk9MRV9VU0VSIiwiUk9MRV9BRE1JTiJdLCJpY</span></span><br><span class="line"><span class="string">XQiOjE1NTEzOTg0MDAsImV4cCI6MTU1MjAwMzIwMH0.1lqpT4lGsgQTfyl4i15jMemeHultjE27xLxws2YFsro"</span> http://localhost:8088/user</span><br><span class="line">Hello user: admin</span><br></pre></td></tr></table></figure></p>
<p>因为一开始创建的管理员用户拥有<code>ROLE_ADMIN</code>及<code>ROLE_USER</code>两个角色,因此他能够正常访问这些接口。接下来试试注册一个普通用户，看看他的访问权限能否正常区分:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --header <span class="string">"Content-Type: application/json"</span> --request POST --data <span class="string">'&#123;"username":"user", "password":"user"&#125;'</span> http://</span><br><span class="line">localhost:8088/register</span><br><span class="line">success</span><br></pre></td></tr></table></figure></p>
<p>注册成功之后再用这个用户登陆一下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">"Content-Type: application/json"</span> -X POST -d <span class="string">'&#123;"username":"user", "password":"user"&#125;'</span> http://localhost:8088/lo</span><br><span class="line">gin</span><br><span class="line">&#123;<span class="string">"token"</span>:<span class="string">"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImlhdCI6MTU1MTM5ODQwMCwiZXhwIjoxNTUyMDAzMjAwfQ.pW7WFJZzvHxKHW4tYU-AQTG1P0ky43nMsTfWFNCKQl8"</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后利用这个token去访问一下对应的接口：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">"Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImlhdCI6MTU1MTM5ODQwM</span></span><br><span class="line"><span class="string">CwiZXhwIjoxNTUyMDAzMjAwfQ.pW7WFJZzvHxKHW4tYU-AQTG1P0ky43nMsTfWFNCKQl8"</span> http://localhost:8088/user</span><br><span class="line">Hello user: user</span><br></pre></td></tr></table></figure></p>
<p>结果正常，然后试试看他能不能访问只有<code>ROLE_ADMIN</code>才有权限访问的接口:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">"Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImlhdCI6MTU1MTM5ODQwM</span></span><br><span class="line"><span class="string">CwiZXhwIjoxNTUyMDAzMjAwfQ.pW7WFJZzvHxKHW4tYU-AQTG1P0ky43nMsTfWFNCKQl8"</span> http://localhost:8088/admin</span><br><span class="line">&#123;<span class="string">"status"</span>:<span class="string">"FORBIDDEN"</span>,<span class="string">"localDateTime"</span>:<span class="string">"2019-03-01 16:32:25"</span>,<span class="string">"message"</span>:<span class="string">"Access Denied"</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>不出意外的出现了访问失败的提示了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此，所有的流程都结束了。过程挺简单，<code>WebFlux</code>跟传统的<code>WebMVC</code>是有点区别，函数式编程风格还是挺爽的，不过大体上都一致。如果需要查看完整的代码，可以访问<a href="https://github.com/51azxc/JavaBaseExample/tree/master/spring-boot-webflux-security" rel="external nofollow noopener noreferrer" target="_blank">这里</a>。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring xml配置</title>
    <url>/spring-xml/</url>
    <content><![CDATA[<h3 id="Spring使用Annotation时需要注意的地方"><a href="#Spring使用Annotation时需要注意的地方" class="headerlink" title="Spring使用Annotation时需要注意的地方"></a>Spring使用Annotation时需要注意的地方</h3><blockquote>
<p><a href="http://www.blogjava.net/fengzhisha0914/articles/343648.html" rel="external nofollow noopener noreferrer" target="_blank">Spring使用Annotation时需要注意的地方</a></p>
</blockquote>
<p>使用Annotation注解形式时,在Spring的配置文件中需要加入新的xsd文件引用:</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--错误形式</span></span><br><span class="line"><span class="comment">&lt;beans xmlns="http://www.springframework.org/schema/beans"</span></span><br><span class="line"><span class="comment">    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="comment">    xmlns:context="http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="comment">    xsi:schemaLocation="http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="comment">    http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span><br><span class="line"><span class="comment">    http://www.springframework.org/schema/context"&gt;</span></span><br><span class="line"><span class="comment">    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span><br><span class="line"><span class="comment">这三句的顺序不能自己随便写.....必须按照下面的顺序写.否则会抛出一个异常--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--正确形式--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO"</span> <span class="attr">class</span>=<span class="string">"com.dao.impl.UserDAOImpl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.service.UserService"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;property name="userDAO" ref="userDAO"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>异常<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 17 in XML document from class path resource [applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element &apos;context:annotation-config&apos;.</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Spring-Hibernate-SessionFactory-packagesToScan-Bug"><a href="#Spring-Hibernate-SessionFactory-packagesToScan-Bug" class="headerlink" title="Spring Hibernate SessionFactory packagesToScan Bug"></a>Spring Hibernate SessionFactory packagesToScan Bug</h3><blockquote>
<p><a href="http://myrev.iteye.com/blog/493527" rel="external nofollow noopener noreferrer" target="_blank">Spring Hibernate SessionFactory packagesToScan Bug</a></p>
</blockquote>
<p>如果配置了<code>&lt;property name=&quot;packagesToScan&quot; value=&quot;com.entity.*&quot; /&gt;</code>属性，需要扫描的实体类需要在指定包下的下一层位置，不能直接放在<code>com.entity.</code>中，或者不指定最后的<code>*</code>号</p>
<hr>
<h3 id="Spring-depends-on"><a href="#Spring-depends-on" class="headerlink" title="Spring depends-on"></a>Spring depends-on</h3><blockquote>
<p><a href="http://blog.163.com/tangyang_personal/blog/static/4622961320083272317605/" rel="external nofollow noopener noreferrer" target="_blank">Spring depends-on</a></p>
</blockquote>
<p><code>depend-on</code>用来表示一个Bean的实例化依靠另一个Bean先实例化。如果在一个bean A上定义了depend-on B那么就表示：A 实例化前先实例化 B。<br>这种情况下，A可能根本不需要持有一个B对象.<br>Spring允许Bean和Bean依赖的Bean（合作者）上同时定义<code>depends-on</code>。比如<code>A depends-on B &amp;&amp; B depends-on C &amp;&amp; C depends-on D</code>。<br>但是Spring不允许<code>A depends-on B &amp;&amp; B depends-on A</code>的情况。看下面的例子，由于D又依赖回A，这种在依赖关系中形成了一个闭环，Spring将无法处理这种依赖关系。<br>一个Bean可以同时<code>depends-on</code>多个对象如，<code>A depends-on D,C,B</code>。可以使用“，”或“；”定义多个depends-on的对象</p>
<hr>
<h3 id="Spring中bean的scope详解"><a href="#Spring中bean的scope详解" class="headerlink" title="Spring中bean的scope详解"></a>Spring中bean的scope详解</h3><blockquote>
<p><a href="http://blog.csdn.net/fhx007/article/details/7016694" rel="external nofollow noopener noreferrer" target="_blank">Spring中bean的scope详解</a></p>
</blockquote>
<p><code>scope</code>就是用来配置spring bean的作用域，它标识bean的作用域</p>
<p><strong>singleton作用域(scope 默认值)</strong><br>当一个bean的作用域设置为<code>singleton</code>, 那么Spring IOC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。换言之，当把一个bean定义设置为<code>singleton</code>作用域时，Spring IOC容器只会创建该bean定义的唯一实例。这个单一实例会被存储到单例缓存（singleton cache）中，并且所有针对该bean的后续请求和引用都将返回被缓存的对象实例，这里要注意的是<code>singleton</code>作用域和GOF设计模式中的单例是完全不同的，单例设计模式表示一个ClassLoader中 只有一个class存在，而这里的<code>singleton</code>则表示一个容器对应一个bean，也就是说当一个bean被标识为<code>singleton</code>时候，spring的IOC容器中只会存在一个该bean。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"class"</span> <span class="attr">class</span>=<span class="string">"class"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"class"</span> <span class="attr">class</span>=<span class="string">"class"</span> <span class="attr">singleton</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>prototype</strong><br><code>prototype</code>作用域部署的bean，每一次请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）都会产生一个新的bean实例，相当与一个new的操作，对于prototype作用域的bean，有一点非常重要，那就是Spring不能对一个prototype bean的整个生命周期负责，容器在初始化、配置、装饰或者是装配完一个prototype实例后，将它交给客户端，随后就对该prototype实例不闻不问了。不管何种作用域，容器都会调用所有对象的初始化生命周期回调方法，而对prototype而言，任何配置好的析构生命周期回调方法都将不会被调用。 清除prototype作用域的对象并释放任何prototype bean所持有的昂贵资源，都是客户端代码的职责。（让Spring容器释放被singleton作用域bean占用资源的一种可行方式是，通过使用 bean的后置处理器，该处理器持有要被清除的bean的引用。）<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"class"</span> <span class="attr">class</span>=<span class="string">"class"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"class"</span> <span class="attr">class</span>=<span class="string">"class"</span> <span class="attr">singleton</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>request</strong><br><code>request</code>表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前<code>HTTP request</code>内有效<br><code>request</code>、<code>session</code>、<code>global session</code>使用的时候首先要在初始化web的web.xml中做如下配置：<br>如果你使用的是Servlet 2.4及以上的web容器，那么你仅需要在web应用的XML声明文件web.xml中增加下述<code>ContextListener</code>即可：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener     <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>接着既可以配置bean的作用域了<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"class"</span> <span class="attr">class</span>=<span class="string">"class"</span> <span class="attr">scope</span>=<span class="string">"request"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>session</strong><br><code>session</code>作用域表示该针对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前<code>HTTP session</code>内有效</p>
<p><strong>global session</strong><br><code>global session</code>作用域类似于标准的HTTP Session作用域，不过它仅仅在基于portlet的web应用中才有意义。Portlet规范定义了全局Session的概念，它被所有构成某个portlet web应用的各种不同的portlet所共享。在global session作用域中定义的bean被限定于全局portlet Session的生命周期范围内。如果你在web中使用global session作用域来标识bean，那么web会自动当成session类型来使用</p>
<hr>
<h3 id="lt-context-component-scan-gt-使用说明"><a href="#lt-context-component-scan-gt-使用说明" class="headerlink" title="&lt;context:component-scan&gt;使用说明"></a><code>&lt;context:component-scan&gt;</code>使用说明</h3><blockquote>
<p><a href="http://blog.csdn.net/chunqiuwei/article/details/16115135" rel="external nofollow noopener noreferrer" target="_blank"><code>&lt;context:component-scan&gt;</code>使用说明</a></p>
</blockquote>
<p>在xml配置了这个标签后，spring可以自动去扫描base-pack下面或者子包下面的java文件，如果扫描到有<code>@Component</code>,<code>@Controller</code>,<code>@Service</code>等这些注解的类，则把这些类注册为bean</p>
<p><strong>注意</strong>：如果配置了<code>&lt;context:component-scan&gt;</code>那么<code>&lt;context:annotation-config/&gt;</code>标签就可以不用再xml中配置了，因为前者包含了后者。另外<code>&lt;context:annotation-config/</code>&gt;还提供了两个子标签<code>&lt;context:include-filter&gt;</code>,<code>&lt;context:exclude-filter&gt;</code>。默认的<code>&lt;context:component-scan&gt;</code>标签有个属性<code>use-default-filters</code>默认为<code>true</code>，必须指定为<code>false</code>上面两个标签才有用，<code>&lt;context:include-filter&gt;</code>意为需要包含哪些被扫描的类，<code>&lt;context:exclude-filter&gt;</code>表示需要被排除的哪些类。</p>
<hr>
<h3 id="配置Spring数据源"><a href="#配置Spring数据源" class="headerlink" title="配置Spring数据源"></a>配置Spring数据源</h3><blockquote>
<p><a href="http://yonguo.iteye.com/blog/115221" rel="external nofollow noopener noreferrer" target="_blank">配置Spring数据源</a></p>
</blockquote>
<p><strong>DBCP数据源</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>       </span></span><br><span class="line"><span class="tag">        <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3309/sampledb"</span> /&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span> /&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>BasicDataSource提供了<code>close()</code>方法关闭数据源，所以必须设定<code>destroy-method=”close”</code>属性，以便Spring容器关闭时，数据源能够正常关闭。除以上必须的数据源属性外，还有一些常用的属性：</p>
<ul>
<li><code>defaultAutoCommit</code>：设置从数据源中返回的连接是否采用自动提交机制，默认值为 <code>true</code>;</li>
<li><code>defaultReadOnly</code>：设置数据源是否仅能执行只读操作， 默认值为 <code>false</code>；</li>
<li><code>maxActive</code>：最大连接数据库连接数，设置为0时，表示没有限制；</li>
<li><code>maxIdle</code>：最大等待连接中的数量，设置为0时，表示没有限制；</li>
<li><code>maxWait</code>：最大等待秒数，单位为毫秒， 超过时间会报出错误信息；</li>
<li><code>validationQuery</code>：用于验证连接是否成功的查询SQL语句，SQL语句必须至少要返回一行数据， 如你可以简单地设置为：“select count(*) from user”；</li>
<li><code>removeAbandoned</code>：是否自我中断，默认是<code>false</code>；</li>
<li><code>removeAbandonedTimeout</code>：几秒后数据连接会自动断开，在<code>removeAbandoned</code>为<code>true</code>，提供该值；</li>
<li><code>logAbandoned</code>：是否记录中断事件， 默认为 <code>false</code>；</li>
</ul>
<p><strong>C3P0数据源</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>       </span></span><br><span class="line"><span class="tag">        <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">" oracle.jdbc.driver.OracleDriver "</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">" jdbc:oracle:thin:@localhost:1521:ora9i "</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>/&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>ComboPooledDataSource和BasicDataSource一样提供了一个用于关闭数据源的close()方法，这样我们就可以保证Spring容器关闭时数据源能够成功释放。<br>C3P0拥有比DBCP更丰富的配置属性，通过这些属性，可以对数据源进行各种有效的控制：</p>
<ul>
<li><code>acquireIncrement</code>：当连接池中的连接用完时，C3P0一次性创建新连接的数目；</li>
<li><code>acquireRetryAttempts</code>：定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30；</li>
<li><code>acquireRetryDelay</code>：两次连接中间隔时间，单位毫秒，默认为1000；</li>
<li><code>autoCommitOnClose</code>：连接关闭时默认将所有未提交的操作回滚。默认为false；</li>
<li><code>automaticTestTable</code>： C3P0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数，那么属性preferredTestQuery将被忽略。你 不能在这张Test表上进行任何操作，它将中为C3P0测试所用，默认为null；</li>
<li><code>breakAfterAcquireFailure</code>：获取连接失败将会引起所有等待获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用<code>getConnection(</code>)的时候继续尝试获取连接。如果设为<code>true</code>，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认为<code>false</code>；</li>
<li><code>checkoutTimeout</code>：当连接池用完时客户端调用<code>getConnection()</code>后等待获取新连接的时间，超时后将抛出<code>SQLException</code>，如设为0则无限期等待。单位毫秒，默认为0</li>
<li><code>connectionTesterClassName</code>： 通过实现ConnectionTester或QueryConnectionTester的类来测试连接，类名需设置为全限定名。默认为 com.mchange.v2.C3P0.impl.DefaultConnectionTester；</li>
<li><code>idleConnectionTestPeriod</code>：隔多少秒检查所有连接池中的空闲连接，默认为0表示不检查；</li>
<li><code>initialPoolSize</code>：初始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3；</li>
<li><code>maxIdleTime</code>：最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0；</li>
<li><code>maxPoolSize</code>：连接池中保留的最大连接数。默认为15；</li>
<li><code>maxStatements</code>：JDBC的标准参数，用以控制数据源内加载的PreparedStatement数量。但由于预缓存的Statement属 于单个Connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素，如果maxStatements与 maxStatementsPerConnection均为0，则缓存被关闭。默认为0；</li>
<li><code>maxStatementsPerConnection</code>：连接池内单个连接所拥有的最大缓存Statement数。默认为0；</li>
<li><code>numHelperThreads</code>：C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能，通过多线程实现多个操作同时被执行。默认为3；</li>
<li><code>preferredTestQuery</code>：定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个参数能显著提高测试速度。测试的表必须在初始数据源的时候就存在。默认为null；</li>
<li><code>propertyCycle</code>： 用户修改系统配置参数执行前最多等待的秒数。默认为300；</li>
<li><code>testConnectionOnCheckout</code>：因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用<code>idleConnectionTestPeriod</code>或<code>automaticTestTable</code>等方法来提升连接测试的性能。默认为false；</li>
<li><code>testConnectionOnCheckin</code>：如果设为true那么在取得连接的同时将校验连接的有效性。默认为false.</li>
</ul>
<p>读配置文件的方式引用属性：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span>     </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jdbc.properties"</span>/&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>       </span></span><br><span class="line"><span class="tag">        <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在jdbc.properties属性文件中定义属性值：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driverClassName= com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url= jdbc:mysql://localhost:3309/sampledb</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=1234</span><br></pre></td></tr></table></figure></p>
<p><strong>获取JNDI数据源</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jndiName"</span> <span class="attr">value</span>=<span class="string">"java:comp/env/jdbc/bbt"</span>/&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Spring 2.0为获取J2EE资源提供了一个jee命名空间，通过jee命名空间，可以有效地简化J2EE资源的引用。下面是使用jee命名空间引用JNDI数据源的配置：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">http://www.springframework.org/schema/beans</span>    </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">http://www.w3.org/2001/XMLSchema-instance</span>    </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jee</span>=<span class="string">http://www.springframework.org/schema/jee</span>    </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans     </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-2.0.xsd     </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jee    </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jee/spring-jee-2.0.xsd"</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">jee:jndi-lookup</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">jndi-name</span>=<span class="string">" java:comp/env/jdbc/bbt"</span>/&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2 文件上传下载</title>
    <url>/struts2-file/</url>
    <content><![CDATA[<p>使用Struts2实现文件上传与下载的功能。</p>
<a id="more"></a>
<blockquote>
<p><a href="http://blog.csdn.net/javaliuzhiyue/article/details/9357681" rel="external nofollow noopener noreferrer" target="_blank">struts2文件上传下载</a><br><a href="http://chunpeng.iteye.com/blog/265222" rel="external nofollow noopener noreferrer" target="_blank">Struts2利用stream直接输出Excel</a><br><a href="http://blog.csdn.net/weinianjie1/article/details/5941042" rel="external nofollow noopener noreferrer" target="_blank">struts2输出并下载excel文件</a><br><a href="http://blog.csdn.net/make19830723/article/details/7055956" rel="external nofollow noopener noreferrer" target="_blank">Struts2 +jquery+ajaxfileupload 实现无刷新上传文件</a></p>
</blockquote>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>在 jsp或者html 页面的文件上传表单里使用 file 标签. 如果需要一次上传多个文件, 就必须使用多个 file标签, 但它们的名字必须是相同的。表单中要设置<code>method</code>为<code>post</code>,<code>enctype</code>设置为<code>multipart/form-data</code><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload.action"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>或者搭配jQuery插件<code>ajaxfileupload</code>可以实现无刷新上传:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"upload"</span> <span class="attr">onclick</span>=<span class="string">"return upload();"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ajaxfileupload.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  $.ajaxFileUpload(&#123;</span></span><br><span class="line"><span class="actionscript">    url:<span class="string">'upload.action'</span>,</span></span><br><span class="line"><span class="actionscript">    secureuri:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">    fileElementId:<span class="string">'file'</span>, <span class="comment">//文件上传域的ID</span></span></span><br><span class="line"><span class="actionscript">    dataType: <span class="string">'json'</span>,</span></span><br><span class="line"><span class="actionscript">    success: <span class="function"><span class="keyword">function</span> <span class="params">(data, status)</span> </span>&#123;</span></span><br><span class="line">      alert(status);</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    error: <span class="function"><span class="keyword">function</span> <span class="params">(data, status, e)</span> </span>&#123;</span></span><br><span class="line">      alert(status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在 Struts 应用程序里, FileUpload 拦截器和 Jakarta Commons FileUpload 组件可以完成文件的上传.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptorname="fileUpload"class="org.apache.struts2.interceptor.FileUploadInterceptor"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>该拦截器位于defaultStack中，每个Action访问都会执行</p>
<p>在 Action 中新添加 3 个和文件上传相关的属性. 这 3 个属性的名字必须是以下格式<br>如果是上传单个文件, <code>upload</code>属性的类型就是<code>java.io.File</code>, 它代表被上传的文件, 第二个和第三个属性的类型是<code>String</code>, 它们分别代表上传文件的<strong>文件名</strong>和<strong>文件类型</strong><br>定义方式是分别是jsp页面file组件的名称+ContentType,jsp页面file组件的名称+FileName<br>如果上上传多个文件, 可以使用数组或 List<br>struts.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">class</span>=<span class="string">"com.action.UploadAction"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--设置文件最大的限制（拦截器fileUpload的maximumSize字段）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"fileUpload.maximumSize"</span>&gt;</span>20000000<span class="tag">&lt;/<span class="name">param</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--设置文件的要求的类型（拦截器fileUpload的allowedExtensions字段）--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"fileUpload.allowedExtensions"</span>&gt;</span>.jpg<span class="tag">&lt;/<span class="name">param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--出现错误后跳转的页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/upload.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--maximumSize与allowedExtensions在struts-default.xml文件中存在这样的一个拦截器，通过类名class可以找到类的源码，源码中就有这两个字段（不止两个，设置哪个用哪个）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"fileUpload"</span> <span class="attr">class</span>=<span class="string">"org.apache.struts2.interceptor.FileUploadInterceptor"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>FileUpload 拦截器负责处理文件的上传操作, 它是默认的 defaultStack拦截器栈的一员.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">  <span class="comment">// 属性名要和 input元素name值一致  </span></span><br><span class="line">  <span class="keyword">private</span> File upload;  </span><br><span class="line">  <span class="comment">//jsp页面file组件的名称+ContentType,  </span></span><br><span class="line">  <span class="keyword">private</span> String uploadContentType;  </span><br><span class="line">  <span class="comment">//jsp页面file组件的名称+FileName  </span></span><br><span class="line">  <span class="keyword">private</span> String uploadFileName;  </span><br><span class="line">  <span class="comment">//setter/getter</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">    <span class="comment">//获得文件的真实路径创建文件，将接受的文件拷贝到这个文件中  </span></span><br><span class="line">    String realPath = ServletActionContext.getServletContext().getRealPath(<span class="string">"/upload"</span>);  </span><br><span class="line">    File file = <span class="keyword">new</span> File(realPath,uploadFileName);  </span><br><span class="line">    FileUtils.copyFile(upload, file);  </span><br><span class="line">    <span class="keyword">return</span> NONE;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>FileUpload 拦截器有 3 个属性可以设置.</p>
<ul>
<li><code>maximumSize</code>: 上传文件的最大长度(以字节为单位), 默认值为 2 MB</li>
<li><code>allowedTypes</code>: 允许上传文件的类型, 各类型之间以逗号分隔</li>
<li><code>allowedExtensions</code>: 允许上传文件扩展名, 各扩展名之间以逗号分隔</li>
</ul>
<p>若用户上传的文件大小大于给定的最大长度或其内容类型没有被列在 <code>allowedTypes</code>,<code>allowedExtensions</code>参数里, 将会显示一条出错消息. 与文件上传有关的出错消息在<code>struts-messages.properties</code>文件里预定义了这些字段错误后给出的信息.(org.apache.struts2包下)，可以在文件上传 Action相对应的资源文件中重新定义错误消息（国际化文件来覆盖原本的英文提示内容）, 但需要在 struts.xml文件中配置使用。</p>
<p><strong>注：在jsp中回显错误信息用 <code>&lt;s:fielderror/&gt;</code>显示错误信息</strong></p>
<p>修改显示错误的资源文件的信息<br>第一步:创建新的资源文件 例如<code>fileuploadmessage.properties</code>,放置在src下在该资源文件中增加如下信息<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struts.messages.error.uploading=上传错误: &#123;0&#125;</span><br><span class="line">struts.messages.error.file.too.large=上传文件太大: &#123;0&#125; &quot;&#123;1&#125;&quot; &quot;&#123;2&#125;&quot; &#123;3&#125;</span><br><span class="line">struts.messages.error.content.type.not.allowed=上传文件的类型不允许: &#123;0&#125; &quot;&#123;1&#125;&quot; &quot;&#123;2&#125;&quot; &#123;3&#125;</span><br><span class="line">struts.messages.error.file.extension.not.allowed=上传文件的后缀名不允许: &#123;0&#125; &quot;&#123;1&#125;&quot; &quot;&#123;2&#125;&quot; &#123;3&#125;</span><br><span class="line"># 备注：&#123;0&#125;:&lt;inputtype=“file” name=“uploadImage”&gt;中name属性的值</span><br><span class="line">#      &#123;1&#125;:上传文件的真实名称</span><br><span class="line">#      &#123;2&#125;:上传文件保存到临时目录的名称</span><br><span class="line">#      &#123;3&#125;:上传文件的类型(对struts.messages.error.file.too.larg是上传文件的大小)</span><br></pre></td></tr></table></figure></p>
<p>第二步:在struts.xml文件加载该资源文件<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置上传文件的出错信息的资源文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constantname="struts.custom.i18n.resources"</span> <span class="attr">value</span>=<span class="string">“配置文件基名“/</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h4><p>客户端可以使用多个<code>&lt;input type=&quot;file&quot;&gt;</code>同时进行文件上传<br>如果<code>input filename</code>是不同的，则要配置多组文件、文件名、类型字段。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">  <span class="comment">// 属性名要和 input元素name值一致  </span></span><br><span class="line">  <span class="keyword">private</span> File[] upload;  </span><br><span class="line">  <span class="keyword">private</span> String[] uploadContentType;  </span><br><span class="line">  <span class="keyword">private</span> String[] uploadFileName;  </span><br><span class="line">  <span class="comment">//setter/getter</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">    <span class="comment">//获得文件的真实路径创建文件，将接受的文件拷贝到这个文件中  </span></span><br><span class="line">    String realPath = ServletActionContext.getServletContext().getRealPath(<span class="string">"/upload"</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; uploadFileName.length; i++) &#123;  </span><br><span class="line">        File file = <span class="keyword">new</span> File(realPath,uploadFileName[i]);  </span><br><span class="line">        FileUtils.copyFile(upload[i], file);              </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NONE;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>struts2提供了<strong>stream</strong>结果类型，该结果类型就是专门用于支持文件下载功能的<br>指定stream结果类型 需要指定一个 <code>inpuName</code>参数，该参数指定一个输入流，提供被下载文件的入口<br>在struts-default.xml文件中，结果集定义了一种<strong>stream</strong>类型<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result-type</span> <span class="attr">name</span>=<span class="string">"stream"</span> <span class="attr">class</span>=<span class="string">"org.apache.struts2.dispatcher.StreamResult"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>HTTP响应 可以以一个流方式发送到客户端<br>注：请求中文文件名下载，get方式提交，需要手动编码<code>new String(filename.getBytes(&quot;ISO-8859-1&quot;),&quot;utf-8&quot;);</code>文件下载所必须的三点</p>
<p>两个协议头信息ContentType(类型)：文件类型<br>ContentDisposition(下载附件名称)：attachment;filename=文件名<br>一个文件下载流struts.xml文件中的配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"download"</span> <span class="attr">class</span>=<span class="string">"com.action.DownloadAction"</span>&gt;</span>  </span><br><span class="line">  <span class="comment">&lt;!-- 文件下载 使用流 结果集 --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"stream"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 文件MIME类型 --&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- $&#123;contentType&#125; OGNL写法，用于读取Action中的getContentType方法，动态获取文件类型，下载什么类型就是什么类型  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>$&#123;contentType&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 下载附件名称contentDisposition 格式为：attachment;filename=xxxx $&#123;filename&#125;用于读取Action中的getFilename方法，动态获取文件名--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentDisposition"</span>&gt;</span>attachment;filename=$&#123;filename&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 设置流方法名称,必须Action内部提供getTarget返回值InputStream ，用来返回文件内容  --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"inputName"</span>&gt;</span>target<span class="tag">&lt;/<span class="name">param</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">result</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>action<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">  <span class="comment">//文件名的成员变量，用于接受传递过来的文件名参数</span></span><br><span class="line">  <span class="keyword">private</span> String filename;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilename</span><span class="params">(String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="comment">//手动编解码，防止乱码</span></span><br><span class="line">    <span class="keyword">if</span>(filename!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.filename = <span class="keyword">new</span> String(filename.getBytes(<span class="string">"ISO8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//提供getTarget放回InputStream流</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> InputStream <span class="title">getTarget</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line">    String realPath = ServletActionContext.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">    File downfile = <span class="keyword">new</span> File(realPath,filename);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FileInputStream(downfile);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getConyentType</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过ServletContext的getMimeType方法获取MIME类型</span></span><br><span class="line">    String mimeType = ServletActionContext.getServletContext().getMimeType(filename);</span><br><span class="line">    <span class="keyword">return</span> mimeType;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getFilename</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> URLEncoder.encode(filename,<span class="string">"UTF-8"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>前端页面<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/download.action?filename=abc.jpg"</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Struts2</category>
      </categories>
      <tags>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2零散知识点整理</title>
    <url>/struts2-tag/</url>
    <content><![CDATA[<p>平时使用Struts2碰到的一些问题的解决方法。</p>
<a id="more"></a>
<h3 id="Struts2使用Ajax"><a href="#Struts2使用Ajax" class="headerlink" title="Struts2使用Ajax"></a>Struts2使用Ajax</h3><blockquote>
<p><a href="http://hi.baidu.com/suinmi/item/5de98cfb8da44eee1b111fa8" rel="external nofollow noopener noreferrer" target="_blank">struts2使用ajax技术返回字符串</a></p>
</blockquote>
<ol>
<li>使用stream来进行服务端处理<br>action<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextResult</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream inputStream;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        inputStream = <span class="keyword">new</span> StringBufferInputStream(<span class="string">"ok"</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>struts.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"text-result"</span> <span class="attr">class</span>=<span class="string">"actions.TextResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"stream"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>text/html <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"inputName"</span>&gt;</span>inputStream <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ol start="2">
<li>将struts2的标签theme属性设置为ajax<br>这种方法要求是服务端不需要特殊处理，就像一个单纯的action处理一样，你只需要在action中进行处理，<br>并转向到一个jsp文件中，<br>在发送ajax的页面中使用 &lt;s:a&gt;标签，将theme属性设置为ajax,并设置接收服务器返回信息的控件id.<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:a</span> <span class="attr">href</span>=<span class="string">"process.action"</span> <span class="attr">theme</span>=<span class="string">"ajax"</span> <span class="attr">targets</span>=<span class="string">"result"</span> <span class="attr">cssStyle</span>=<span class="string">"text-align:center;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3 id="java-util-MissingResourceException-Can-39-t-find-bundle-for-base-name"><a href="#java-util-MissingResourceException-Can-39-t-find-bundle-for-base-name" class="headerlink" title="java.util.MissingResourceException Can&#39;t find bundle for base name"></a><code>java.util.MissingResourceException Can&#39;t find bundle for base name</code></h3><blockquote>
<p><a href="http://blog.chinaunix.net/uid-25820084-id-3494142.html" rel="external nofollow noopener noreferrer" target="_blank">解决方法：java.util.MissingResourceException Can’t find bundle for base name</a></p>
</blockquote>
<p>这个问题的原因是<code>MessageResource_zh_CN.properties</code>，这个配置文件没有放在classpath中，<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ResourceBundle config = ResourceBundle.getBundle(&quot;com.amaker.test.MessageResource&quot;);</span><br></pre></td></tr></table></figure></p>
<p>要按照路径，把你的配置文件加入ClassPath中就可以了</p>
<hr>
<h3 id="解决java-lang-IllegalStateException"><a href="#解决java-lang-IllegalStateException" class="headerlink" title="解决java.lang.IllegalStateException"></a>解决<code>java.lang.IllegalStateException</code></h3><blockquote>
<p><a href="http://blog.sina.com.cn/s/blog_6151984a0100owod.html" rel="external nofollow noopener noreferrer" target="_blank">Web开发中常见的java.lang.IllegalStateException错误</a></p>
</blockquote>
<p>JSP文件或struts action(纯servlet应用中没发现此问题)中采用了,如下代码:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print2Screen</span><span class="params">(HttpServletResponse resp,String encodeString,String[] htmlCommands)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    resp.setCharacterEncoding(encodeString);</span><br><span class="line">    ServletOutputStream httpOutput= resp.getOutputStream();</span><br><span class="line">    <span class="keyword">for</span>(String temp:htmlCommands)</span><br><span class="line">        httpOutput.write(temp.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>深层原理</strong>:</p>
<ol>
<li>Servlet规范说明，不能既调用 <code>response.getOutputStream()</code>，又调用<code>response.getWriter()</code>，无论先调用哪一个，在调用第二个时候应会抛出 <code>IllegalStateException</code>.</li>
<li>servlet代码中有<code>out.write(&quot;&quot;)</code>，这个和JSP中缺省调用的<code>response.getOutputStream()</code>产生冲突.因为在jsp中，<code>out</code>变量是通过<code>response.getWriter</code>得到的，在程序中既用了 <code>response.getOutputStream</code>，又用了<code>out</code>变量，故出现以上错误。</li>
</ol>
<p><strong>解决方法</strong></p>
<ul>
<li>在JSP文件中,加入下面两句<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">out.clear();</span><br><span class="line">out = pageContext.pushBody();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>此法的缺陷:<br>很多开发项目并不是JSP前端,如freemarker,velocity等<br>造成问题的<code>response.getOutputStream()</code>并未被写在JSP里,而是写在servlet/action里</p>
<ul>
<li>在action中,不要return 回具体的result文件,而是<code>return null</code></li>
</ul>
<hr>
<h3 id="Struts2国际化"><a href="#Struts2国际化" class="headerlink" title="Struts2国际化"></a>Struts2国际化</h3><blockquote>
<p><a href="http://blog.csdn.net/zollty/article/details/8710718" rel="external nofollow noopener noreferrer" target="_blank">国际化之struts2实现研究</a><br><a href="http://www.cnblogs.com/lihuiyy/archive/2013/03/14/2958782.html" rel="external nofollow noopener noreferrer" target="_blank">Struts2 的国际化实现</a></p>
</blockquote>
<p>在src目录下添加两个资源文件,格式<code>baseName_language_country.properties</code>例如<br><code>message_zh_CN.properties</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">login.title=请登录</span><br><span class="line">login.username=用户名</span><br><span class="line">login.password=密码</span><br><span class="line">login.welcome=欢迎，&#123;0&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>message_en_US.properties</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">login.title=Please login</span><br><span class="line">login.username=Username</span><br><span class="line">login.password=Password</span><br><span class="line">login.welcome=Welcome，&#123;0&#125;</span><br></pre></td></tr></table></figure></p>
<p>在jsp中使用<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:text</span> <span class="attr">name</span>=<span class="string">"login.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">key</span>=<span class="string">"login.username"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:textfield</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">key</span>=<span class="string">"login.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:textfield</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在action中使用<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getText(<span class="string">"login.username"</span>);</span><br><span class="line"><span class="comment">//使用占位符</span></span><br><span class="line">getText(<span class="string">"login.welcome"</span>, <span class="string">"user"</span>);</span><br></pre></td></tr></table></figure></p>
<p>在jsp中实行中英文切换<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.action?request_locale=zh_CN"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.action?request_locale=en_US"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="Struts2中不同namespace的重定向用法"><a href="#Struts2中不同namespace的重定向用法" class="headerlink" title="Struts2中不同namespace的重定向用法"></a>Struts2中不同namespace的重定向用法</h3><blockquote>
<p><a href="http://hi.baidu.com/wanglshen1/item/ab0c599a12b1a236326eeb50" rel="external nofollow noopener noreferrer" target="_blank">struts2中不同namespace的重定向用法</a></p>
</blockquote>
<p>简单的同一个包或者namespace中：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span>xxx?a=1<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>xxx 就是指你要重定向的action，?a=1 这个是参数的传递，你若是有参数的话可以这样传递<br>不同包或者不同namespace的<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"actionName"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"namespace"</span>&gt;</span>/xx<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>xxx ：重定向的action<br>/xx: xxx所在的namespace</p>
<hr>
<h3 id="struts2中-“-”-“-”-“-”-的区别和用法"><a href="#struts2中-“-”-“-”-“-”-的区别和用法" class="headerlink" title="struts2中 “#” “%” “$” 的区别和用法"></a>struts2中 “#” “%” “$” 的区别和用法</h3><blockquote>
<p><a href="http://hi.baidu.com/golotus/item/6e16444df986d8e81f19bc1e" rel="external nofollow noopener noreferrer" target="_blank">struts2中 # % $ 的区别和用法</a></p>
</blockquote>
<p>表达式语言主要有以下几大好处：  </p>
<ol>
<li>避免<code>request.getAttribute()</code>和<code>myBean.getMyProperty()</code>之类的语句，使页面更简洁；  </li>
<li>支持运算符（如+-*/），比普通的标志具有更高的自由度和更强的功能；  </li>
<li>简单明了地表达代码逻辑，使用代码更可读与便于维护。</li>
</ol>
<p>Struts2 中OGNL表达式的用法：<br>OGNL（Object-Graph Navigation Language），可以方便地操作对象属性的开源表达式语言；</p>
<p>“#”主要有三种用途：  </p>
<ol>
<li>用于过滤和投影（projecting)集合，如<code>books.{?#this.price&lt;100}；</code>  </li>
<li>构造Map，如<code>#{&#39;foo1&#39;:&#39;bar1&#39;, &#39;foo2&#39;:&#39;bar2&#39;}</code>。  </li>
<li>访问OGNL上下文和Action上下文，#相当于<code>ActionContext.getContext()；</code>下表有几个ActionContext中有用的属性：  </li>
</ol>
<table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>parameters</td>
<td>包含当前HTTP请求参数的Map</td>
<td>#parameters.id[0]作用相当于request.getParameter(“id”)</td>
</tr>
<tr>
<td>request</td>
<td>包含当前HttpServletRequest的属性（attribute)的Map</td>
<td>#request.userName相当于request.getAttribute(“userName”)</td>
</tr>
<tr>
<td>session</td>
<td>包含当前HttpSession的属性（attribute）的Map</td>
<td>#session.userName相当于session.getAttribute(“userName”)</td>
</tr>
<tr>
<td>application</td>
<td>包含当前应用的ServletContext的属性（attribute）的Map</td>
<td>#application.userName相当于application.getAttribute(“userName”)</td>
</tr>
<tr>
<td>attr</td>
<td>用于按request &gt; session &gt; application顺序访问其属性（attribute）</td>
<td>#attr.userName相当于按顺序在以上三个范围（scope）内读取userName属性，直到找到为止</td>
</tr>
</tbody>
</table>
<p>“%”的用途是在标志的属性为字符串类型时，计算OGNL表达式的值。例如在Ognl.jsp中加入以下代码：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>%的用途<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">value</span>=<span class="string">"#foobar['foo1']"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">value</span>=<span class="string">"%&#123;#foobar['foo1']&#125;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>“$”有两个主要的用途 ：    </p>
<ol>
<li>用于在国际化资源文件中，引用OGNL表达式 </li>
<li>在Struts 2配置文件中，引用OGNL表达式，如<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"AddPhoto"</span> <span class="attr">class</span>=<span class="string">"addPhoto"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"fileUploadStack"</span> /&gt;</span>              </span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>ListPhotos.action?albumId=$&#123;albumId&#125;<span class="tag">&lt;/<span class="name">result</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3 id="Struts2-部分标签"><a href="#Struts2-部分标签" class="headerlink" title="Struts2 部分标签"></a>Struts2 部分标签</h3><h4 id="iterator标签"><a href="#iterator标签" class="headerlink" title="iterator标签"></a><code>iterator</code>标签</h4><blockquote>
<p><a href="http://blog.csdn.net/oxcow/article/details/4516283" rel="external nofollow noopener noreferrer" target="_blank">struts2中iterator标签的相关使用</a><br><a href="http://www.iteye.com/problems/23667" rel="external nofollow noopener noreferrer" target="_blank">struts2 的标签遍历：<code>list&lt;map&lt;String,String&gt;&gt;</code></a></p>
</blockquote>
<p><code>iterator</code>标签可以用来遍历数组，最简单的使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; days = [&quot;Mon&quot;,&quot;Tue&quot;,&quot;Wed&quot;,&quot;Thu&quot;,&quot;Fri&quot;];</span><br><span class="line"></span><br><span class="line">&lt;s:iterator value=&quot;days&quot;&gt;</span><br><span class="line">  &lt;s:property /&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure></p>
<!-- more -->
<p>在<code>iterator</code>中，<code>top</code>可以表示当前元素，也可以携程<code>[0].top</code>.[0]代表整个栈对象<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"days"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:if</span> <span class="attr">test</span>=<span class="string">"top!='Mon'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:property</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">s:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>iterator</code>的<code>status</code>属性有如下方法:</p>
<ul>
<li><code>count</code>: int - 返回当前迭代位置的计数(从1开始)</li>
<li><code>index</code>: int - 返回当前迭代位置的编号(从0开始)</li>
<li><code>first</code>: boolean - 如果当前迭代位置是第一位时返回true</li>
<li><code>last</code>: boolean - 如果当前迭代位置是最后一位时返回true</li>
<li><code>even</code>: boolean - 如果当前迭代位置是偶数返回true</li>
<li><code>odd</code>: boolean - 如果当前迭代位置是奇数返回true</li>
<li><code>modulus(operand : int)</code>: int - 返回当前计数(从1开始)与指定操作数的模数</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"days"</span> <span class="attr">status</span>=<span class="string">"day"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:if</span> <span class="attr">test</span>=<span class="string">"#day.first"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:property</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">s:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后再来看下在iterator中调用value stack的用法。<br>假定countries是一个List对象，每一个country有一个name属性和一个citys List对象，并且每一个city也有一个name属性。那么我们想要在迭代citys时访问所属country的name属性就的用如下方式：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"countries"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"cities"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"name"</span>/&gt;</span>, <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"[1].name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>这里的 <code>&lt;s:property value=&quot;name&quot;/&gt;</code>取的是ctiy.name;<code>&lt;s:property value=&quot;[1].name&quot;/&gt;</code>取得是country.name</li>
<li><code>&lt;s:property value=&quot;[1].name&quot;/&gt;</code> 等价于 <code>&lt;s:property value=&quot;[1].top.name&quot;/&gt;</code></li>
<li>city处于当前栈，即top或者[0],而[1]指明了外层iterator对象，即country</li>
<li>‘[n]’标记引用开始位置为n的子栈（sub-stack），而不仅仅是位置n处的对象。因此’[0]’代表整个栈，而’[1]’是除top对象外所有的栈元素。</li>
</ul>
<p><code>iterator</code>遍历：list&lt;map&lt;String,String&gt;&gt;<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">value</span>=<span class="string">"userList"</span> <span class="attr">status</span>=<span class="string">"user_state"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"userList[#user_state.index]"</span>&gt;</span>   </span><br><span class="line">        Key : <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"key"</span> /&gt;</span>  </span><br><span class="line">        Value : <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"value"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a><code>select</code>标签</h4><blockquote>
<p><a href="http://blog.csdn.net/moliqin/article/details/3753570" rel="external nofollow noopener noreferrer" target="_blank">struts2中s:select标签的使用</a></p>
</blockquote>
<p><code>headerKey headerValue</code> 为设置缺省值<br><code>listKey</code>为option的value,<code>listValue</code>为option显示的选项</p>
<p>普通数组<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;s:select list=&quot;&#123;&apos;aa&apos;,&apos;bb&apos;,&apos;cc&apos;&#125;&quot;</span><br><span class="line">          theme=&quot;simple&quot; </span><br><span class="line">          headerKey=&quot;00&quot; </span><br><span class="line">          headerValue=&quot;00&quot;&gt;</span><br><span class="line">&lt;/s:select&gt;</span><br></pre></td></tr></table></figure></p>
<p>key-value映射<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;s:select list=&quot;#&#123;1:&apos;aa&apos;,2:&apos;bb&apos;,3:&apos;cc&apos;&#125;&quot;  </span><br><span class="line">          label=&quot;abc&quot; </span><br><span class="line">          listKey=&quot;key&quot; </span><br><span class="line">          listValue=&quot;value&quot;  </span><br><span class="line">          headerKey=&quot;0&quot; </span><br><span class="line">          headerValue=&quot;aabb&quot;&gt;</span><br><span class="line">&lt;/s:select&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">java.util.HashMap map = <span class="keyword">new</span> java.util.LinkedHashMap();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">"aaa"</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">"bbb"</span>);</span><br><span class="line">map.put(<span class="number">3</span>,<span class="string">"ccc"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"map"</span>,map);</span><br><span class="line">request.setAttribute(<span class="string">"aa"</span>,<span class="string">"2"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;s:select list=<span class="string">"#request.map"</span>  </span><br><span class="line">          label=<span class="string">"abc"</span> </span><br><span class="line">          listKey=<span class="string">"key"</span> </span><br><span class="line">          listValue=<span class="string">"value"</span> </span><br><span class="line">          value=<span class="string">"#request.aa"</span>  </span><br><span class="line">          headerKey=<span class="string">"0"</span> </span><br><span class="line">          headerValue=<span class="string">"aabb"</span>&gt;</span><br><span class="line">&lt;/s:select&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="Struts2-s-checkboxlist-国际化"><a href="#Struts2-s-checkboxlist-国际化" class="headerlink" title="Struts2 s:checkboxlist 国际化"></a>Struts2 s:checkboxlist 国际化</h4><blockquote>
<p><a href="http://blog.csdn.net/crazy_kis/article/details/4765937" rel="external nofollow noopener noreferrer" target="_blank">Struts2 s:checkboxlist 国际化</a></p>
</blockquote>
<p>使用<code>getText(key)</code>方法即可,key为国际化资源文件中的key值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;s:checkboxlist name=&quot;adminUserRoles&quot; </span><br><span class="line">                theme=&quot;simple&quot; </span><br><span class="line">                list=&quot;#&#123;1:getText(&apos;aa&apos;),2:getText(&apos;bb&apos;),3:getText(&apos;cc&apos;)&#125;&quot;  /&gt;</span><br></pre></td></tr></table></figure></p>
<hr>
<h4 id="checkbox标签"><a href="#checkbox标签" class="headerlink" title="checkbox标签"></a><code>checkbox</code>标签</h4><blockquote>
<p><a href="http://www.blogjava.net/SpartaYew/archive/2011/05/19/350594.html" rel="external nofollow noopener noreferrer" target="_blank">Struts2标签之Checkbox详解</a></p>
</blockquote>
<p><code>&lt;s:checkbox&gt;</code>有如下属性:<br><code>id</code>: 标签id<br><code>name</code>: 标签name<br><code>value</code>:是否选中，值为true|false,类似checkbox中的checked<br><code>fieldValue</code>: 类似checkbox中的value<br><code>label</code>: 选框后面的显示描述</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:checkbox</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">name</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"true"</span> <span class="attr">fieldValue</span>=<span class="string">"1"</span> <span class="attr">label</span>=<span class="string">"A"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 转换为checkbox --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">name</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span>A</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Struts2</category>
      </categories>
      <tags>
        <tag>form</tag>
        <tag>Struts2</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Tensorflow识别图片验证码</title>
    <url>/tensorflow-captcha/</url>
    <content><![CDATA[<p>验证码是我们在网络浏览中经常能见到的元素之一。它主要是用来区分用户是计算机还是人的公共全自动程序。之前使用jmeter来测试登录页面的功能时就被这个验证码给挡住了，最终手动输入了事。由于这个验证码是比较简单的，由字母与数字组成，之前看过TensorFlow的一篇教程，是用卷积神经网络(CNN)来识别手写数字的，后来想想，不如使用TensroFlow来搭建一个卷积神经网络模型来识别一下验证码。</p>
<a id="more"></a>
<p>按照TensorFlow官网的说法，大多数tf程序的结构都似如下：</p>
<ol>
<li>导入和解析数据集。</li>
<li>选择模型类型。</li>
<li>训练模型。</li>
<li>评估模型的效果。</li>
<li>使用经过训练的模型进行预测。</li>
</ol>
<p>不过在此之前，先需要导入相关的依赖:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.enable_eager_execution()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> captcha.image <span class="keyword">import</span> ImageCaptcha</span><br></pre></td></tr></table></figure></p>
<p>在这里开启了Eager Execution。这个特性要求TensorFlow 1.8以上，因此如果tf版本不够，需要升级一下才行。<br>最后一个则是用来生成验证码的第三方包captcha。如果没有需要通过pip来安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install captcha</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="导入和解析数据集"><a href="#导入和解析数据集" class="headerlink" title="导入和解析数据集"></a>导入和解析数据集</h3><p>数据对于机器学习来说十分重要，好的数据集对机器学习的帮助十分大。这里若要成功识别出图片中的验证码则需要大量的图片数据做训练。</p>
<h4 id="创建数据集"><a href="#创建数据集" class="headerlink" title="创建数据集"></a>创建数据集</h4><p>首先需要使用captcha包来生成验证码:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">folder_path = <span class="string">'images'</span></span><br><span class="line">numbers = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">alphabet = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'a'</span>), ord(<span class="string">'z'</span>)+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">captcha_set = numbers + alphabet</span><br><span class="line">captcha_size = len(captcha_set)</span><br><span class="line">captcha_length = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_image_code</span><span class="params">(path=folder_path, char_list=captcha_set, size=captcha_length)</span>:</span></span><br><span class="line">  <span class="string">"""生成图片验证码"""</span></span><br><span class="line">  text = [random.choice(char_list) <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)]</span><br><span class="line">  code = <span class="string">''</span>.join(text)</span><br><span class="line">  imageCaptcha = ImageCaptcha()</span><br><span class="line">  filepath = os.path.join(path, code + <span class="string">'.jpg'</span>)</span><br><span class="line">  imageCaptcha.write(code, filepath)</span><br><span class="line">  <span class="keyword">return</span> filepath</span><br></pre></td></tr></table></figure></p>
<p>我们这里生成的验证码是数字+小写字母形式的验证码，一般的验证码都是4或者6位，这里使用6位的。通过随机取出字母数字然后通过captcha生成对应的验证码图片并且写入到指定文件夹中。文件名则是正确的验证码。<br>接下来通过这个方法生成一堆验证码:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> tf.gfile.Exists(folder_path):</span><br><span class="line">  tf.gfile.MkDir(folder_path)</span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20000</span>):</span><br><span class="line">    generate_image_code(path, captcha_set, captcha_length)</span><br></pre></td></tr></table></figure></p>
<p>这里生成了20000组验证码图片，对比起mnist的那数据规模来说算是小的了。这里的数据规模会影响到最终生成模型的准确率。一般来说越多越随机是越好，不过数据变多就会导致训练的过程变的更加缓慢。</p>
<h4 id="拆分数据集"><a href="#拆分数据集" class="headerlink" title="拆分数据集"></a>拆分数据集</h4><p>在生成了一堆所需要的图片数据之后，我们接下来需要做的就是将它们拆分成<strong>训练集</strong>与<strong>测试集</strong>两个子集。训练集是用于训练模型的子集，而测试集则是用于测试训练后模型的子集。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_features_and_labels</span><span class="params">(path=folder_path)</span>:</span></span><br><span class="line">  <span class="string">"""生成训练/测试特征标签"""</span></span><br><span class="line">  image_data = [os.path.join(root, f) <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(path) <span class="keyword">for</span> f <span class="keyword">in</span> files]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 打乱数据</span></span><br><span class="line">  random.shuffle(image_data)</span><br><span class="line">  split_num = math.floor(len(image_data)*<span class="number">0.8</span>)</span><br><span class="line">  train_data = image_data[:split_num]</span><br><span class="line">  train_labels = [list(os.path.splitext(os.path.split(x)[<span class="number">1</span>])[<span class="number">0</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> train_data]</span><br><span class="line">  train_labels = [list(map(<span class="keyword">lambda</span> x:captcha_set.index(x), label)) <span class="keyword">for</span> label <span class="keyword">in</span> train_labels]</span><br><span class="line">  test_data = image_data[split_num+<span class="number">1</span>:]</span><br><span class="line">  test_labels = [os.path.splitext(os.path.split(x)[<span class="number">1</span>])[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> test_data]</span><br><span class="line">  test_labels = [list(map(<span class="keyword">lambda</span> x:captcha_set.index(x), label)) <span class="keyword">for</span> label <span class="keyword">in</span> test_labels]</span><br><span class="line">  <span class="keyword">return</span> (train_data, train_labels), (test_data, test_labels)</span><br></pre></td></tr></table></figure></p>
<p>我们所有的图片都放在一个统一的文件夹下，因此我们需要用<code>os.walk()</code>方法来获取它们。<code>os.walk()</code>方法可迭代有三个变量:<code>root</code>表示根目录，这里为images；<code>dirs</code>表示根目录下的子目录，这里没有，因此可以缺省；<code>files</code>则是表示每个子目录下的文件名列表。我们这里需要将文件名与根目录给拼接起来组成一个相对路径，让后续的输入函数能够获取到对应的文件。这里需要注意一下的是Python的这种语法如果是子列表应该要写在父列表的后边。</p>
<p>获取到所有的文件相对路径列表之后我们先要将它们随机排列一下。因为上边获取到的列表是默认按文件名排序的，如果数据分布不随机后续我们需要拆分数据的话就会导致后边测试集中很大一部分是训练集中没有的(例如训练集中包含的是0-x开头的验证码，而测试集中包含了大多数y-z开头的验证码)。</p>
<p>接下来按80%的比例将原有数据集拆分为训练集及测试集。接下来的的步骤都是从文件名中提取正确的验证码，然后将其转换成对应的数组下标。<br>最后将得到对应的训练/测试数据集：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(train_features, train_labels), (test_features, test_labels) = generate_features_and_labels()</span><br></pre></td></tr></table></figure></p>
<h4 id="解析数据集"><a href="#解析数据集" class="headerlink" title="解析数据集"></a>解析数据集</h4><p>我们希望得到的训练/测试数据集都包含了<strong>特征</strong>及<strong>标签</strong>。特征类似于题目，记录样本的特点；标签类似于答案，记录着特征对应的需要预测的值。<br>上边我们获得的训练/测试数据集中的数据还比较原始，并不能被tf所理解运行。因此，我们需要通过解析函数来将对它们做一次转换工作:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image_height = <span class="number">60</span></span><br><span class="line">image_width = <span class="number">160</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_image</span><span class="params">(feature, label=None)</span>:</span></span><br><span class="line">  image_string = tf.read_file(feature)</span><br><span class="line">  <span class="comment"># 解析图片</span></span><br><span class="line">  image_decoded = tf.image.decode_jpeg(image_string)</span><br><span class="line">  <span class="comment"># 将图片大小转换成对应的大小</span></span><br><span class="line">  image_resized = tf.image.resize_images(image_decoded, [image_height, image_width])</span><br><span class="line">  <span class="comment"># 将图片由彩色转换成黑白</span></span><br><span class="line">  image_gray = tf.image.rgb_to_grayscale(image_resized)</span><br><span class="line">  <span class="comment"># 将图片的值由(0, 255)压缩到(0, 1)</span></span><br><span class="line">  features = tf.divide(image_gray, <span class="number">255</span>)</span><br><span class="line">  <span class="keyword">if</span> label <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># 将标签转换成独热编码</span></span><br><span class="line">    labels = tf.one_hot(label, depth=captcha_size)</span><br><span class="line">    <span class="keyword">return</span> features, labels</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> features</span><br></pre></td></tr></table></figure></p>
<p>这里将通过图片文件的相对路径获取到图片信息，然后转换成对应的张量(tensors)。由于之前生成的图片都是60*160的，因此这里将按照这样的大小来定义张量的形状(shape)。<br>如果传入了标签，还需要对标签数据转换成独热编码(one-hot encoding)。独热编码是一种稀疏向量，其中一个元素设为1，其他元素均为0。例如一组向量为<code>[1,3,5]</code>,转换成独热编码的形式则为<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1,3,5] =&gt; [[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],</span><br><span class="line">            [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],</span><br><span class="line">            [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]</span><br></pre></td></tr></table></figure></p>
<p>独热编码常用于表示拥有有限个可能值的字符串或标识符。我们的标签值为验证码对应着在<code>captcha_set</code>中的数组下标，可以转换成<code>captcha_length x captcha_size</code>(6 x 36)大小的独热编码。</p>
<h4 id="生成输入函数"><a href="#生成输入函数" class="headerlink" title="生成输入函数"></a>生成输入函数</h4><p>输入函数可以将输入数据转换成<code>tf.data.Dataset</code>。此乃最终可用于训练的数据格式。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_fn</span><span class="params">(features, labels=None, num_epochs=None, shuffle=True, batch_size=<span class="number">1</span>)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> labels <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    inputs = features</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    inputs = (features, labels)</span><br><span class="line">  dataset = tf.data.Dataset.from_tensor_slices(inputs)</span><br><span class="line">  <span class="comment"># 随机打乱数据</span></span><br><span class="line">  <span class="keyword">if</span> shuffle:</span><br><span class="line">    dataset = dataset.shuffle(buffer_size=len(features))</span><br><span class="line">  <span class="comment"># 使用5个进程来格式化数据</span></span><br><span class="line">  dataset = dataset.map(parse_image, num_parallel_calls=<span class="number">5</span>)</span><br><span class="line">  <span class="comment"># 重复读取数据</span></span><br><span class="line">  dataset = dataset.repeat(num_epochs)</span><br><span class="line">  <span class="comment"># 取样本数量</span></span><br><span class="line">  dataset = dataset.batch(batch_size)</span><br><span class="line">  <span class="keyword">return</span> dataset</span><br></pre></td></tr></table></figure></p>
<p><code>tf.data.Dataset</code>通过<code>from_tensor_slices</code>方法加载了输入数据，然后通过调用上边的解析函数将原始数据转换成对应的张量。<code>shuffle</code>用于将数据随机化。<code>num_epochs</code>参数用于将数据集重复抓取，如果为<code>None</code>则会无限抓取。<code>batch_size</code>表示一个批次中的样本数，是一个超参数。</p>
<p>通过了以上几个步骤，我们的数据集就准备好了。接下来就应该是搭建模型了。</p>
<hr>
<h3 id="搭建模型"><a href="#搭建模型" class="headerlink" title="搭建模型"></a>搭建模型</h3><p>在这里我们使用<strong>Keras</strong>来搭建神经网络模型。<code>tf.keras</code>是一个高级的API，它具有使用友好、模块化及可组合、易于扩展等优点。<code>tf.keras</code>用于构建模型有两种方式，一种是<code>functional API</code>,一种是<code>subclassing</code>。这里使用的是后一种：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CnnModel</span><span class="params">(tf.keras.Model)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    super(CnnModel, self).__init__()</span><br><span class="line">    self.conv1 = tf.keras.layers.Conv2D(<span class="number">32</span>, [<span class="number">5</span>,<span class="number">5</span>], padding=<span class="string">'same'</span>, activation=tf.nn.relu, </span><br><span class="line">      input_shape=(image_height, image_width, <span class="number">1</span>))</span><br><span class="line">    self.pool1 = tf.keras.layers.MaxPooling2D([<span class="number">2</span>,<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">    self.conv2 = tf.keras.layers.Conv2D(<span class="number">64</span>, [<span class="number">5</span>,<span class="number">5</span>], padding=<span class="string">'same'</span>, activation=tf.nn.relu)</span><br><span class="line">    self.pool2 = tf.keras.layers.MaxPooling2D([<span class="number">3</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">    self.conv3 = tf.keras.layers.Conv2D(<span class="number">128</span>, [<span class="number">5</span>,<span class="number">5</span>], padding=<span class="string">'same'</span>, activation=tf.nn.relu)</span><br><span class="line">    self.pool3 = tf.keras.layers.MaxPooling2D([<span class="number">2</span>,<span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line">    self.pool_flat = tf.keras.layers.Flatten()</span><br><span class="line">    self.dense1 = tf.keras.layers.Dense(<span class="number">2048</span>, activation=<span class="string">"relu"</span>)</span><br><span class="line">    self.dropout = tf.keras.layers.Dropout(<span class="number">0.4</span>)</span><br><span class="line">    self.dense2 = tf.keras.layers.Dense(captcha_length * captcha_size)</span><br><span class="line">    self.logit = tf.keras.layers.Reshape((captcha_length, captcha_size))</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, training=True)</span>:</span></span><br><span class="line">    x = self.conv1(x)       <span class="comment"># 60 x 160 x 32</span></span><br><span class="line">    x = self.pool1(x)       <span class="comment"># 30 x 80 x 32</span></span><br><span class="line">    x = self.conv2(x)       <span class="comment"># 30 x 80 x 64</span></span><br><span class="line">    x = self.pool2(x)       <span class="comment"># 10 x 40 x 64</span></span><br><span class="line">    x = self.conv3(x)       <span class="comment"># 10 x 40 x 128</span></span><br><span class="line">    x = self.pool3(x)       <span class="comment"># 5 x 20 x 128</span></span><br><span class="line">    x = self.pool_flat(x)   <span class="comment"># 12800</span></span><br><span class="line">    x = self.dense1(x)      <span class="comment"># 2048</span></span><br><span class="line">    <span class="keyword">if</span> training:</span><br><span class="line">      x = self.dropout(x, training=training)</span><br><span class="line">    x = self.dense2(x)</span><br><span class="line">    x = self.logit(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure></p>
<p>这里建立了一个类<code>CnnModel</code>继承于<code>tf.keras.Model</code>,按照要求在<code>__init__</code>方法中定义了所有的神经元层。<code>call</code>方法则是将它们组合成了一个神经网络模型。</p>
<p>这个模型包含了3个卷积-池化层，通过这三个组合层之后将特征不断的提取出来然后经过一个<code>tf.keras.layers.Flatten</code>展平之后传入到第一个密集层，如果是训练模式则加入了一个<code>dropout</code>层以防止<a href="https://developers.google.com/machine-learning/crash-course/glossary#overfitting" rel="external nofollow noopener noreferrer" target="_blank"><em>过拟合</em></a>。接下来传入到第二个密集层，最终经过<code>Reshape</code>变成了输出层。</p>
<hr>
<h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>数据与模型都准备好了，我们就应该开始训练模型了。通过训练模型，模型将会在数据特征中找出规律，从而更加了解数据，在不断的优化过程后，模型就能根据数据预测出标签了。</p>
<p>首先需要定义一个梯度函数：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def grad(model, inputs, targets):</span><br><span class="line">  with tf.GradientTape() as tape:</span><br><span class="line">    logits = model(inputs, training=True)</span><br><span class="line">    loss_value = tf.losses.sigmoid_cross_entropy(multi_class_labels=targets, logits=logits)</span><br><span class="line">  return tape.gradient(loss_value, model.variables), loss_value, logits</span><br></pre></td></tr></table></figure></p>
<p>梯度函数通过损失(<code>loss</code>)与<a href="https://www.tensorflow.org/api_docs/python/tf/GradientTape" rel="external nofollow noopener noreferrer" target="_blank"><code>tf.GradientTape</code></a>来记录计算<a href="https://developers.google.com/machine-learning/crash-course/glossary#gradient" rel="external nofollow noopener noreferrer" target="_blank"><em>梯度</em></a>(用于优化模型)的操作。<br><a href="https://developers.google.com/machine-learning/crash-course/glossary#loss" rel="external nofollow noopener noreferrer" target="_blank"><em>损失</em></a>一种衡量指标，用于衡量模型的预测偏离其标签的程度。或者更悲观地说是衡量模型有多差。在这里使用了<a href="https://www.tensorflow.org/api_docs/python/tf/losses/sigmoid_cross_entropy" rel="external nofollow noopener noreferrer" target="_blank"><code>tf.losses.sigmoid_cross_entropy</code></a>来计算模型输出的值与真实标签之间的损失率。它常用于计算每个类是<strong>独立但不互斥</strong>的分类任务中的概率误差。由于验证码中的字母数字是可能有重复的，因此它在这里比较适合用作计算损失率。</p>
<blockquote>
<p>之前官方教程用于识别mnist手写数字中使用的损失函数是<code>softmax_cross_entropy</code>，它是计算<strong>独立且互斥</strong>的分类任务的。</p>
</blockquote>
<p>接下来则是开始循环训练模型:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = CnnModel()</span><br><span class="line">train_dataset = input_fn(train_features, train_labels, batch_size=<span class="number">32</span>, num_epochs=<span class="number">1</span>)</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>)</span><br><span class="line">epochs = <span class="number">51</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">  train_loss_avg = tf.contrib.eager.metrics.Mean()</span><br><span class="line">  train_accuracy = tf.contrib.eager.metrics.Accuracy()</span><br><span class="line">  <span class="keyword">for</span> features, labels <span class="keyword">in</span> train_dataset:</span><br><span class="line">    grads, loss, logits = grad(model, features, labels)</span><br><span class="line">    optimizer.apply_gradients(zip(grads, model.variables),</span><br><span class="line">      global_step=tf.train.get_or_create_global_step())</span><br><span class="line">    train_loss_avg(loss)</span><br><span class="line">    train_accuracy(tf.argmax(input=labels, axis=<span class="number">2</span>), tf.argmax(input=logits, axis=<span class="number">2</span>))</span><br><span class="line">  <span class="keyword">if</span> epoch % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"Epoch &#123;:03d&#125;: Loss: &#123;:.3f&#125;, Accuracy: &#123;:.3%&#125;"</span></span><br><span class="line">      .format(epoch, train_loss_avg.result(), train_accuracy.result()))</span><br></pre></td></tr></table></figure></p>
<p>训练数据集通过上边的输入函数生成，这里指定<a href="https://developers.google.com/machine-learning/glossary/#batch_size" rel="external nofollow noopener noreferrer" target="_blank"><em>批次大小</em></a>为32；然后指定优化器为<a href="https://www.tensorflow.org/api_docs/python/tf/train/AdamOptimizer" rel="external nofollow noopener noreferrer" target="_blank"><code>tf.train.AdamOptimizer</code></a>,指定的<a href="https://developers.google.com/machine-learning/crash-course/glossary#learning_rate" rel="external nofollow noopener noreferrer" target="_blank"><em>学习速率</em></a>为0.001；epochs为循环次数。它们三个都是<a href="https://developers.google.com/machine-learning/crash-course/glossary#hyperparameter" rel="external nofollow noopener noreferrer" target="_blank">超参数</a>，通过不同的组合可以让模型优化到最好。</p>
<p>在循环训练中，程序会从训练集中遍历每个样本，提取出样本的特征及标签；然后通过梯度函数得到预测结果与损失率及梯度；接着优化器会根据梯度指标更新模型的变量。中途程序将记录模型的损失率及准确率，以便查看。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Epoch 000: Loss: 0.136, Accuracy: 2.870%</span><br><span class="line">Epoch 010: Loss: 0.011, Accuracy: 97.896%</span><br><span class="line">Epoch 020: Loss: 0.005, Accuracy: 99.329%</span><br><span class="line">Epoch 030: Loss: 0.004, Accuracy: 99.643%</span><br><span class="line">Epoch 040: Loss: 0.003, Accuracy: 99.759%</span><br><span class="line">Epoch 050: Loss: 0.002, Accuracy: 99.825%</span><br></pre></td></tr></table></figure></p>
<p>可以看到一开始模型对这些数据束手无策，全靠瞎猜，准确率低的可怜。经过不断的循环训练之后，准确率将变的越来越高，损失率也变的越来越低。这一步耗时十分长，而且十分吃CPU，因此有个好的CPU或者GPU那花费的时间将大大减少。</p>
<hr>
<h3 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h3><p>正如人学习完了课程需要用考试来检验一下，模型也要在训练完毕之后进行一场“考试”，也就是评估。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_dataset = input_fn(test_features, test_labels, num_epochs=<span class="number">1</span>, shuffle=<span class="literal">False</span>)</span><br><span class="line">test_accuracy = tf.contrib.eager.metrics.Accuracy()</span><br><span class="line"><span class="keyword">for</span> features, labels <span class="keyword">in</span> test_dataset:</span><br><span class="line">  logits = model(features, training=<span class="literal">False</span>)</span><br><span class="line">  logits = tf.argmax(input=logits, axis=<span class="number">2</span>)</span><br><span class="line">  labels = tf.argmax(input=labels, axis=<span class="number">2</span>)</span><br><span class="line">  test_accuracy(labels, logits)</span><br><span class="line">print(<span class="string">"Test Accuracy: &#123;:.2%&#125;"</span>.format(test_accuracy.result()))</span><br></pre></td></tr></table></figure></p>
<p>我们通过输入函数生成了测试数据集，然后迭代测试数据集，提取样本中的特征让模型进行预测，然后通过与样本标签之前的对比而得出测试集的准确率。<br>在这里需要注意的是模型进行评估时就不需要进行过拟合操作了，因此需要设置<code>training=False</code>。我们的标签及模型输出值都是独热编码，因此需要通过<code>tf.argmax</code>来得到他们的数组下标，类似独热编码的反向操作。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Test Accuracy: 96.80%</span><br></pre></td></tr></table></figure></p>
<p>准确率还不算低，只能说CNN不愧是对目前对图像识别最先进的模型。如果对模型感到满意，可以调用<code>model.save_weights()</code>方法来保存模型，这样下次可以通过<code>model.load_weights()</code>方法来载入训练完毕的模型。</p>
<blockquote>
<p>由于这里使用的是<code>subclassing</code>的方式，因此<code>tf.keras.models.Model</code>的某些内置方法如<code>model.save()</code>、<code>model.summary()</code>是不能使用的。</p>
</blockquote>
<hr>
<h3 id="使用模型预测数据"><a href="#使用模型预测数据" class="headerlink" title="使用模型预测数据"></a>使用模型预测数据</h3><p>最后应该让模型派上用场了，让它对一些图片验证码进行预测一下。预测的图片验证码可以通过上边的方法生成，也可以直接从测试数据集中随机提取，只要能通过输入函数生成数据集就行:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机生成10份预测数据</span></span><br><span class="line">random_index = [random.randrange(<span class="number">0</span>, len(test_features)) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">predict_features = [test_features[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_index]</span><br><span class="line">predict_labels = [test_labels[i] <span class="keyword">for</span> i <span class="keyword">in</span> random_index]</span><br><span class="line"></span><br><span class="line">predict_dataset = input_fn(predict_features, num_epochs=<span class="number">1</span>, shuffle=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> predict_labels <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">for</span> feature, label <span class="keyword">in</span> zip(predict_dataset, predict_labels):</span><br><span class="line">    logits = model(feature, training=<span class="literal">False</span>)</span><br><span class="line">    predict = tf.reshape(tf.argmax(input=logits, axis=<span class="number">2</span>), [<span class="number">-1</span>]).numpy().tolist()</span><br><span class="line">    predict = <span class="string">""</span>.join([captcha_set[i] <span class="keyword">for</span> i <span class="keyword">in</span> predict])</span><br><span class="line">    result = <span class="string">""</span>.join([captcha_set[i] <span class="keyword">for</span> i <span class="keyword">in</span> label])</span><br><span class="line">    print(<span class="string">"Predictive value:"</span>, predict, <span class="string">"Actual value:"</span>, result)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">for</span> feature <span class="keyword">in</span> predict_dataset:</span><br><span class="line">    logits = model(feature, training=<span class="literal">False</span>)</span><br><span class="line">    predict = tf.reshape(tf.argmax(input=logits, axis=<span class="number">2</span>), [<span class="number">-1</span>]).numpy().tolist()</span><br><span class="line">    predict = <span class="string">""</span>.join([captcha_set[i] <span class="keyword">for</span> i <span class="keyword">in</span> predict])</span><br><span class="line">    print(<span class="string">"Predictive value: "</span>,predict)</span><br></pre></td></tr></table></figure></p>
<p>由于预测的数据可能是无标签的，因此这里就无须将标签传入到输入函数中了。通过模型我们可以得到对应的数据，然后通过<code>tf.argmax</code>将独热编码转换成张量，然后再通过<code>tf.reshape</code>方法将张量展平成标量，最后转换成数组。大概过程如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[0, 1, 0, 0, 0, 0, 0, 0, 0, 0], tf.argmax =&gt; [[1,3,5]] reshape =&gt; [1,3,5]</span><br><span class="line"> [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],</span><br><span class="line"> [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]</span><br></pre></td></tr></table></figure></p>
<p>得到的自然是图片中的验证码对应着在<code>captcha_set</code>中的数组下标，然后通过在<code>captcha_set</code>集合中查找，最终得到了对应的验证码。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Predictive value: 2gz6yt Actual value: 2gz6yt</span><br><span class="line">Predictive value: 2mza8c Actual value: 2mza8c</span><br><span class="line">Predictive value: 3elyvi Actual value: 3eiyvi</span><br><span class="line">Predictive value: 3krvqx Actual value: 3krvqx</span><br><span class="line">Predictive value: 9gsbvr Actual value: 9gsbvr</span><br><span class="line">Predictive value: eedyaz Actual value: eedyaz</span><br><span class="line">Predictive value: pe3rpe Actual value: pe3rpe</span><br><span class="line">Predictive value: pyfs6p Actual value: pyfs6p</span><br><span class="line">Predictive value: q0wvnx Actual value: q0wvnx</span><br><span class="line">Predictive value: xl29u6 Actual value: xl29u6</span><br></pre></td></tr></table></figure></p>
<p>这样看来算是比较出色的完成了识别任务了。感觉现在简单的验证码也拦不住机器了。<br>最后可以使用<code>shutil</code>里的方法删除掉生成的图片做一些收尾工作:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shutil.rmtree(folder_path, ignore_errors=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Tensorflow建立一个卷积神经网络</title>
    <url>/tensorflow-mnist/</url>
    <content><![CDATA[<p>Tensorflow的<a href="https://www.tensorflow.org/api_docs/python/tf/layers" rel="external nofollow noopener noreferrer" target="_blank"><code>layers</code>模块</a>提供了一些高等API用于更加容易的构建神经网络。它提供了方便创建密集（全连接）层/卷积层，添加激励函数，及使用正则化解决过拟合等一系列方法。在这个教程中，你将学习到如何使用<code>layers</code>创建一个用于识别MNIST手写数字集合的卷积神经网络。</p>
<a id="more"></a>
<p><img src="https://tensorflow.google.cn/images/mnist_0-9.png" alt="0123456789"></p>
<p><strong><a href="http://yann.lecun.com/exdb/mnist/" rel="external nofollow noopener noreferrer" target="_blank">MNIST数据集</a>包含了60,000个训练用例及10,000个测试用例，它们由内容为0-9个手写数字，大小为28*28像素的单色图片组成。</strong></p>
<hr>
<h3 id="准备开始"><a href="#准备开始" class="headerlink" title="准备开始"></a>准备开始</h3><p>让我们首先开始创建一个Tensorflow程序的<code>cnn_mnist.py</code>文件，加入如下代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入基本组件</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">tf.logging.set_verbosity(tf.logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们的程序逻辑将写于此</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  tf.app.run()</span><br></pre></td></tr></table></figure></p>
<p>当完成这部分教程之后，你将会添加构建、训练、评估卷积神经网络的代码于上文件之中。完整的代码可以在<a href="https://www.github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/examples/tutorials/layers/cnn_mnist.py" rel="external nofollow noopener noreferrer" target="_blank">这里</a>查看。</p>
<h3 id="卷积神经网络简单介绍"><a href="#卷积神经网络简单介绍" class="headerlink" title="卷积神经网络简单介绍"></a>卷积神经网络简单介绍</h3><p>卷积神经网络(CNNs)是目前用于图片分类任务中最先进的模型架构。卷积神经网络通过过滤图片的原始数据以提取出一系列更高级别的特征，并加以学习用于构建分类模型。它包含了三个部分：</p>
<ul>
<li><strong>卷积层</strong>:将指定数量的卷积滤镜单元应用于图像中，然后在每个子区域中执行一组数学运算操作从而生成一个单一值放入到输出特征映射集合中。卷积层通常应用ReLU激活函数将非线性因素引入到模型中。</li>
<li><strong>池化层</strong>:为了减少处理时间，池化层会对由卷积层提取的图像数据进行<a href="https://en.wikipedia.org/wiki/Convolutional_neural_network#Pooling_layer" rel="external nofollow noopener noreferrer" target="_blank">向下采样</a>，这样可以减小数据的空间大小。常用的池化算法是最大池化，它将输出特征映射集合划分为若干个子区域（例如，2×2像素区块），提取这些区域的最大值并丢弃其他值。</li>
<li><strong>密集（全连接）层</strong>:对由上述两个模块输出的特征进行分类。在一个全连接层中，层中的每个节点都连接到上一层的每个节点。</li>
</ul>
<p>通常来说，一个卷积神经网络由一叠执行特征提取的卷积模块构成。每个卷积模块都是由一个卷积层接一个池化层组成(这样可以更完整的获取图片特征)。最后一层卷积模块一般会接一个或多个用于执行分类操作的全连接层。CNN中的最终全连接层包含模型中每个目标分类的单个节点（模型可能预测的所有可能性的分类），使用<a href="https://en.wikipedia.org/wiki/Softmax_function" rel="external nofollow noopener noreferrer" target="_blank">softmax</a>激活函数为每个节点生成一个0-1的值(这些值最终相加总和为1)。这些值就是给定图像上区域落在每个目标分类的可能性的相对测量值。</p>
<blockquote>
<p>如果想要更全面的了解卷积神经网络，可以参考斯坦福大学的<a href="https://cs231n.github.io/convolutional-networks/" rel="external nofollow noopener noreferrer" target="_blank"> Convolutional Neural Networks for Visual Recognition course materials</a>.</p>
</blockquote>
<hr>
<h3 id="构建分类MNIST数据的卷积神经网络"><a href="#构建分类MNIST数据的卷积神经网络" class="headerlink" title="构建分类MNIST数据的卷积神经网络"></a>构建分类MNIST数据的卷积神经网络</h3><p>让我们按以下架构开始构建：</p>
<ol>
<li><strong>卷积层 #1</strong>：以5x5为单位面积大小提取深度为32的特征集合，并且添加ReLU激活函数。</li>
<li><strong>池化层 #1</strong>：使用最大池化算法以2x2为单位面积，步数为2对卷积层#1得到的输出特征缩减一半。</li>
<li><strong>卷积层 #2</strong>：以5x5为单位面积大小提取深度为64的特征集合，并且添加ReLU激活函数。</li>
<li><strong>池化层 #2</strong>：继续池化层#1的操作，将输出特征单位大小再压缩一半。</li>
<li><strong>密集层 #1</strong>：将输出特征组合成包含1024个神经元的全连接层，同时驱除40%的输出特征集合以防止过拟合。</li>
<li><strong>密集层 #2（逻辑层）</strong>：包含10个神经元，每个神经元表示0-9这10个数字的目标分类。</li>
</ol>
<p>对于构建上述三种不同类型的层，<a href="https://www.tensorflow.org/api_docs/python/tf/layers" rel="external nofollow noopener noreferrer" target="_blank"><code>tf.layers</code></a>模块提供了下列便捷方法：</p>
<ul>
<li><code>conv2d()</code>：构建一个二维的卷积层。参数包括输出特征维度(filters),卷积内核大小(kernel size),卷积填充方式(padding)及应用激活函数(activation function)。</li>
<li><code>max_pooling2d()</code>：使用最大池化算法构建一个二维池化层。参数包括单位池化大小(filter size)及步幅(stride)。</li>
<li><code>dense()</code>：构建一个密集层。参数包括神经元个数及激活函数。</li>
</ul>
<p>上述所有的方法都接受一个张量(tensor)作为输入值然后输出一个经过变换的张量。这样每层之间就可以通过接收上一层返回的输出值作为输入值这样的方式很容易的组合在一起。</p>
<p>继续添加<code>cnn_model_fn</code>函数，此函数符合TensorFlow的Estimator API所期望的接口（后边有关于此部分的更多<a href="https://www.tensorflow.org/tutorials/layers#create_the_estimator" rel="external nofollow noopener noreferrer" target="_blank">内容</a>）。<code>cnn_mnist.py</code>使用从MNIST数据集中取出的特征数据，标签(labels)及<a href="https://www.tensorflow.org/api_docs/python/tf/estimator/ModeKeys" rel="external nofollow noopener noreferrer" target="_blank">模型类型</a>(<code>TRAIN</code>,<code>EVAL</code>,<code>PREDICT</code>)作为参数；函数过程为配置好卷积神经网络模型；返回一个需要在Estimator运行的模型，包含了预测模型，损失率及训练方式：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cnn_model_fn</span><span class="params">(features, labels, mode)</span>:</span></span><br><span class="line">  <span class="string">"""Model function for CNN."""</span></span><br><span class="line">  <span class="comment"># 输入层 Input Layer</span></span><br><span class="line">  input_layer = tf.reshape(features[<span class="string">"x"</span>], [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 卷积层 Convolutional Layer #1</span></span><br><span class="line">  conv1 = tf.layers.conv2d(</span><br><span class="line">      inputs=input_layer,</span><br><span class="line">      filters=<span class="number">32</span>,</span><br><span class="line">      kernel_size=[<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">      padding=<span class="string">"same"</span>,</span><br><span class="line">      activation=tf.nn.relu)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 池化层 Pooling Layer #1</span></span><br><span class="line">  pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 卷积层 #2 &amp; 池化 #2</span></span><br><span class="line">  conv2 = tf.layers.conv2d(</span><br><span class="line">      inputs=pool1,</span><br><span class="line">      filters=<span class="number">64</span>,</span><br><span class="line">      kernel_size=[<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">      padding=<span class="string">"same"</span>,</span><br><span class="line">      activation=tf.nn.relu)</span><br><span class="line">  pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 密集层 Dense Layer</span></span><br><span class="line">  pool2_flat = tf.reshape(pool2, [<span class="number">-1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>])</span><br><span class="line">  dense = tf.layers.dense(inputs=pool2_flat, units=<span class="number">1024</span>, activation=tf.nn.relu)</span><br><span class="line">  dropout = tf.layers.dropout(</span><br><span class="line">      inputs=dense, rate=<span class="number">0.4</span>, training=mode == tf.estimator.ModeKeys.TRAIN)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 逻辑层 Logits Layer</span></span><br><span class="line">  logits = tf.layers.dense(inputs=dropout, units=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">  predictions = &#123;</span><br><span class="line">      <span class="comment"># Generate predictions (for PREDICT and EVAL mode)</span></span><br><span class="line">      <span class="string">"classes"</span>: tf.argmax(input=logits, axis=<span class="number">1</span>),</span><br><span class="line">      <span class="comment"># Add `softmax_tensor` to the graph. It is used for PREDICT and by the</span></span><br><span class="line">      <span class="comment"># `logging_hook`.</span></span><br><span class="line">      <span class="string">"probabilities"</span>: tf.nn.softmax(logits, name=<span class="string">"softmax_tensor"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> mode == tf.estimator.ModeKeys.PREDICT:</span><br><span class="line">    <span class="keyword">return</span> tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Calculate Loss (for both TRAIN and EVAL modes)</span></span><br><span class="line">  loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Configure the Training Op (for TRAIN mode)</span></span><br><span class="line">  <span class="keyword">if</span> mode == tf.estimator.ModeKeys.TRAIN:</span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.001</span>)</span><br><span class="line">    train_op = optimizer.minimize(</span><br><span class="line">        loss=loss,</span><br><span class="line">        global_step=tf.train.get_global_step())</span><br><span class="line">    <span class="keyword">return</span> tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Add evaluation metrics (for EVAL mode)</span></span><br><span class="line">  eval_metric_ops = &#123;</span><br><span class="line">      <span class="string">"accuracy"</span>: tf.metrics.accuracy(</span><br><span class="line">          labels=labels, predictions=predictions[<span class="string">"classes"</span>])&#125;</span><br><span class="line">  <span class="keyword">return</span> tf.estimator.EstimatorSpec(</span><br><span class="line">      mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)</span><br></pre></td></tr></table></figure></p>
<p>以下章节将深入解析上述代码部分，包括如何使用<a href="https://www.tensorflow.org/api_docs/python/tf/layers?hl=zh-cn" rel="external nofollow noopener noreferrer" target="_blank"><code>tf.layers</code></a>创建卷积神经网络的每一层，以及如何计算损失率，配置训练方法及生成预测值。如果你已经有了CNN与<a href="https://www.tensorflow.org/get_started/custom_estimators" rel="external nofollow noopener noreferrer" target="_blank">Tensorflow <code>Estimator</code></a>相关使用经验，并且可以直观的明白上述代码，你可以直接跳过这部分，跳至阅读<a href="https://www.tensorflow.org/tutorials/layers#training_and_evaluating_the_cnn_mnist_classifier" rel="external nofollow noopener noreferrer" target="_blank">训练及评估CNN MNIST分类器</a>。</p>
<h4 id="输入层-Input-Layer"><a href="#输入层-Input-Layer" class="headerlink" title="输入层(Input Layer)"></a>输入层(Input Layer)</h4><p>在<code>layers</code>模块中的为二维图像创建卷积及池化层的方法预期的张量输入值默认形状(shape)为<code>[batch_size, image_height, image_width, channels]</code>。如果需要改变结构可以使用<code>data_format</code>参数。这些参数定于如下：</p>
<ul>
<li><code>batch_size</code>: 用于参加训练的样本集个数。</li>
<li><code>image_height</code>: 图片高度。</li>
<li><code>image_width</code>: 图片宽度。</li>
<li><code>channels</code>: 图片颜色通道数。彩色图片为3(RGB), 黑白图片为1(Black)。</li>
<li><code>data_format</code>: string类型，默认值为<code>channels_last</code>，可选值为<code>channels_first</code>。前者对应输入形状为<code>(batch_size, ..., channels)</code>,后者为<code>(batch_size, channels, ...)</code>。</li>
</ul>
<p>由于我们的MNIST数据集是由28*28像素的黑白图片组成，因此我们需要使用<code>reshape</code>函数将输入特征集合转换为为<code>[batch_size, 28, 28, 1]</code>这样的构造形状(shape):<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_layer = tf.reshape(features[<span class="string">"x"</span>], [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure></p>
<p>这里使用了-1作为<code>batch_size</code>，意为根据输入值<code>features[&quot;x&quot;]</code>动态计算，而其他的属性都指定了固定值。这样我们就可以根据对应情况进行调整<code>batch_size</code>。例如，我们提供5个批次的样例给我们的模型，那这样<code>features[&quot;x&quot;]</code>就会包含了3,920个值(像素)，因此输入层的的形状<code>[5, 28, 28, 1]</code>。同理，如果我们需要输入100个样例，那就需要将值为78,400的<code>features[&quot;x&quot;]</code>转换成<code>[100, 28, 28, 1]</code>。</p>
<h4 id="卷积层-Convolutional-Layer-1"><a href="#卷积层-Convolutional-Layer-1" class="headerlink" title="卷积层(Convolutional Layer) #1"></a>卷积层(Convolutional Layer) #1</h4><p>我们使用<code>layers</code>模块中的<code>conv2d</code>方法创建第一个卷积层：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conv1 = tf.layers.conv2d(</span><br><span class="line">    inputs=input_layer,</span><br><span class="line">    filters=<span class="number">32</span>,</span><br><span class="line">    kernel_size=[<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">    padding=<span class="string">"same"</span>,</span><br><span class="line">    activation=tf.nn.relu)</span><br></pre></td></tr></table></figure></p>
<p>第一个卷积层连接了输入层(<code>[bacth_size, 28, 28, 1]</code>),因此<code>inputs</code>接收的参数为<code>input_layer</code>。</p>
<blockquote>
<p>如果指定参数<code>data_format=channels_first</code>，那<code>conv2d()</code>接收的输入层形状为<code>[batch_size, channels, image_height, image_width]</code></p>
</blockquote>
<p><code>filter</code>参数定义为卷积过滤器的数量，也就是输出特征集合的深度(此处为32), <code>kernel_size</code>指定了需要卷积内核从图片抽离分析的单位面积大小<code>[height, width]</code>(此处为[5,5])。如果长宽一致，可以直接指定边长，也就是<code>kernel_size=5</code>。</p>
<p><code>padding</code>参数(不区分大小写)指定了卷积层抽取特征的方式，默认值为<code>valid</code>。这里我们指定<code>same</code>,他会通过在抽取出来的特征体周边填充0这个值使得长宽会与输入层一致,即为28(如果不使用这种方式，最终得到的输出张量形状为24*24)。</p>
<p><code>activation</code>参数指定需要应用在卷积输出值的激活函数。这里通过<a href="https://www.tensorflow.org/api_docs/python/tf/nn/relu" rel="external nofollow noopener noreferrer" target="_blank"><code>tf.nn.relu</code></a>来指定激活函数为ReLU。</p>
<p>最终输入层<code>input_layer</code>经过<code>conv2d()</code>函数而生成的输出值形状(shape)为<code>[batch_size, 28, 28, 32]</code>:长宽与输入层的一致，而深度则为32。</p>
<h4 id="池化层-Pooling-Layer-1"><a href="#池化层-Pooling-Layer-1" class="headerlink" title="池化层(Pooling Layer) #1"></a>池化层(Pooling Layer) #1</h4><p>接下来，我门需要将第一个池化层接入到上边创建的卷积层后边。我们使用<code>layer</code>模块里的<code>max_pooling2d()</code>方法构建一个步长为2，单位面积边长为2及执行最大池化算法的池化层：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p>
<p>这里的<code>inputs</code>参数接收的张量(tensor)形状(shape)为<code>[batch_size, image_height, image_width, channels]</code>。这里我们的输入张量为<code>conv1</code>，就是第一个卷积层输出的数据(<code>[batch_size, 28, 28, 32]</code>)。</p>
<blockquote>
<p><code>max_pooling2d()</code>与<code>conv2d()</code>一样拥有<code>data_format</code>参数，功能与<code>conv2d()</code>方法一致。</p>
</blockquote>
<p><code>pool_size</code>参数指定了最大池化的滤镜面积<code>[height, widht]</code>(这里为[2,2])。当然如果两个维度值一样，可以通过<code>pool_size=2</code>这样的方式设置。</p>
<p><code>strides</code>指定了每次跨步的大小。这里设置了步长为2，意味着池化滤镜在提取过程中在高度及宽度上都间隔着2个像素(对于2x2的单位面积来说，刚好不重叠)。如果希望设置长宽为不同的步长，可以通过元组/列表的方式设置(例如，strides=[3,6])。</p>
<p>因为池化层的功能最终将输出张量的形状减小了一半，因此第一个卷积模块输出的张量(tensor)形状(shape)为<code>[batch_size, 14, 14, 32]</code>。</p>
<h4 id="卷积层-Convolutional-Layer-2-amp-池化-Pooling-Layer-2"><a href="#卷积层-Convolutional-Layer-2-amp-池化-Pooling-Layer-2" class="headerlink" title="卷积层(Convolutional Layer) #2 &amp; 池化(Pooling Layer) #2"></a>卷积层(Convolutional Layer) #2 &amp; 池化(Pooling Layer) #2</h4><p>第二个卷积模块的构造与上边一样，都是使用了相同的函数来构建，只是这里的<code>conv2d()</code>指定了<code>filter</code>的数量为64，比上边多增了一倍:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conv2 = tf.layers.conv2d(</span><br><span class="line">    inputs=pool1,</span><br><span class="line">    filters=<span class="number">64</span>,</span><br><span class="line">    kernel_size=[<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">    padding=<span class="string">"same"</span>,</span><br><span class="line">    activation=tf.nn.relu)</span><br><span class="line"></span><br><span class="line">pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p>
<p><code>conv2d()</code>接收的<code>inputs</code>参数为上边池化层生成的张量<code>pool1</code>，<code>padding</code>指定为<code>same</code>意味着输出的长宽与输入值一致，因此<code>conv2</code>的形状(shape)为<code>[batch_size, 14, 14, 64]</code>。</p>
<p><code>max_pooling2d()</code>继续将<code>conv2</code>的形状长宽进一步压缩一倍，因此<code>pool2</code>的形状(shape)为<code>[batch_size, 7, 7, 64]</code>。</p>
<h4 id="密集层-Dense-Layer"><a href="#密集层-Dense-Layer" class="headerlink" title="密集层(Dense Layer)"></a>密集层(Dense Layer)</h4><p>接下来，我们需要添加一个密集层(包含1024个神经元和ReLU激活函数)到CNN，对由经上述两个卷积模块提取的特征集合进行分类。在连接之前，需要通过<code>reshape</code>函数拍平(flatten)特征集合(pool2)，变成<code>[batch_size, features]</code>这样的二维形状(shape)：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pool2_flat = tf.reshape(pool2, [<span class="number">-1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>])</span><br></pre></td></tr></table></figure></p>
<p>在<code>reshape()</code>方法中，-1表示<code>batch_size</code>维度将根据输入数据样例数动态计算。每一个样例都包含7(<code>pool2</code>的高度)X7(<code>pool2</code>的宽度)X64(<code>pool2</code>的通道数)个特征，因此最终输出张量<code>pool2_flat</code>的形状(shape)为<code>[batch_size, 3136]</code>。</p>
<p>现在我们就可以通过<code>layers</code>模块里的<code>dense()</code>方法创建一个密集层了：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dense = tf.layers.dense(inputs=pool2_flat, units=<span class="number">1024</span>, activation=tf.nn.relu)</span><br></pre></td></tr></table></figure></p>
<p><code>inputs</code>参数传入的是上边生成的<code>pool2_flat</code>特征集合，<code>units</code>表示指定1024个神经元，<code>activation</code>参数表示指定的激活函数为ReLU。</p>
<p>为了能够提升模型结果的准确性，我们还需要加入<code>dropout()</code>方法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dropout = tf.layers.dropout(</span><br><span class="line">    inputs=dense, rate=<span class="number">0.4</span>, training=mode == tf.estimator.ModeKeys.TRAIN)</span><br></pre></td></tr></table></figure></p>
<p><code>rate</code>参数指定<code>dropout</code>比例，这里指定0.4表示在训练中有40%的元素会被随机丢弃。<br><code>training</code>参数表示当前模型是否运行在训练模式中；<code>dropout</code>只会在<code>training</code>为<code>True</code>的情况下执行。<br>最终经过了这一神经元层只会输出的张量形状(shape)为<code>[batch_size, 1024]</code>。</p>
<h4 id="逻辑层-Logits-Layer"><a href="#逻辑层-Logits-Layer" class="headerlink" title="逻辑层(Logits Layer)"></a>逻辑层(Logits Layer)</h4><p>在我们的神经网络中最后一层为逻辑层,将会返回预测的原始数据。我们创建一个包含10个神经元(分别表示0-9)和默认使用线性激活的密集层：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logits = tf.layers.dense(inputs=dropout, units=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p>
<p>最终我们的CNN输出的张量形状(shape)为<code>[batch_size, 10]</code>。</p>
<h4 id="生成预测值"><a href="#生成预测值" class="headerlink" title="生成预测值"></a>生成预测值</h4><p>我们的模型最后一层返回的是预测的原始值。我们需要将这些值转换成两种不同的数据格式：</p>
<ul>
<li><strong>predicted class</strong>：表示预测类别为0-9这10个数字。</li>
<li><strong>probabilities</strong>：表示每个样例为每个分类的概率。例如这个样本可能是0，1，2等等。</li>
</ul>
<p>对于给定的样例，我们需要在逻辑张量中找到最高的数值(意味着概率最大)的那一行作为预测类别(就是哪个数字)。通过<code>tf.argmax</code>可以很容易的找到这个元素的索引：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.argmax(input=logits, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<p><code>input</code>参数意为希望从哪里(这里是<code>logits</code>)提取出最大值,而<code>axis</code>表示从哪个轴提取。这里设置为1，就是从<code>[batch_size, 10]</code>后边这个参数来获得最大值，而这个索引数字刚好就表示为预测类为0-9哪个数字。</p>
<p>我们可以通过应用<code>softmax</code>激活函数来得出准确率：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.nn.softmax(logits, name=<span class="string">"softmax_tensor"</span>)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这里指定来这个操作名为<strong>softmax_tensor</strong>，接下来我们可以通过这个名字来引用它(在<a href="https://www.tensorflow.org/tutorials/layersset_up_a_logging_hook" rel="external nofollow noopener noreferrer" target="_blank">“Set Up a Logging Hook”</a>章节中我们将会通过它来记录softmax值)。</p>
</blockquote>
<p>我们将我们的预测对象变成一个字典(dict)，传入到一个<code>EstimatorSpec</code>对象里并返回它:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions = &#123;</span><br><span class="line">    <span class="string">"classes"</span>: tf.argmax(input=logits, axis=<span class="number">1</span>),</span><br><span class="line">    <span class="string">"probabilities"</span>: tf.nn.softmax(logits, name=<span class="string">"softmax_tensor"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> mode == tf.estimator.ModeKeys.PREDICT:</span><br><span class="line">  <span class="keyword">return</span> tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)</span><br></pre></td></tr></table></figure></p>
<h4 id="计算损失率"><a href="#计算损失率" class="headerlink" title="计算损失率"></a>计算损失率</h4><p>对于培训与评估之间，我们需要定义一个<a href="https://en.wikipedia.org/wiki/Loss_function" rel="external nofollow noopener noreferrer" target="_blank">损失函数</a>来衡量预测值与目标值之间的匹配程度。对于类似MNIST这样的多分类问题，通常用<a href="https://en.wikipedia.org/wiki/Cross_entropy" rel="external nofollow noopener noreferrer" target="_blank">交叉熵</a>来衡量损失率。下面的代码用于计算模型运行于<code>TRAIN</code>与<code>EVAL</code>之间的交叉熵:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">onehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=<span class="number">10</span>)</span><br><span class="line">loss = tf.losses.softmax_cross_entropy(</span><br><span class="line">    onehot_labels=onehot_labels, logits=logits)</span><br></pre></td></tr></table></figure></p>
<p>我们的<code>labels</code>里的张量(tensor)包含的是我们的样例预测值列表，像<code>[1, 9, ...]</code>这样。为了能够计算<br>交叉熵，首先需要将<code>labels</code>转换成对应的<a href="https://www.quora.com/What-is-one-hot-encoding-and-when-is-it-used-in-data-science" rel="external nofollow noopener noreferrer" target="_blank">单热编码</a>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],</span><br><span class="line"> [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure></p>
<p>我们使用<a href="https://www.tensorflow.org/api_docs/python/tf/one_hot" rel="external nofollow noopener noreferrer" target="_blank"><code>tf.one_hot</code></a>来进行转换。<code>tf.one_hot()</code>有两个必备参数:</p>
<ul>
<li><code>indices</code>：决定单热张量(one-hot tensor)中需要被指定为非零值的坐标。例如上述指定为1在内部数组中的索引。</li>
<li><code>depth</code>：决定单热张量的深度，在这个例子中也就是指定多少个数组。这里设置为10，就是指明0-9这10个数字分类。</li>
</ul>
<p>接下来指定<code>onehot_labels</code>为我们的<code>labels</code>的单热张量(one-hot tensor):<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">onehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p>
<p>因为我们的<code>labels</code>包括0-9个不同的数字，所以<code>indices</code>表示着<code>labels</code>值在张量中的位置，刚好与值对应，所以需要转换成整数类型。<code>depth</code>设置10表示有10个潜在的分类，代表着每个数字。</p>
<p>接下来，我们需要计算<code>onehoe_labels</code>与逻辑层(logits layer)生成（经过<code>softmax</code>激活）的预测值之间的交叉熵，我们可以使用<code>tf.losses.softmax_cross_entropy()</code>来计算，并且返回一个标量张量<code>loss</code>：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss = tf.losses.softmax_cross_entropy(</span><br><span class="line">    onehot_labels=onehot_labels, logits=logits)</span><br></pre></td></tr></table></figure></p>
<h4 id="配置训练方法"><a href="#配置训练方法" class="headerlink" title="配置训练方法"></a>配置训练方法</h4><p>在上一节中，我们定义损失率为CNN最后一层输出的<code>softmax</code>值与<code>labels</code>之间的交叉熵。接下来我们需要配置我们的模型在训练中不断的优化损失率。我们使用学习率为0.001，优化算法为<a href="https://en.wikipedia.org/wiki/Stochastic_gradient_descent" rel="external nofollow noopener noreferrer" target="_blank">随机梯度下降</a>的优化器优化:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> mode == tf.estimator.ModeKeys.TRAIN:</span><br><span class="line">  optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.001</span>)</span><br><span class="line">  train_op = optimizer.minimize(</span><br><span class="line">      loss=loss,</span><br><span class="line">      global_step=tf.train.get_global_step())</span><br><span class="line">  <span class="keyword">return</span> tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>想要更多的了解Estimator模型函数配置培训操作，请参阅<a href="https://www.tensorflow.org/get_started/custom_estimators" rel="external nofollow noopener noreferrer" target="_blank">“Creating Estimators in tf.estimator.”</a>教程中的<a href="https://www.tensorflow.org/get_started/custom_estimators#defining_the_training_op_for_the_model" rel="external nofollow noopener noreferrer" target="_blank">Defining the training op for the model</a>部分。</p>
</blockquote>
<h4 id="添加评估指标"><a href="#添加评估指标" class="headerlink" title="添加评估指标"></a>添加评估指标</h4><p>我们在<code>EVAL</code>模式中定义一个字典(dict)用来给我们的模型训练添加准确率指标:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eval_metric_ops = &#123;</span><br><span class="line">    <span class="string">"accuracy"</span>: tf.metrics.accuracy(</span><br><span class="line">        labels=labels, predictions=predictions[<span class="string">"classes"</span>])&#125;</span><br><span class="line"><span class="keyword">return</span> tf.estimator.EstimatorSpec(</span><br><span class="line">    mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="训练及评估CNN-MNIST分类器"><a href="#训练及评估CNN-MNIST分类器" class="headerlink" title="训练及评估CNN MNIST分类器"></a>训练及评估CNN MNIST分类器</h3><p>我们已经编写了MNIST的CNN模型函数，现在我们要准备开始训练及评估它了。</p>
<h4 id="载入训练和测试数据"><a href="#载入训练和测试数据" class="headerlink" title="载入训练和测试数据"></a>载入训练和测试数据</h4><p>首先我们在<code>main()</code>方法中载入训练和测试数据:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(unused_argv)</span>:</span></span><br><span class="line">  <span class="comment"># Load training and eval data</span></span><br><span class="line">  mnist = tf.contrib.learn.datasets.load_dataset(<span class="string">"mnist"</span>)</span><br><span class="line">  train_data = mnist.train.images <span class="comment"># Returns np.array</span></span><br><span class="line">  train_labels = np.asarray(mnist.train.labels, dtype=np.int32)</span><br><span class="line">  eval_data = mnist.test.images <span class="comment"># Returns np.array</span></span><br><span class="line">  eval_labels = np.asarray(mnist.test.labels, dtype=np.int32)</span><br></pre></td></tr></table></figure></p>
<p>我们将训练特征数据(55,000个手绘数字图像中的原始像素值)及训练标签(labels,每个图像为0-9的对应值)分别存储为名为<code>train_data</code>及<code>train_labels</code>的<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html" rel="external nofollow noopener noreferrer" target="_blank">numpy数组</a>中。同样，我们将评估特征数据(10,000张图片)及评估标签(labels)存储为<code>eval_data</code>及<code>eval_labels</code>的numpy数组中。</p>
<blockquote>
<p>如果无法加载MNIST数据，可以通过上述的<a href="http://yann.lecun.com/exdb/mnist/" rel="external nofollow noopener noreferrer" target="_blank">MNIST官网</a>先下载数据，放入到指定文件夹中(如<code>MNIST_data</code>)，然后通过<code>mnist = tf.contrib.learn.datasets.mnist.load_mnist(train_dir = &quot;MNIST_data/&quot;)</code>这样的方式载入数据。</p>
</blockquote>
<h4 id="创建Estimator"><a href="#创建Estimator" class="headerlink" title="创建Estimator"></a>创建Estimator</h4><p>接下来，我们需要为模型创建一个<code>Estimator</code>(执行高层模型的训练、评估及推理的Tensorflow类):<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create the Estimator</span></span><br><span class="line">mnist_classifier = tf.estimator.Estimator(</span><br><span class="line">    model_fn=cnn_model_fn, model_dir=<span class="string">"/tmp/mnist_convnet_model"</span>)</span><br></pre></td></tr></table></figure></p>
<p><code>model_fn</code>参数指定生成用于训练，评估和预测的模型函数。这里传入的<code>cnn_model_fn</code>就是上个段落定义的函数。<code>model_dir</code>参数保存模型数据(检查点)的目录(这里指定了一个临时文件路径<code>/tmp/mnist_convnet_model</code>,当然你可以随意更改一个你喜欢的路径)。</p>
<blockquote>
<p>如果想要更深入的了解Tensorflow <strong>Estimator</strong> API,可以参考<a href="https://www.tensorflow.org/get_started/custom_estimators" rel="external nofollow noopener noreferrer" target="_blank">“Creating Estimators in tf.estimator.”</a>教程</p>
</blockquote>
<h4 id="设置日志钩子"><a href="#设置日志钩子" class="headerlink" title="设置日志钩子"></a>设置日志钩子</h4><p>由于CNN需要花费一段时间进行训练，我们可以设置一些日志用来追踪训练进度。我们可以使用Tensroflow中的<a href="https://www.tensorflow.org/api_docs/python/tf/train/SessionRunHook" rel="external nofollow noopener noreferrer" target="_blank"><code>tf.train.SessionRunHook</code></a>来创建一个<a href="https://www.tensorflow.org/api_docs/python/tf/train/LoggingTensorHook" rel="external nofollow noopener noreferrer" target="_blank"><code>tf.train.LoggingTensorHook</code></a>。它将记录我们CNN中softmax层的概率值。继续添加以下代码到<code>main()</code>：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set up logging for predictions</span></span><br><span class="line">tensors_to_log = &#123;<span class="string">"probabilities"</span>: <span class="string">"softmax_tensor"</span>&#125;</span><br><span class="line">logging_hook = tf.train.LoggingTensorHook(</span><br><span class="line">      tensors=tensors_to_log, every_n_iter=<span class="number">50</span>)</span><br></pre></td></tr></table></figure></p>
<p>我们定义一个<code>tensors_to_log</code>字典用来存储需要被记录的张量。字典里的每个键值对应着我们想要输出到日志中的标签，相应的标签是TensorFlow图形中张量的名称。这里我们可以通过<code>probabilities</code>来找到<code>softmax_tensor</code>,这个名字在之前的<code>cnn_model_fn</code>中已定义。</p>
<blockquote>
<p>如果你没有指定具体名称，Tensorflow将会指定一个默认的名字。另外还有两个简单的方法可以发现操作：在<a href="https://www.tensorflow.org/programmers_guide/graph_viz" rel="external nofollow noopener noreferrer" target="_blank">TensorBoard</a>可视化你的神经元图,或者开启<a href="https://www.tensorflow.org/programmers_guide/debugger" rel="external nofollow noopener noreferrer" target="_blank">TensorFlow Debugger (tfdbg)</a>。</p>
</blockquote>
<p>接下来，我们创建<code>LoggingTensorHook</code>，<code>tensors</code>参数传入<code>tensors_to_log</code>。我们设置<code>every_n_iter = 50</code>，它表示每隔50次训练之后记录概率值。</p>
<h4 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h4><p>现在我们准备训练我们的模型，我们需要创建一个<code>train_input_fn</code>然后调用<code>mnist_classifier</code>的<code>train()</code>方法。添加以下内容到<code>main()</code>:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Train the model</span></span><br><span class="line">train_input_fn = tf.estimator.inputs.numpy_input_fn(</span><br><span class="line">    x=&#123;<span class="string">"x"</span>: train_data&#125;,</span><br><span class="line">    y=train_labels,</span><br><span class="line">    batch_size=<span class="number">100</span>,</span><br><span class="line">    num_epochs=<span class="literal">None</span>,</span><br><span class="line">    shuffle=<span class="literal">True</span>)</span><br><span class="line">mnist_classifier.train(</span><br><span class="line">    input_fn=train_input_fn,</span><br><span class="line">    steps=<span class="number">20000</span>,</span><br><span class="line">    hooks=[logging_hook])</span><br></pre></td></tr></table></figure></p>
<p>在调用<code>numpy_input_fn</code>这个方法中，我们以字典的形式将训练数据传入到<code>x</code>中，将训练结果标签传入到<code>y</code>中。指定来<code>batch_size</code>为<code>100</code>(意味着每次将会训练100个样例)。<code>num_epochs=None</code>表示这个模型将一直训练下去。<code>shuffle=True</code>参数表示会冲刷训练数据。在调用<code>train</code>方法中，我们设置来<code>step=20000</code>(表示这个模型将会训练20,000次)，然后传入了<code>logging_hook</code>给<code>hooks</code>，让它会在训练过程中被触发。</p>
<h4 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h4><p>一旦训练完成，我们希望通过MNIST test数据集来评估我们的模型生成的概率值的准确度。我们调用<code>evaluate</code>方法，而评估指标在<code>cnn_model_fn</code>中已定义(<code>eval_metric_ops</code>)。继续添加下列代码到<code>main()</code>方法中:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Evaluate the model and print results</span></span><br><span class="line">eval_input_fn = tf.estimator.inputs.numpy_input_fn(</span><br><span class="line">    x=&#123;<span class="string">"x"</span>: eval_data&#125;,</span><br><span class="line">    y=eval_labels,</span><br><span class="line">    num_epochs=<span class="number">1</span>,</span><br><span class="line">    shuffle=<span class="literal">False</span>)</span><br><span class="line">eval_results = mnist_classifier.evaluate(input_fn=eval_input_fn)</span><br><span class="line">print(eval_results)</span><br></pre></td></tr></table></figure></p>
<p>我们设置了<code>num_epochs=1</code>，表示这次操作只迭代一次所有的数据。同时设置<code>shuffle=False</code>表示这次评估将顺行遍历数据。</p>
<h4 id="运行模型"><a href="#运行模型" class="headerlink" title="运行模型"></a>运行模型</h4><p>我们编写了创建CNN模型的函数，<code>Estimator</code>，已经训练/评估的相关逻辑代码，现在是该看看结果如何了；运行<code>cnn_mnist.py</code>。</p>
<blockquote>
<p>注意：训练CNNs是需要大量计算的，因此十分耗时。运行<code>cnn_mnist.py</code>所需的时间取决于你的处理器，如果在CPU上运行可能会超过1个小时。可以通过减少步数(指定<strong>train()</strong>中的<strong>step</strong>参数)来缩减训练时间，当然这会影响到准确度。</p>
</blockquote>
<p>在训练过程中，你可以看到类似下列日志输出:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO:tensorflow:loss = 2.36026, step = 1</span><br><span class="line">INFO:tensorflow:probabilities = [[ 0.07722801  0.08618255  0.09256398, ...]]</span><br><span class="line">...</span><br><span class="line">INFO:tensorflow:loss = 2.13119, step = 101</span><br><span class="line">INFO:tensorflow:global_step/sec: 5.44132</span><br><span class="line">...</span><br><span class="line">INFO:tensorflow:Loss for final step: 0.553216.</span><br><span class="line"></span><br><span class="line">INFO:tensorflow:Restored model from /tmp/mnist_convnet_model</span><br><span class="line">INFO:tensorflow:Eval steps [0,inf) for training step 20000.</span><br><span class="line">INFO:tensorflow:Input iterator is exhausted.</span><br><span class="line">INFO:tensorflow:Saving evaluation summary for step 20000: accuracy = 0.9733, loss = 0.0902271</span><br><span class="line">&#123;&apos;loss&apos;: 0.090227105, &apos;global_step&apos;: 20000, &apos;accuracy&apos;: 0.97329998&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这里，我们的测试数据集已经达到了97.3％的准确率。</p>
<hr>
<h3 id="更多资源"><a href="#更多资源" class="headerlink" title="更多资源"></a>更多资源</h3><p>如果想要更多的了解Tensorflow中的Estimators及CNNs，可以阅读以下资源：</p>
<ul>
<li><a href="https://www.tensorflow.org/get_started/custom_estimators" rel="external nofollow noopener noreferrer" target="_blank">Creating Estimators in tf.estimator</a>提供一个关于TensorFlow Estimator API的入门介绍。里边包含了配置一个Estimator,编写生成模型函数，计算损失率，及定义训练操作。</li>
<li><a href="https://www.tensorflow.org/tutorials/deep_cnn" rel="external nofollow noopener noreferrer" target="_blank">Convolutional Neural Networks</a>如何使用Tensorflow<em>低层次</em>API而不是Estimator来构建一个MNIST CNN分类模型。</li>
</ul>
<blockquote>
<p>译自<a href="https://www.tensorflow.org/tutorials/layers" rel="external nofollow noopener noreferrer" target="_blank">A Guide to TF Layers: Building a Convolutional Neural Network</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat零散知识点收集</title>
    <url>/tomcat-problem/</url>
    <content><![CDATA[<p>收集一些平时使用Tomcat碰到的问题。</p>
<a id="more"></a>
<h3 id="Tomcat出现processWorkerExit问题"><a href="#Tomcat出现processWorkerExit问题" class="headerlink" title="Tomcat出现processWorkerExit问题"></a>Tomcat出现processWorkerExit问题</h3><blockquote>
<p><a href="http://hi.baidu.com/hellodragon109/item/bdd485e981f2c1058d3ea8b7" rel="external nofollow noopener noreferrer" target="_blank">eclipse中tomcat自动部署时自动停止问题processWorkerExit</a></p>
</blockquote>
<p>1、问题描述<br>  在eclipse或者集成eclipse的其他开发工具中，在tomcat中部署了项目debug模式启动项目，项目启动之后修改项目java源代码，eclipse会自动部署项目到tomcat中。但在tomcat自动重启时会自动停止到<code>processWorkerExit(w, completedAbruptly);</code>这一行代码上。</p>
<p>2、问题出现原因<br>  原因是因为在<code>java.util.concurrent.ThreadPoolExecutor</code>类中的<code>runWorker(Worker w)</code>方法上有未捕获的异常信息<br>3、解决方案<br>  去掉java-&gt;debug-&gt;suspend execution on uncaught exceptions 选项钱的对勾就行了</p>
<hr>
<h3 id="Tomcat-JNDI连接池"><a href="#Tomcat-JNDI连接池" class="headerlink" title="Tomcat JNDI连接池"></a>Tomcat JNDI连接池</h3><blockquote>
<p><a href="http://blog.csdn.net/jokes000/article/details/7463345" rel="external nofollow noopener noreferrer" target="_blank">Tomcat 7.0 JNDI连接池配置</a><br><a href="http://blog.csdn.net/lgm277531070/article/details/6711177" rel="external nofollow noopener noreferrer" target="_blank">tomcat下jndi的三种配置方式</a></p>
</blockquote>
<p>将所用数据库的jdbc驱动包放到tomcat目录下的<code>lib</code>文件夹内</p>
<h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p>在tomcat目录下的conf文件夹内找到<code>context.xml</code>，在<code>Context</code>节点下添加如下代码<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"jdbc/test"</span>   </span></span><br><span class="line"><span class="tag">          <span class="attr">auth</span>=<span class="string">"Container"</span>   </span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span>   </span></span><br><span class="line"><span class="tag">          <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span>   </span></span><br><span class="line"><span class="tag">          <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>   </span></span><br><span class="line"><span class="tag">          <span class="attr">username</span>=<span class="string">"root"</span>   </span></span><br><span class="line"><span class="tag">          <span class="attr">password</span>=<span class="string">"root"</span>   </span></span><br><span class="line"><span class="tag">          <span class="attr">maxActive</span>=<span class="string">"20"</span>   </span></span><br><span class="line"><span class="tag">          <span class="attr">maxIdle</span>=<span class="string">"10"</span>   </span></span><br><span class="line"><span class="tag">          <span class="attr">maxWait</span>=<span class="string">"10000"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后在WEB项目中中的<code>web.xml</code>中添加如下代码:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resource-ref</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>JNDI DataSource<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 节点名字要与Resource name一致 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">res-ref-name</span>&gt;</span>jdbc/test<span class="tag">&lt;/<span class="name">res-ref-name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">res-ref-type</span>&gt;</span>javax.sql.DataSource<span class="tag">&lt;/<span class="name">res-ref-type</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">res-auth</span>&gt;</span>Container<span class="tag">&lt;/<span class="name">res-auth</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">resource-ref</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可以编写一个类测试一下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> NamingException, SQLException</span>&#123;</span><br><span class="line">    Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">    DataSource ds = (DataSource) ctx.lookup(<span class="string">"java:comp/env/jdbc/test"</span>);</span><br><span class="line">    Connection conn = ds.getConnection();</span><br><span class="line">    <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h4><p>在WEB项目中的<code>META-INF</code>文件下新建<code>context.xml</code>文件<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">auth</span>=<span class="string">"Container"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxActive</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxIdle</span>=<span class="string">"40"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxWait</span>=<span class="string">"12000"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">name</span>=<span class="string">"jdbc/test"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">username</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">password</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/BookDB?characterEncoding=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>接着编辑<code>web.xml</code>与<strong>全局配置</strong>中的一样</p>
<hr>
<h3 id="同时启动多个Tomcat"><a href="#同时启动多个Tomcat" class="headerlink" title="同时启动多个Tomcat"></a>同时启动多个Tomcat</h3><blockquote>
<p><a href="http://blog.csdn.net/newizan/article/details/37343205" rel="external nofollow noopener noreferrer" target="_blank">两个一样的tomcat不能同时启动解决方法</a></p>
</blockquote>
<p>需要使用免安装版的压缩包</p>
<ol>
<li>在系统的环境变量中增加<code>CATALINA_HOME2</code>及<code>CATALINA_BASE2</code>，值为新的Tomcat的目录。</li>
<li>修改新的tomcat中的startup.bat，把其中的<code>CATALINA_HOME</code>改为<code>CATALINA_HOME2</code></li>
<li>修改新的tomcat中的catalina.bat，把其中的<code>CATALINA_HOME</code>改为<code>CATALINA_HOME2</code>，<code>CATALINA_BASE</code>改为<code>CATALINA_BASE2</code></li>
<li>修改conf/server.xml文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把端口改为没有是使用的端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把端口改为没有是使用的端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">maxHttpHeaderSize</span>=<span class="string">"8192"</span> <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">minSpareThreads</span>=<span class="string">"25"</span> <span class="attr">maxSpareThreads</span>=<span class="string">"75"</span> <span class="attr">enableLookups</span>=<span class="string">"false"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">acceptCount</span>=<span class="string">"100"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">disableUploadTimeout</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把端口改为没有是使用的端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">enableLookups</span>=<span class="string">"false"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>至此如无意外已经可以同时启动两台Tomcat了，如果需要更多台，则按上述步骤继续添加新的环境变量以及修改端口。</p>
<hr>
<h3 id="修改-tomcat-内存"><a href="#修改-tomcat-内存" class="headerlink" title="修改 tomcat 内存"></a>修改 tomcat 内存</h3><blockquote>
<p><a href="http://www.cnblogs.com/quietwalk/archive/2012/11/05/2755199.html" rel="external nofollow noopener noreferrer" target="_blank">修改 tomcat 内存</a></p>
</blockquote>
<p>在Jetty 的VM参数中设置：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-Xms256m -Xmx512m -XX:MaxNewSize=256m -XX:MaxPermSize=256m</span><br></pre></td></tr></table></figure></p>
<p>在tomcat运行环境中设置：<br>window环境 startup.bat第一行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET CATALINA_OPTS= -Xms256m -Xmx512m -XX:MaxNewSize=256m -XX:MaxPermSize=256m</span><br></pre></td></tr></table></figure></p>
<p>修改catalina.bat文件,只需要在文件的头部加上<code>set JAVA_OPTS=-Xms512m -Xmx512m -Xss1024k</code>，数值分别对应了初始化的<strong>最小内存</strong>，<strong>最大内存</strong>，<strong>线程内存大小</strong>。如果JDK的版本是5.0之后的，线程内存可以不用设置。</p>
<p>对于容器下运行了多个WEB应用时，尽量将相同的JAR包转移到TOMCAT的lib下，此外还需要在<code>JAVA OPTS</code>后加上如下配置：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-XX:PermSize=16m -XX:MaxPermSize=128m</span><br></pre></td></tr></table></figure></p>
<p>即为：<code>JAVA_OPTS=’-Xms256m –Xmx512m -XX:PermSize=128m -XX:MaxPermSize=512m’</code><br>此配置表示JAVA永久保存区域（即不会被虚拟机回收）初始大小为16M，最大为128M。</p>
<p>修改内存后，可启动TOMCAT，输入<code>http://127.0.0.1:8080</code>，进入Status，会提示输入登录的用户名和密码，用户可以在conf/tomcat-user.xml中节点<code>&lt;tomcat-users&gt;</code>添加如下配置(配置完后需要重启TOMCAT)，<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"admin"</span> <span class="attr">roles</span>=<span class="string">"manager"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>登录后即可看到TOMCAT当前的空闲内存和最大内存。</p>
<p>tomcat报<strong>Exception in thread “http-8080-36” java.lang.OutOfMemoryError: PermGen space</strong>异常的解决：</p>
<p><code>PermGen space</code>的全称是<code>Permanent Generation space</code>,是指内存的永久保存区域,</p>
<p>这块内存主要是被JVM存放Class和Meta信息的,Class在被Loader时就会被放到PermGen space中,<br>它和存放类实例(Instance)的Heap区域不同,GC(Garbage Collection)不会在主程序运行期对<br>PermGen space进行清理，所以如果你的应用中有很多CLASS的话,就很可能出现PermGen space错误,<br>这种错误常见在web服务器对JSP进行pre compile的时候。如果你的WEB APP下都用了大量的第三方jar, 其大小<br>超过了jvm默认的大小(4M)那么就会产生此错误信息了。<br>解决方法： 手动设置MaxPermSize大小</p>
<p>修改TOMCAT_HOME/bin/catalina.sh<br>在<code>echo &quot;Using CATALINA_BASE: $CATALINA_BASE&quot;</code>上面加入以下行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"-server -XX:PermSize=128m -XX:MaxPermSize=256m”</span></span><br></pre></td></tr></table></figure></p>
<p>建议：将相同的第三方jar文件移置到tomcat/shared/lib目录下，这样可以达到减少jar 文档重复占用内存的目的</p>
]]></content>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows系统下的部分解决办法</title>
    <url>/windows/</url>
    <content><![CDATA[<h3 id="Windows-7-修改登录界面"><a href="#Windows-7-修改登录界面" class="headerlink" title="Windows 7 修改登录界面"></a>Windows 7 修改登录界面</h3><blockquote>
<p><a href="http://jingyan.baidu.com/article/9f63fb91cf169dc8410f0e7c.html" rel="external nofollow noopener noreferrer" target="_blank">WIN7登陆界面怎么修改</a></p>
</blockquote>
<p>按快捷键<code>Win+R</code>或者打开<strong>开始</strong>菜单，点击<strong>运行</strong>,然后输入<code>cmd</code>开启命令行工具。接着在命令行工具输入<code>regedit</code>开启注册表编辑器。按以下路径点开:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI\Background</span><br></pre></td></tr></table></figure></p>
<p>然后在注册表编辑器右边的面板中找到键<code>OEMBackground</code>，没有可以新建一个。<br>将值改成<strong>1</strong>,保存。<br>打开<code>C:\Windows\System32\oobe\info\backgrounds</code>文件夹，没有对应的文件夹就新建。<br>然后准备一张与当前分辨率一致的图片，命名为<code>backgroundDefault.jpg</code>,图片大小最好保持在<em>250KB</em>以下。<br>按<code>Win+L</code>查看效果。</p>
<a id="more"></a>
<hr>
<h3 id="Windows-7-重建图标缓存"><a href="#Windows-7-重建图标缓存" class="headerlink" title="Windows 7 重建图标缓存"></a>Windows 7 重建图标缓存</h3><blockquote>
<p><a href="http://zhidao.baidu.com/question/175795438.html" rel="external nofollow noopener noreferrer" target="_blank">win7 如何重建图标缓存</a></p>
</blockquote>
<p>将以下文本复制到一个新建文本中，然后重命名为<code>bat</code>文件，即可双击运行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rem 关闭Windows外壳程序explorer</span><br><span class="line"></span><br><span class="line">taskkill /f /im explorer.exe</span><br><span class="line"></span><br><span class="line">rem 清理系统图标缓存数据库</span><br><span class="line"></span><br><span class="line">attrib -h -s -r <span class="string">"%userprofile%\AppData\Local\IconCache.db"</span></span><br><span class="line"></span><br><span class="line">del /f <span class="string">"%userprofile%\AppData\Local\IconCache.db"</span></span><br><span class="line"></span><br><span class="line">attrib /s /d -h -s -r <span class="string">"%userprofile%\AppData\Local\Microsoft\Windows\Explorer\*"</span></span><br><span class="line"></span><br><span class="line">del /f <span class="string">"%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_32.db"</span></span><br><span class="line">del /f <span class="string">"%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_96.db"</span></span><br><span class="line">del /f <span class="string">"%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_102.db"</span></span><br><span class="line">del /f <span class="string">"%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_256.db"</span></span><br><span class="line">del /f <span class="string">"%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_1024.db"</span></span><br><span class="line">del /f <span class="string">"%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_idx.db"</span></span><br><span class="line">del /f <span class="string">"%userprofile%\AppData\Local\Microsoft\Windows\Explorer\thumbcache_sr.db"</span></span><br><span class="line"></span><br><span class="line">rem 清理 系统托盘记忆的图标</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> y|reg delete <span class="string">"HKEY_CLASSES_ROOT\Local Settings\Software\Microsoft\Windows\CurrentVersion\TrayNotify"</span> /v IconStreams</span><br><span class="line"><span class="built_in">echo</span> y|reg delete <span class="string">"HKEY_CLASSES_ROOT\Local Settings\Software\Microsoft\Windows\CurrentVersion\TrayNotify"</span> /v PastIconsStream</span><br><span class="line"></span><br><span class="line">rem 重启Windows外壳程序explorer</span><br><span class="line"></span><br><span class="line">start explorer</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="手动添加与删除Windows服务"><a href="#手动添加与删除Windows服务" class="headerlink" title="手动添加与删除Windows服务"></a>手动添加与删除Windows服务</h3><blockquote>
<p><a href="http://www.metsky.com/archives/571.html" rel="external nofollow noopener noreferrer" target="_blank">如何手动添加和删除Windows服务</a></p>
</blockquote>
<p>创建命令:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sc create [service name] [binPath= ] &lt;option1&gt; &lt;option2&gt;...</span><br></pre></td></tr></table></figure></p>
<p>如:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sc create <span class="built_in">test</span> binpath=<span class="string">"C:\test.exe"</span></span><br></pre></td></tr></table></figure></p>
<p>删除命令:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sc delete servicename</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="使用WinRAR解压7z分卷压缩文件"><a href="#使用WinRAR解压7z分卷压缩文件" class="headerlink" title="使用WinRAR解压7z分卷压缩文件"></a>使用WinRAR解压7z分卷压缩文件</h3><blockquote>
<p><a href="http://blog.163.com/chenhao0528@yeah/blog/static/172439055201173010112167/" rel="external nofollow noopener noreferrer" target="_blank">怎样用WinRAR解压7z.001，7z.002……格式的文件</a></p>
</blockquote>
<p><strong>WinRAR</strong>软件可以直接解压<strong>7z</strong>格式的文件，但是碰到7z格式的分卷压缩文件如“xx.7z.001,xx.7z.002···”这些就不能识别了，因此需要使用一个命令来解压。<br>开启命令行工具，定位到7z分卷压缩文件的文件目录下，然后运行<code>copy  /B filename.7z.*  filename.7z</code>命令即可将所有的7z分卷压缩文件合并成一个7z压缩文件，这样就可以使用WinRAR来解压了。</p>
<hr>
<h3 id="virtual-box-安装windows7-提示status-0xc0000225错误"><a href="#virtual-box-安装windows7-提示status-0xc0000225错误" class="headerlink" title="virtual box 安装windows7 提示status: 0xc0000225错误"></a>virtual box 安装windows7 提示status: 0xc0000225错误</h3><blockquote>
<p><a href="http://liwpk.blog.163.com/blog/static/3632617020134153452495/" rel="external nofollow noopener noreferrer" target="_blank">virtual box 安装windows7 提示status: 0xc0000225错误</a></p>
</blockquote>
<p>处理此问题方法: <strong>虚拟机 设置(setting)-&gt;系统(system)-&gt;主板(motherboard)-&gt;扩展特性</strong>,勾选<strong>启用 I/O APIC</strong></p>
<hr>
<h3 id="Windows-7与Ubuntu双系统时卸载Ubuntu系统的方法"><a href="#Windows-7与Ubuntu双系统时卸载Ubuntu系统的方法" class="headerlink" title="Windows 7与Ubuntu双系统时卸载Ubuntu系统的方法"></a>Windows 7与Ubuntu双系统时卸载Ubuntu系统的方法</h3><blockquote>
<p><a href="http://www.linuxidc.com/Linux/2010-03/25129.htm" rel="external nofollow noopener noreferrer" target="_blank">Win7与Ubuntu双系统时卸载Ubuntu的方法</a></p>
</blockquote>
<ol>
<li>需要下载<code>MBRFix</code>工具,并且放置C盘中。</li>
<li>在命令行中定位到C盘根目录。</li>
<li>输入命令<code>MBRFix /drive 0 fixmbr /yes</code></li>
<li>重启之后直接进入<code>Win7</code>，然后使用系统自带的磁盘管理工具删除<code>Ubuntu</code>分区即可。</li>
<li>如果直接在<code>Win7</code>中删除了<code>Ubuntu</code>分区，需要在<strong>系统管理员权限命令行</strong>中输入命令<code>mbrfix /dirve 0 fixmbr /yes</code>；重启之后直接进入<code>Win7</code>，然后使用系统自带的磁盘管理工具删除<code>Ubuntu</code>分</li>
</ol>
<hr>
<h3 id="在WinPE下硬盘安装Win8"><a href="#在WinPE下硬盘安装Win8" class="headerlink" title="在WinPE下硬盘安装Win8"></a>在WinPE下硬盘安装Win8</h3><blockquote>
<p><a href="http://jujumao.org/forum.php?mod=viewthread&amp;tid=834&amp;highlight=win8" rel="external nofollow noopener noreferrer" target="_blank">教你在winpe下硬盘全新安装win8方法</a></p>
</blockquote>
<ol>
<li>将<code>Win8</code>安装光盘解压到硬盘任意位置，如<code>D:\win8</code>。</li>
<li>提取<code>Win8</code>安装光盘下的<code>boot</code>文件全部复制到<code>C</code>盘。</li>
<li><code>C</code>盘新建文件夹<code>sources</code>。</li>
<li>将<code>Win8</code>安装光盘下的<code>sources</code>文件夹下的<code>boot.win</code>复制到<code>C:\sources</code>下。</li>
<li>将<code>Win8</code>安装光盘下的<code>bootmgr</code>文件复制到<code>C:\</code>下。</li>
<li>在<code>WinPE</code>下运行命令行工具，输入命令<code>c:\boot\bootsect.exe /nt60 c:</code>;提示成功后重启计算机。</li>
<li>重启后自动进入安装界面，选择安装语言之后，在<strong>开始安装界面</strong>，选择<strong>修复安装</strong>，然后选择<strong>疑难问题</strong>，点击<strong>高级</strong>,选择最后一项<strong>命令提示符</strong>，进入DOS窗口。</li>
<li>输入命令<code>D:\win8\sources\setup.exe</code>，开始安装，<strong>选择安装语言-&gt;自定义安装-&gt;格式化C盘-&gt;下一步</strong>。</li>
</ol>
<hr>
<h3 id="Windows7-8-1获取文件夹最高权限"><a href="#Windows7-8-1获取文件夹最高权限" class="headerlink" title="Windows7/8.1获取文件夹最高权限"></a>Windows7/8.1获取文件夹最高权限</h3><blockquote>
<p><a href="http://blog.sina.com.cn/s/blog_3d527ed00100zn50.html" rel="external nofollow noopener noreferrer" target="_blank">win7 需要来自SYSTEM的权限才能对文件更改</a><br><a href="http://jingyan.baidu.com/article/fcb5aff7919247edaa4a713e.html" rel="external nofollow noopener noreferrer" target="_blank">win8.1最高权限的设置方法</a></p>
</blockquote>
<ol>
<li>选中文件夹，右键菜单选择<strong>属性</strong>。</li>
<li>在属性窗口中点击<strong>安全</strong>标签页，点击底部的<strong>高级</strong>按钮。</li>
<li>在弹出的<strong>高级安全设置</strong>界面中，找到所有者，点击旁边的<strong>更改</strong>按钮。</li>
<li>在弹出的<strong>选择用户与组</strong>界面中，在<strong>输入要选择的对象名称</strong>中输入需要更改的用户名，可以点击<strong>检查名称</strong>按钮看是否写对，如果不确定，可以点击底部的<strong>高级..</strong>按钮进入另一页面筛选出合适的用户。点击确认后关闭该页面。</li>
<li>在<strong>高级安全设置</strong>界面中，点击<strong>权限条目</strong>中的<code>SYSTEM</code>主体，然后勾上<strong>所有者</strong>下方的<strong>替换子内容和对象所有者</strong>选项框，以及最下面的<strong>使用可从此对象继承的权限项目替换所有子对象的权限项目</strong>选项框，点击确定后关闭选项卡。</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>virtualbox</tag>
      </tags>
  </entry>
</search>
